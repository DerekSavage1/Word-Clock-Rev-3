
WordClock_Rev_3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005464  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005678  08005678  00020080  2**0
                  CONTENTS
  4 .ARM          00000008  08005678  08005678  00015678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005680  08005680  00020080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005680  08005680  00015680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005684  08005684  00015684  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000080  20000000  08005688  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  20000080  08005708  00020080  2**2
                  ALLOC
 10 ._user_heap_stack 00000c00  20000418  08005708  00020418  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020080  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d06d  00000000  00000000  000200b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000229d  00000000  00000000  0002d11d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c88  00000000  00000000  0002f3c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00030048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b5d  00000000  00000000  00030be8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ec68  00000000  00000000  00048745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009371d  00000000  00000000  000573ad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eaaca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000372c  00000000  00000000  000eab1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000080 	.word	0x20000080
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080055ec 	.word	0x080055ec

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000084 	.word	0x20000084
 80001dc:	080055ec 	.word	0x080055ec

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b974 	b.w	8000590 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	4604      	mov	r4, r0
 80002c8:	468e      	mov	lr, r1
 80002ca:	2b00      	cmp	r3, #0
 80002cc:	d14d      	bne.n	800036a <__udivmoddi4+0xaa>
 80002ce:	428a      	cmp	r2, r1
 80002d0:	4694      	mov	ip, r2
 80002d2:	d969      	bls.n	80003a8 <__udivmoddi4+0xe8>
 80002d4:	fab2 f282 	clz	r2, r2
 80002d8:	b152      	cbz	r2, 80002f0 <__udivmoddi4+0x30>
 80002da:	fa01 f302 	lsl.w	r3, r1, r2
 80002de:	f1c2 0120 	rsb	r1, r2, #32
 80002e2:	fa20 f101 	lsr.w	r1, r0, r1
 80002e6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ea:	ea41 0e03 	orr.w	lr, r1, r3
 80002ee:	4094      	lsls	r4, r2
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	0c21      	lsrs	r1, r4, #16
 80002f6:	fbbe f6f8 	udiv	r6, lr, r8
 80002fa:	fa1f f78c 	uxth.w	r7, ip
 80002fe:	fb08 e316 	mls	r3, r8, r6, lr
 8000302:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000306:	fb06 f107 	mul.w	r1, r6, r7
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f106 30ff 	add.w	r0, r6, #4294967295
 8000316:	f080 811f 	bcs.w	8000558 <__udivmoddi4+0x298>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 811c 	bls.w	8000558 <__udivmoddi4+0x298>
 8000320:	3e02      	subs	r6, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a5b      	subs	r3, r3, r1
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb3 f0f8 	udiv	r0, r3, r8
 800032c:	fb08 3310 	mls	r3, r8, r0, r3
 8000330:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000334:	fb00 f707 	mul.w	r7, r0, r7
 8000338:	42a7      	cmp	r7, r4
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x92>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 33ff 	add.w	r3, r0, #4294967295
 8000344:	f080 810a 	bcs.w	800055c <__udivmoddi4+0x29c>
 8000348:	42a7      	cmp	r7, r4
 800034a:	f240 8107 	bls.w	800055c <__udivmoddi4+0x29c>
 800034e:	4464      	add	r4, ip
 8000350:	3802      	subs	r0, #2
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	1be4      	subs	r4, r4, r7
 8000358:	2600      	movs	r6, #0
 800035a:	b11d      	cbz	r5, 8000364 <__udivmoddi4+0xa4>
 800035c:	40d4      	lsrs	r4, r2
 800035e:	2300      	movs	r3, #0
 8000360:	e9c5 4300 	strd	r4, r3, [r5]
 8000364:	4631      	mov	r1, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d909      	bls.n	8000382 <__udivmoddi4+0xc2>
 800036e:	2d00      	cmp	r5, #0
 8000370:	f000 80ef 	beq.w	8000552 <__udivmoddi4+0x292>
 8000374:	2600      	movs	r6, #0
 8000376:	e9c5 0100 	strd	r0, r1, [r5]
 800037a:	4630      	mov	r0, r6
 800037c:	4631      	mov	r1, r6
 800037e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000382:	fab3 f683 	clz	r6, r3
 8000386:	2e00      	cmp	r6, #0
 8000388:	d14a      	bne.n	8000420 <__udivmoddi4+0x160>
 800038a:	428b      	cmp	r3, r1
 800038c:	d302      	bcc.n	8000394 <__udivmoddi4+0xd4>
 800038e:	4282      	cmp	r2, r0
 8000390:	f200 80f9 	bhi.w	8000586 <__udivmoddi4+0x2c6>
 8000394:	1a84      	subs	r4, r0, r2
 8000396:	eb61 0303 	sbc.w	r3, r1, r3
 800039a:	2001      	movs	r0, #1
 800039c:	469e      	mov	lr, r3
 800039e:	2d00      	cmp	r5, #0
 80003a0:	d0e0      	beq.n	8000364 <__udivmoddi4+0xa4>
 80003a2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003a6:	e7dd      	b.n	8000364 <__udivmoddi4+0xa4>
 80003a8:	b902      	cbnz	r2, 80003ac <__udivmoddi4+0xec>
 80003aa:	deff      	udf	#255	; 0xff
 80003ac:	fab2 f282 	clz	r2, r2
 80003b0:	2a00      	cmp	r2, #0
 80003b2:	f040 8092 	bne.w	80004da <__udivmoddi4+0x21a>
 80003b6:	eba1 010c 	sub.w	r1, r1, ip
 80003ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003be:	fa1f fe8c 	uxth.w	lr, ip
 80003c2:	2601      	movs	r6, #1
 80003c4:	0c20      	lsrs	r0, r4, #16
 80003c6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ca:	fb07 1113 	mls	r1, r7, r3, r1
 80003ce:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003d2:	fb0e f003 	mul.w	r0, lr, r3
 80003d6:	4288      	cmp	r0, r1
 80003d8:	d908      	bls.n	80003ec <__udivmoddi4+0x12c>
 80003da:	eb1c 0101 	adds.w	r1, ip, r1
 80003de:	f103 38ff 	add.w	r8, r3, #4294967295
 80003e2:	d202      	bcs.n	80003ea <__udivmoddi4+0x12a>
 80003e4:	4288      	cmp	r0, r1
 80003e6:	f200 80cb 	bhi.w	8000580 <__udivmoddi4+0x2c0>
 80003ea:	4643      	mov	r3, r8
 80003ec:	1a09      	subs	r1, r1, r0
 80003ee:	b2a4      	uxth	r4, r4
 80003f0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003f4:	fb07 1110 	mls	r1, r7, r0, r1
 80003f8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003fc:	fb0e fe00 	mul.w	lr, lr, r0
 8000400:	45a6      	cmp	lr, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x156>
 8000404:	eb1c 0404 	adds.w	r4, ip, r4
 8000408:	f100 31ff 	add.w	r1, r0, #4294967295
 800040c:	d202      	bcs.n	8000414 <__udivmoddi4+0x154>
 800040e:	45a6      	cmp	lr, r4
 8000410:	f200 80bb 	bhi.w	800058a <__udivmoddi4+0x2ca>
 8000414:	4608      	mov	r0, r1
 8000416:	eba4 040e 	sub.w	r4, r4, lr
 800041a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800041e:	e79c      	b.n	800035a <__udivmoddi4+0x9a>
 8000420:	f1c6 0720 	rsb	r7, r6, #32
 8000424:	40b3      	lsls	r3, r6
 8000426:	fa22 fc07 	lsr.w	ip, r2, r7
 800042a:	ea4c 0c03 	orr.w	ip, ip, r3
 800042e:	fa20 f407 	lsr.w	r4, r0, r7
 8000432:	fa01 f306 	lsl.w	r3, r1, r6
 8000436:	431c      	orrs	r4, r3
 8000438:	40f9      	lsrs	r1, r7
 800043a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800043e:	fa00 f306 	lsl.w	r3, r0, r6
 8000442:	fbb1 f8f9 	udiv	r8, r1, r9
 8000446:	0c20      	lsrs	r0, r4, #16
 8000448:	fa1f fe8c 	uxth.w	lr, ip
 800044c:	fb09 1118 	mls	r1, r9, r8, r1
 8000450:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000454:	fb08 f00e 	mul.w	r0, r8, lr
 8000458:	4288      	cmp	r0, r1
 800045a:	fa02 f206 	lsl.w	r2, r2, r6
 800045e:	d90b      	bls.n	8000478 <__udivmoddi4+0x1b8>
 8000460:	eb1c 0101 	adds.w	r1, ip, r1
 8000464:	f108 3aff 	add.w	sl, r8, #4294967295
 8000468:	f080 8088 	bcs.w	800057c <__udivmoddi4+0x2bc>
 800046c:	4288      	cmp	r0, r1
 800046e:	f240 8085 	bls.w	800057c <__udivmoddi4+0x2bc>
 8000472:	f1a8 0802 	sub.w	r8, r8, #2
 8000476:	4461      	add	r1, ip
 8000478:	1a09      	subs	r1, r1, r0
 800047a:	b2a4      	uxth	r4, r4
 800047c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000480:	fb09 1110 	mls	r1, r9, r0, r1
 8000484:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000488:	fb00 fe0e 	mul.w	lr, r0, lr
 800048c:	458e      	cmp	lr, r1
 800048e:	d908      	bls.n	80004a2 <__udivmoddi4+0x1e2>
 8000490:	eb1c 0101 	adds.w	r1, ip, r1
 8000494:	f100 34ff 	add.w	r4, r0, #4294967295
 8000498:	d26c      	bcs.n	8000574 <__udivmoddi4+0x2b4>
 800049a:	458e      	cmp	lr, r1
 800049c:	d96a      	bls.n	8000574 <__udivmoddi4+0x2b4>
 800049e:	3802      	subs	r0, #2
 80004a0:	4461      	add	r1, ip
 80004a2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004a6:	fba0 9402 	umull	r9, r4, r0, r2
 80004aa:	eba1 010e 	sub.w	r1, r1, lr
 80004ae:	42a1      	cmp	r1, r4
 80004b0:	46c8      	mov	r8, r9
 80004b2:	46a6      	mov	lr, r4
 80004b4:	d356      	bcc.n	8000564 <__udivmoddi4+0x2a4>
 80004b6:	d053      	beq.n	8000560 <__udivmoddi4+0x2a0>
 80004b8:	b15d      	cbz	r5, 80004d2 <__udivmoddi4+0x212>
 80004ba:	ebb3 0208 	subs.w	r2, r3, r8
 80004be:	eb61 010e 	sbc.w	r1, r1, lr
 80004c2:	fa01 f707 	lsl.w	r7, r1, r7
 80004c6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ca:	40f1      	lsrs	r1, r6
 80004cc:	431f      	orrs	r7, r3
 80004ce:	e9c5 7100 	strd	r7, r1, [r5]
 80004d2:	2600      	movs	r6, #0
 80004d4:	4631      	mov	r1, r6
 80004d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004da:	f1c2 0320 	rsb	r3, r2, #32
 80004de:	40d8      	lsrs	r0, r3
 80004e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004e4:	fa21 f303 	lsr.w	r3, r1, r3
 80004e8:	4091      	lsls	r1, r2
 80004ea:	4301      	orrs	r1, r0
 80004ec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004f0:	fa1f fe8c 	uxth.w	lr, ip
 80004f4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004f8:	fb07 3610 	mls	r6, r7, r0, r3
 80004fc:	0c0b      	lsrs	r3, r1, #16
 80004fe:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000502:	fb00 f60e 	mul.w	r6, r0, lr
 8000506:	429e      	cmp	r6, r3
 8000508:	fa04 f402 	lsl.w	r4, r4, r2
 800050c:	d908      	bls.n	8000520 <__udivmoddi4+0x260>
 800050e:	eb1c 0303 	adds.w	r3, ip, r3
 8000512:	f100 38ff 	add.w	r8, r0, #4294967295
 8000516:	d22f      	bcs.n	8000578 <__udivmoddi4+0x2b8>
 8000518:	429e      	cmp	r6, r3
 800051a:	d92d      	bls.n	8000578 <__udivmoddi4+0x2b8>
 800051c:	3802      	subs	r0, #2
 800051e:	4463      	add	r3, ip
 8000520:	1b9b      	subs	r3, r3, r6
 8000522:	b289      	uxth	r1, r1
 8000524:	fbb3 f6f7 	udiv	r6, r3, r7
 8000528:	fb07 3316 	mls	r3, r7, r6, r3
 800052c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000530:	fb06 f30e 	mul.w	r3, r6, lr
 8000534:	428b      	cmp	r3, r1
 8000536:	d908      	bls.n	800054a <__udivmoddi4+0x28a>
 8000538:	eb1c 0101 	adds.w	r1, ip, r1
 800053c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000540:	d216      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000542:	428b      	cmp	r3, r1
 8000544:	d914      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000546:	3e02      	subs	r6, #2
 8000548:	4461      	add	r1, ip
 800054a:	1ac9      	subs	r1, r1, r3
 800054c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000550:	e738      	b.n	80003c4 <__udivmoddi4+0x104>
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e705      	b.n	8000364 <__udivmoddi4+0xa4>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e3      	b.n	8000324 <__udivmoddi4+0x64>
 800055c:	4618      	mov	r0, r3
 800055e:	e6f8      	b.n	8000352 <__udivmoddi4+0x92>
 8000560:	454b      	cmp	r3, r9
 8000562:	d2a9      	bcs.n	80004b8 <__udivmoddi4+0x1f8>
 8000564:	ebb9 0802 	subs.w	r8, r9, r2
 8000568:	eb64 0e0c 	sbc.w	lr, r4, ip
 800056c:	3801      	subs	r0, #1
 800056e:	e7a3      	b.n	80004b8 <__udivmoddi4+0x1f8>
 8000570:	4646      	mov	r6, r8
 8000572:	e7ea      	b.n	800054a <__udivmoddi4+0x28a>
 8000574:	4620      	mov	r0, r4
 8000576:	e794      	b.n	80004a2 <__udivmoddi4+0x1e2>
 8000578:	4640      	mov	r0, r8
 800057a:	e7d1      	b.n	8000520 <__udivmoddi4+0x260>
 800057c:	46d0      	mov	r8, sl
 800057e:	e77b      	b.n	8000478 <__udivmoddi4+0x1b8>
 8000580:	3b02      	subs	r3, #2
 8000582:	4461      	add	r1, ip
 8000584:	e732      	b.n	80003ec <__udivmoddi4+0x12c>
 8000586:	4630      	mov	r0, r6
 8000588:	e709      	b.n	800039e <__udivmoddi4+0xde>
 800058a:	4464      	add	r4, ip
 800058c:	3802      	subs	r0, #2
 800058e:	e742      	b.n	8000416 <__udivmoddi4+0x156>

08000590 <__aeabi_idiv0>:
 8000590:	4770      	bx	lr
 8000592:	bf00      	nop

08000594 <getRainbowColor>:
   240, 251, 261, 271, 282, 293, 304, 316, 327, 339, 351, 363, 376, 388, 401, 414,
   428, 441, 455, 469, 483, 497, 511, 526, 541, 556, 572, 587, 603, 619, 635, 651,
   668, 685, 702, 719, 736, 754, 772, 790, 808, 827, 845, 864, 883, 903, 922, 942,
   962, 982,1002,1023,};

uint32_t getRainbowColor(uint8_t colorOption) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
    switch (colorOption) {
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	3b01      	subs	r3, #1
 80005a2:	2b0f      	cmp	r3, #15
 80005a4:	d84a      	bhi.n	800063c <getRainbowColor+0xa8>
 80005a6:	a201      	add	r2, pc, #4	; (adr r2, 80005ac <getRainbowColor+0x18>)
 80005a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80005ac:	080005ed 	.word	0x080005ed
 80005b0:	080005f3 	.word	0x080005f3
 80005b4:	080005f7 	.word	0x080005f7
 80005b8:	080005fb 	.word	0x080005fb
 80005bc:	080005ff 	.word	0x080005ff
 80005c0:	08000605 	.word	0x08000605
 80005c4:	0800060b 	.word	0x0800060b
 80005c8:	08000611 	.word	0x08000611
 80005cc:	08000617 	.word	0x08000617
 80005d0:	0800061b 	.word	0x0800061b
 80005d4:	0800061f 	.word	0x0800061f
 80005d8:	08000625 	.word	0x08000625
 80005dc:	08000629 	.word	0x08000629
 80005e0:	0800062d 	.word	0x0800062d
 80005e4:	08000631 	.word	0x08000631
 80005e8:	08000637 	.word	0x08000637
        case 1:
            return 0xFF0000; // Red
 80005ec:	f44f 037f 	mov.w	r3, #16711680	; 0xff0000
 80005f0:	e026      	b.n	8000640 <getRainbowColor+0xac>
        case 2:
            return 0xFF7F00; // Orange
 80005f2:	4b16      	ldr	r3, [pc, #88]	; (800064c <getRainbowColor+0xb8>)
 80005f4:	e024      	b.n	8000640 <getRainbowColor+0xac>
        case 3:
            return 0xFFFF00; // Yellow
 80005f6:	4b16      	ldr	r3, [pc, #88]	; (8000650 <getRainbowColor+0xbc>)
 80005f8:	e022      	b.n	8000640 <getRainbowColor+0xac>
        case 4:
            return 0x7FFF00; // Yellow-Green
 80005fa:	4b16      	ldr	r3, [pc, #88]	; (8000654 <getRainbowColor+0xc0>)
 80005fc:	e020      	b.n	8000640 <getRainbowColor+0xac>
        case 5:
            return 0x00FF00; // Green
 80005fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
 8000602:	e01d      	b.n	8000640 <getRainbowColor+0xac>
        case 6:
            return 0x00FF7F; // Spring Green
 8000604:	f64f 737f 	movw	r3, #65407	; 0xff7f
 8000608:	e01a      	b.n	8000640 <getRainbowColor+0xac>
        case 7:
            return 0x00FFFF; // Cyan
 800060a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800060e:	e017      	b.n	8000640 <getRainbowColor+0xac>
        case 8:
            return 0x007FFF; // Sky Blue
 8000610:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8000614:	e014      	b.n	8000640 <getRainbowColor+0xac>
        case 9:
            return 0x0000FF; // Blue
 8000616:	23ff      	movs	r3, #255	; 0xff
 8000618:	e012      	b.n	8000640 <getRainbowColor+0xac>
        case 10:
            return 0x7F00FF; // Violet
 800061a:	4b0f      	ldr	r3, [pc, #60]	; (8000658 <getRainbowColor+0xc4>)
 800061c:	e010      	b.n	8000640 <getRainbowColor+0xac>
        case 11:
            return 0xFF00FF; // Magenta
 800061e:	f04f 13ff 	mov.w	r3, #16711935	; 0xff00ff
 8000622:	e00d      	b.n	8000640 <getRainbowColor+0xac>
        case 12:
            return 0xFF007F; // Rose
 8000624:	4b0d      	ldr	r3, [pc, #52]	; (800065c <getRainbowColor+0xc8>)
 8000626:	e00b      	b.n	8000640 <getRainbowColor+0xac>
        case 13:
            return 0xFF1493; // Deep Pink
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <getRainbowColor+0xcc>)
 800062a:	e009      	b.n	8000640 <getRainbowColor+0xac>
        case 14:
            return 0xC71585; // Medium Violet Red
 800062c:	4b0d      	ldr	r3, [pc, #52]	; (8000664 <getRainbowColor+0xd0>)
 800062e:	e007      	b.n	8000640 <getRainbowColor+0xac>
        case 15:
            return 0x800080; // Purple
 8000630:	f04f 1380 	mov.w	r3, #8388736	; 0x800080
 8000634:	e004      	b.n	8000640 <getRainbowColor+0xac>
        case 16:
            return 0x8B008B; // Dark Magenta
 8000636:	f04f 138b 	mov.w	r3, #9109643	; 0x8b008b
 800063a:	e001      	b.n	8000640 <getRainbowColor+0xac>
        default:
            return 0xFFFFFF; // Default to White if an unexpected value is provided
 800063c:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
    }
}
 8000640:	4618      	mov	r0, r3
 8000642:	370c      	adds	r7, #12
 8000644:	46bd      	mov	sp, r7
 8000646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064a:	4770      	bx	lr
 800064c:	00ff7f00 	.word	0x00ff7f00
 8000650:	00ffff00 	.word	0x00ffff00
 8000654:	007fff00 	.word	0x007fff00
 8000658:	007f00ff 	.word	0x007f00ff
 800065c:	00ff007f 	.word	0x00ff007f
 8000660:	00ff1493 	.word	0x00ff1493
 8000664:	00c71585 	.word	0x00c71585

08000668 <Blink_LED>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void Blink_LED(uint16_t LED, uint32_t color) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
 800066e:	4603      	mov	r3, r0
 8000670:	6039      	str	r1, [r7, #0]
 8000672:	80fb      	strh	r3, [r7, #6]

	if(LED != lastLED) {
 8000674:	4b20      	ldr	r3, [pc, #128]	; (80006f8 <Blink_LED+0x90>)
 8000676:	781b      	ldrb	r3, [r3, #0]
 8000678:	b29b      	uxth	r3, r3
 800067a:	88fa      	ldrh	r2, [r7, #6]
 800067c:	429a      	cmp	r2, r3
 800067e:	d009      	beq.n	8000694 <Blink_LED+0x2c>
		Set_LED_Hex(lastLED, 0);
 8000680:	4b1d      	ldr	r3, [pc, #116]	; (80006f8 <Blink_LED+0x90>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2100      	movs	r1, #0
 8000686:	4618      	mov	r0, r3
 8000688:	f004 fab4 	bl	8004bf4 <Set_LED_Hex>
		lastLED = LED;
 800068c:	88fb      	ldrh	r3, [r7, #6]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	4b19      	ldr	r3, [pc, #100]	; (80006f8 <Blink_LED+0x90>)
 8000692:	701a      	strb	r2, [r3, #0]
	}

	if (HAL_GetTick() - lastTick >= delayMs) {
 8000694:	f001 fb66 	bl	8001d64 <HAL_GetTick>
 8000698:	4602      	mov	r2, r0
 800069a:	4b18      	ldr	r3, [pc, #96]	; (80006fc <Blink_LED+0x94>)
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	1ad2      	subs	r2, r2, r3
 80006a0:	4b17      	ldr	r3, [pc, #92]	; (8000700 <Blink_LED+0x98>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	429a      	cmp	r2, r3
 80006a6:	d322      	bcc.n	80006ee <Blink_LED+0x86>

		//Toggle LED
		if(isOff){
 80006a8:	4b16      	ldr	r3, [pc, #88]	; (8000704 <Blink_LED+0x9c>)
 80006aa:	781b      	ldrb	r3, [r3, #0]
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d005      	beq.n	80006bc <Blink_LED+0x54>
			Set_LED_Hex(LED, color);
 80006b0:	88fb      	ldrh	r3, [r7, #6]
 80006b2:	6839      	ldr	r1, [r7, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f004 fa9d 	bl	8004bf4 <Set_LED_Hex>
 80006ba:	e004      	b.n	80006c6 <Blink_LED+0x5e>
		} else {
			Set_LED_Hex(LED, 0);
 80006bc:	88fb      	ldrh	r3, [r7, #6]
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 fa97 	bl	8004bf4 <Set_LED_Hex>
		}

		isOff = !isOff;
 80006c6:	4b0f      	ldr	r3, [pc, #60]	; (8000704 <Blink_LED+0x9c>)
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	bf14      	ite	ne
 80006ce:	2301      	movne	r3, #1
 80006d0:	2300      	moveq	r3, #0
 80006d2:	b2db      	uxtb	r3, r3
 80006d4:	f083 0301 	eor.w	r3, r3, #1
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	f003 0301 	and.w	r3, r3, #1
 80006de:	b2da      	uxtb	r2, r3
 80006e0:	4b08      	ldr	r3, [pc, #32]	; (8000704 <Blink_LED+0x9c>)
 80006e2:	701a      	strb	r2, [r3, #0]
		lastTick = HAL_GetTick();
 80006e4:	f001 fb3e 	bl	8001d64 <HAL_GetTick>
 80006e8:	4603      	mov	r3, r0
 80006ea:	4a04      	ldr	r2, [pc, #16]	; (80006fc <Blink_LED+0x94>)
 80006ec:	6013      	str	r3, [r2, #0]
	}
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	2000000e 	.word	0x2000000e
 80006fc:	20000250 	.word	0x20000250
 8000700:	20000008 	.word	0x20000008
 8000704:	2000000c 	.word	0x2000000c

08000708 <clampValue>:

uint16_t clampValue(uint16_t value, uint16_t minVal, uint16_t maxVal) {
 8000708:	b480      	push	{r7}
 800070a:	b083      	sub	sp, #12
 800070c:	af00      	add	r7, sp, #0
 800070e:	4603      	mov	r3, r0
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	460b      	mov	r3, r1
 8000714:	80bb      	strh	r3, [r7, #4]
 8000716:	4613      	mov	r3, r2
 8000718:	807b      	strh	r3, [r7, #2]
    if (abs(0xFFFF - value) < abs(maxVal - value)) {
 800071a:	88fb      	ldrh	r3, [r7, #6]
 800071c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8000720:	33ff      	adds	r3, #255	; 0xff
 8000722:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8000726:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800072a:	8879      	ldrh	r1, [r7, #2]
 800072c:	88fb      	ldrh	r3, [r7, #6]
 800072e:	1acb      	subs	r3, r1, r3
 8000730:	2b00      	cmp	r3, #0
 8000732:	bfb8      	it	lt
 8000734:	425b      	neglt	r3, r3
 8000736:	429a      	cmp	r2, r3
 8000738:	da01      	bge.n	800073e <clampValue+0x36>
  	  return minVal;
 800073a:	88bb      	ldrh	r3, [r7, #4]
 800073c:	e00c      	b.n	8000758 <clampValue+0x50>
    } else {
        // Normal range (does not wrap around)
        if (value < minVal) return minVal;
 800073e:	88fa      	ldrh	r2, [r7, #6]
 8000740:	88bb      	ldrh	r3, [r7, #4]
 8000742:	429a      	cmp	r2, r3
 8000744:	d201      	bcs.n	800074a <clampValue+0x42>
 8000746:	88bb      	ldrh	r3, [r7, #4]
 8000748:	e006      	b.n	8000758 <clampValue+0x50>
        if (value > maxVal) return maxVal;
 800074a:	88fa      	ldrh	r2, [r7, #6]
 800074c:	887b      	ldrh	r3, [r7, #2]
 800074e:	429a      	cmp	r2, r3
 8000750:	d901      	bls.n	8000756 <clampValue+0x4e>
 8000752:	887b      	ldrh	r3, [r7, #2]
 8000754:	e000      	b.n	8000758 <clampValue+0x50>
        return value;
 8000756:	88fb      	ldrh	r3, [r7, #6]
    }
}
 8000758:	4618      	mov	r0, r3
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr

08000764 <switchState>:

bool userSelectingFeature = true; // True when in SELECT state to decide what feature to adjust

void switchState(void) {
 8000764:	b580      	push	{r7, lr}
 8000766:	af00      	add	r7, sp, #0
    switch(currentState) {
 8000768:	4b70      	ldr	r3, [pc, #448]	; (800092c <switchState+0x1c8>)
 800076a:	781b      	ldrb	r3, [r3, #0]
 800076c:	b2db      	uxtb	r3, r3
 800076e:	2b09      	cmp	r3, #9
 8000770:	f200 80d6 	bhi.w	8000920 <switchState+0x1bc>
 8000774:	a201      	add	r2, pc, #4	; (adr r2, 800077c <switchState+0x18>)
 8000776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800077a:	bf00      	nop
 800077c:	080007a5 	.word	0x080007a5
 8000780:	080007ad 	.word	0x080007ad
 8000784:	080007b5 	.word	0x080007b5
 8000788:	08000807 	.word	0x08000807
 800078c:	0800084f 	.word	0x0800084f
 8000790:	080008fb 	.word	0x080008fb
 8000794:	08000919 	.word	0x08000919
 8000798:	0800087f 	.word	0x0800087f
 800079c:	080008af 	.word	0x080008af
 80007a0:	080008df 	.word	0x080008df
        case SLEEP:
            currentState = WAKE;
 80007a4:	4b61      	ldr	r3, [pc, #388]	; (800092c <switchState+0x1c8>)
 80007a6:	2201      	movs	r2, #1
 80007a8:	701a      	strb	r2, [r3, #0]
            break;
 80007aa:	e0bd      	b.n	8000928 <switchState+0x1c4>
        case WAKE:
            currentState = SELECT;
 80007ac:	4b5f      	ldr	r3, [pc, #380]	; (800092c <switchState+0x1c8>)
 80007ae:	2202      	movs	r2, #2
 80007b0:	701a      	strb	r2, [r3, #0]
            break;
 80007b2:	e0b9      	b.n	8000928 <switchState+0x1c4>
        case SELECT:
        	switch((counter / sensitivity)){
 80007b4:	4b5e      	ldr	r3, [pc, #376]	; (8000930 <switchState+0x1cc>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4a5e      	ldr	r2, [pc, #376]	; (8000934 <switchState+0x1d0>)
 80007ba:	6812      	ldr	r2, [r2, #0]
 80007bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80007c0:	2b02      	cmp	r3, #2
 80007c2:	d002      	beq.n	80007ca <switchState+0x66>
 80007c4:	2b03      	cmp	r3, #3
 80007c6:	d00e      	beq.n	80007e6 <switchState+0x82>
        	case 3:
        		currentState = SET_COLOR;
        		counter = color * sensitivity;
        		break;
        	}
            break;
 80007c8:	e0ae      	b.n	8000928 <switchState+0x1c4>
        		counter = sTime.Hours * sensitivity;
 80007ca:	4b5b      	ldr	r3, [pc, #364]	; (8000938 <switchState+0x1d4>)
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	461a      	mov	r2, r3
 80007d0:	4b58      	ldr	r3, [pc, #352]	; (8000934 <switchState+0x1d0>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	fb02 f303 	mul.w	r3, r2, r3
 80007d8:	461a      	mov	r2, r3
 80007da:	4b55      	ldr	r3, [pc, #340]	; (8000930 <switchState+0x1cc>)
 80007dc:	601a      	str	r2, [r3, #0]
        		currentState = SET_HOURS;
 80007de:	4b53      	ldr	r3, [pc, #332]	; (800092c <switchState+0x1c8>)
 80007e0:	2203      	movs	r2, #3
 80007e2:	701a      	strb	r2, [r3, #0]
        		break;
 80007e4:	e00e      	b.n	8000804 <switchState+0xa0>
        		currentState = SET_COLOR;
 80007e6:	4b51      	ldr	r3, [pc, #324]	; (800092c <switchState+0x1c8>)
 80007e8:	2205      	movs	r2, #5
 80007ea:	701a      	strb	r2, [r3, #0]
        		counter = color * sensitivity;
 80007ec:	4b53      	ldr	r3, [pc, #332]	; (800093c <switchState+0x1d8>)
 80007ee:	881b      	ldrh	r3, [r3, #0]
 80007f0:	b29b      	uxth	r3, r3
 80007f2:	461a      	mov	r2, r3
 80007f4:	4b4f      	ldr	r3, [pc, #316]	; (8000934 <switchState+0x1d0>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	fb02 f303 	mul.w	r3, r2, r3
 80007fc:	461a      	mov	r2, r3
 80007fe:	4b4c      	ldr	r3, [pc, #304]	; (8000930 <switchState+0x1cc>)
 8000800:	601a      	str	r2, [r3, #0]
        		break;
 8000802:	bf00      	nop
            break;
 8000804:	e090      	b.n	8000928 <switchState+0x1c4>
        case SET_HOURS:
        	counter = sTime.Minutes * sensitivity;
 8000806:	4b4c      	ldr	r3, [pc, #304]	; (8000938 <switchState+0x1d4>)
 8000808:	785b      	ldrb	r3, [r3, #1]
 800080a:	461a      	mov	r2, r3
 800080c:	4b49      	ldr	r3, [pc, #292]	; (8000934 <switchState+0x1d0>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	fb02 f303 	mul.w	r3, r2, r3
 8000814:	461a      	mov	r2, r3
 8000816:	4b46      	ldr	r3, [pc, #280]	; (8000930 <switchState+0x1cc>)
 8000818:	601a      	str	r2, [r3, #0]
        	Set_LED_Hex(141, getRainbowColor(color));
 800081a:	4b48      	ldr	r3, [pc, #288]	; (800093c <switchState+0x1d8>)
 800081c:	881b      	ldrh	r3, [r3, #0]
 800081e:	b29b      	uxth	r3, r3
 8000820:	b2db      	uxtb	r3, r3
 8000822:	4618      	mov	r0, r3
 8000824:	f7ff feb6 	bl	8000594 <getRainbowColor>
 8000828:	4603      	mov	r3, r0
 800082a:	4619      	mov	r1, r3
 800082c:	208d      	movs	r0, #141	; 0x8d
 800082e:	f004 f9e1 	bl	8004bf4 <Set_LED_Hex>
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000832:	2200      	movs	r2, #0
 8000834:	4940      	ldr	r1, [pc, #256]	; (8000938 <switchState+0x1d4>)
 8000836:	4842      	ldr	r0, [pc, #264]	; (8000940 <switchState+0x1dc>)
 8000838:	f002 fe22 	bl	8003480 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800083c:	2200      	movs	r2, #0
 800083e:	4941      	ldr	r1, [pc, #260]	; (8000944 <switchState+0x1e0>)
 8000840:	483f      	ldr	r0, [pc, #252]	; (8000940 <switchState+0x1dc>)
 8000842:	f002 ff15 	bl	8003670 <HAL_RTC_SetDate>
            currentState = SET_MINUTES; // After setting hours, set minutes
 8000846:	4b39      	ldr	r3, [pc, #228]	; (800092c <switchState+0x1c8>)
 8000848:	2204      	movs	r2, #4
 800084a:	701a      	strb	r2, [r3, #0]
            break;
 800084c:	e06c      	b.n	8000928 <switchState+0x1c4>
        case SET_MINUTES:
        	counter = sDate.Month * sensitivity;
 800084e:	4b3d      	ldr	r3, [pc, #244]	; (8000944 <switchState+0x1e0>)
 8000850:	785b      	ldrb	r3, [r3, #1]
 8000852:	461a      	mov	r2, r3
 8000854:	4b37      	ldr	r3, [pc, #220]	; (8000934 <switchState+0x1d0>)
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	461a      	mov	r2, r3
 800085e:	4b34      	ldr	r3, [pc, #208]	; (8000930 <switchState+0x1cc>)
 8000860:	601a      	str	r2, [r3, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000862:	2200      	movs	r2, #0
 8000864:	4934      	ldr	r1, [pc, #208]	; (8000938 <switchState+0x1d4>)
 8000866:	4836      	ldr	r0, [pc, #216]	; (8000940 <switchState+0x1dc>)
 8000868:	f002 fe0a 	bl	8003480 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800086c:	2200      	movs	r2, #0
 800086e:	4935      	ldr	r1, [pc, #212]	; (8000944 <switchState+0x1e0>)
 8000870:	4833      	ldr	r0, [pc, #204]	; (8000940 <switchState+0x1dc>)
 8000872:	f002 fefd 	bl	8003670 <HAL_RTC_SetDate>
            currentState = SET_MONTH; // Return to SLEEP after setting time
 8000876:	4b2d      	ldr	r3, [pc, #180]	; (800092c <switchState+0x1c8>)
 8000878:	2207      	movs	r2, #7
 800087a:	701a      	strb	r2, [r3, #0]
            break;
 800087c:	e054      	b.n	8000928 <switchState+0x1c4>
        case SET_MONTH:
        	counter = sDate.Date * sensitivity;
 800087e:	4b31      	ldr	r3, [pc, #196]	; (8000944 <switchState+0x1e0>)
 8000880:	789b      	ldrb	r3, [r3, #2]
 8000882:	461a      	mov	r2, r3
 8000884:	4b2b      	ldr	r3, [pc, #172]	; (8000934 <switchState+0x1d0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	fb02 f303 	mul.w	r3, r2, r3
 800088c:	461a      	mov	r2, r3
 800088e:	4b28      	ldr	r3, [pc, #160]	; (8000930 <switchState+0x1cc>)
 8000890:	601a      	str	r2, [r3, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000892:	2200      	movs	r2, #0
 8000894:	4928      	ldr	r1, [pc, #160]	; (8000938 <switchState+0x1d4>)
 8000896:	482a      	ldr	r0, [pc, #168]	; (8000940 <switchState+0x1dc>)
 8000898:	f002 fdf2 	bl	8003480 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 800089c:	2200      	movs	r2, #0
 800089e:	4929      	ldr	r1, [pc, #164]	; (8000944 <switchState+0x1e0>)
 80008a0:	4827      	ldr	r0, [pc, #156]	; (8000940 <switchState+0x1dc>)
 80008a2:	f002 fee5 	bl	8003670 <HAL_RTC_SetDate>
        	currentState = SET_DAY;
 80008a6:	4b21      	ldr	r3, [pc, #132]	; (800092c <switchState+0x1c8>)
 80008a8:	2208      	movs	r2, #8
 80008aa:	701a      	strb	r2, [r3, #0]
        	break;
 80008ac:	e03c      	b.n	8000928 <switchState+0x1c4>
        case SET_DAY:
        	counter = sDate.Year * sensitivity;
 80008ae:	4b25      	ldr	r3, [pc, #148]	; (8000944 <switchState+0x1e0>)
 80008b0:	78db      	ldrb	r3, [r3, #3]
 80008b2:	461a      	mov	r2, r3
 80008b4:	4b1f      	ldr	r3, [pc, #124]	; (8000934 <switchState+0x1d0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	fb02 f303 	mul.w	r3, r2, r3
 80008bc:	461a      	mov	r2, r3
 80008be:	4b1c      	ldr	r3, [pc, #112]	; (8000930 <switchState+0x1cc>)
 80008c0:	601a      	str	r2, [r3, #0]
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008c2:	2200      	movs	r2, #0
 80008c4:	491c      	ldr	r1, [pc, #112]	; (8000938 <switchState+0x1d4>)
 80008c6:	481e      	ldr	r0, [pc, #120]	; (8000940 <switchState+0x1dc>)
 80008c8:	f002 fdda 	bl	8003480 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008cc:	2200      	movs	r2, #0
 80008ce:	491d      	ldr	r1, [pc, #116]	; (8000944 <switchState+0x1e0>)
 80008d0:	481b      	ldr	r0, [pc, #108]	; (8000940 <switchState+0x1dc>)
 80008d2:	f002 fecd 	bl	8003670 <HAL_RTC_SetDate>
        	currentState = SET_YEAR;
 80008d6:	4b15      	ldr	r3, [pc, #84]	; (800092c <switchState+0x1c8>)
 80008d8:	2209      	movs	r2, #9
 80008da:	701a      	strb	r2, [r3, #0]
        	break;
 80008dc:	e024      	b.n	8000928 <switchState+0x1c4>
        case SET_YEAR:
        	HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80008de:	2200      	movs	r2, #0
 80008e0:	4915      	ldr	r1, [pc, #84]	; (8000938 <switchState+0x1d4>)
 80008e2:	4817      	ldr	r0, [pc, #92]	; (8000940 <switchState+0x1dc>)
 80008e4:	f002 fdcc 	bl	8003480 <HAL_RTC_SetTime>
        	HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80008e8:	2200      	movs	r2, #0
 80008ea:	4916      	ldr	r1, [pc, #88]	; (8000944 <switchState+0x1e0>)
 80008ec:	4814      	ldr	r0, [pc, #80]	; (8000940 <switchState+0x1dc>)
 80008ee:	f002 febf 	bl	8003670 <HAL_RTC_SetDate>
        	currentState = SLEEP;
 80008f2:	4b0e      	ldr	r3, [pc, #56]	; (800092c <switchState+0x1c8>)
 80008f4:	2200      	movs	r2, #0
 80008f6:	701a      	strb	r2, [r3, #0]
        	break;
 80008f8:	e016      	b.n	8000928 <switchState+0x1c4>
        case SET_COLOR:
        	counter = brightness * sensitivity;
 80008fa:	4b13      	ldr	r3, [pc, #76]	; (8000948 <switchState+0x1e4>)
 80008fc:	881b      	ldrh	r3, [r3, #0]
 80008fe:	b29b      	uxth	r3, r3
 8000900:	461a      	mov	r2, r3
 8000902:	4b0c      	ldr	r3, [pc, #48]	; (8000934 <switchState+0x1d0>)
 8000904:	681b      	ldr	r3, [r3, #0]
 8000906:	fb02 f303 	mul.w	r3, r2, r3
 800090a:	461a      	mov	r2, r3
 800090c:	4b08      	ldr	r3, [pc, #32]	; (8000930 <switchState+0x1cc>)
 800090e:	601a      	str	r2, [r3, #0]
            currentState = SET_BRIGHTNESS; // After color, set brightness
 8000910:	4b06      	ldr	r3, [pc, #24]	; (800092c <switchState+0x1c8>)
 8000912:	2206      	movs	r2, #6
 8000914:	701a      	strb	r2, [r3, #0]
            break;
 8000916:	e007      	b.n	8000928 <switchState+0x1c4>
        case SET_BRIGHTNESS:
            currentState = SLEEP; // Return to SLEEP after setting LED features
 8000918:	4b04      	ldr	r3, [pc, #16]	; (800092c <switchState+0x1c8>)
 800091a:	2200      	movs	r2, #0
 800091c:	701a      	strb	r2, [r3, #0]
            break;
 800091e:	e003      	b.n	8000928 <switchState+0x1c4>
        default:
            // If state is somehow unhandled, default back to SLEEP as a failsafe
            currentState = SLEEP;
 8000920:	4b02      	ldr	r3, [pc, #8]	; (800092c <switchState+0x1c8>)
 8000922:	2200      	movs	r2, #0
 8000924:	701a      	strb	r2, [r3, #0]
            break;
 8000926:	bf00      	nop
    }
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	200001ca 	.word	0x200001ca
 8000930:	200001ac 	.word	0x200001ac
 8000934:	20000004 	.word	0x20000004
 8000938:	200001b0 	.word	0x200001b0
 800093c:	200001c8 	.word	0x200001c8
 8000940:	2000009c 	.word	0x2000009c
 8000944:	200001c4 	.word	0x200001c4
 8000948:	20000000 	.word	0x20000000

0800094c <checkButtonPress>:

void checkButtonPress(void) {
 800094c:	b580      	push	{r7, lr}
 800094e:	b082      	sub	sp, #8
 8000950:	af00      	add	r7, sp, #0
    static GPIO_PinState lastButtonState = GPIO_PIN_SET; // Assume button is initially not pressed (HIGH due to pull-up).
    GPIO_PinState currentButtonState;

    // Read the current state of the button GPIO pin.
    currentButtonState = HAL_GPIO_ReadPin(GPIOB, BUTTON_Pin);
 8000952:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000956:	480a      	ldr	r0, [pc, #40]	; (8000980 <checkButtonPress+0x34>)
 8000958:	f001 ffd6 	bl	8002908 <HAL_GPIO_ReadPin>
 800095c:	4603      	mov	r3, r0
 800095e:	71fb      	strb	r3, [r7, #7]

    // Check if button state has transitioned from HIGH to LOW.
    if (lastButtonState == GPIO_PIN_SET && currentButtonState == GPIO_PIN_RESET) {
 8000960:	4b08      	ldr	r3, [pc, #32]	; (8000984 <checkButtonPress+0x38>)
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	2b01      	cmp	r3, #1
 8000966:	d104      	bne.n	8000972 <checkButtonPress+0x26>
 8000968:	79fb      	ldrb	r3, [r7, #7]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d101      	bne.n	8000972 <checkButtonPress+0x26>
        // Button was pressed - perform actions here.
        switchState(); // Call the state switch function only on the transition.
 800096e:	f7ff fef9 	bl	8000764 <switchState>
    }

    // Update the last button state.
    lastButtonState = currentButtonState;
 8000972:	4a04      	ldr	r2, [pc, #16]	; (8000984 <checkButtonPress+0x38>)
 8000974:	79fb      	ldrb	r3, [r7, #7]
 8000976:	7013      	strb	r3, [r2, #0]
}
 8000978:	bf00      	nop
 800097a:	3708      	adds	r7, #8
 800097c:	46bd      	mov	sp, r7
 800097e:	bd80      	pop	{r7, pc}
 8000980:	40020400 	.word	0x40020400
 8000984:	2000000f 	.word	0x2000000f

08000988 <SetHours>:




void SetHours() {
 8000988:	b580      	push	{r7, lr}
 800098a:	b082      	sub	sp, #8
 800098c:	af02      	add	r7, sp, #8
    Set_LED(136, 100, 100, 100);
 800098e:	2364      	movs	r3, #100	; 0x64
 8000990:	2264      	movs	r2, #100	; 0x64
 8000992:	2164      	movs	r1, #100	; 0x64
 8000994:	2088      	movs	r0, #136	; 0x88
 8000996:	f004 f8f7 	bl	8004b88 <Set_LED>
    counter = clampValue(counter, 0, 23 * sensitivity); //23 hours
 800099a:	4b16      	ldr	r3, [pc, #88]	; (80009f4 <SetHours+0x6c>)
 800099c:	681b      	ldr	r3, [r3, #0]
 800099e:	b298      	uxth	r0, r3
 80009a0:	4b15      	ldr	r3, [pc, #84]	; (80009f8 <SetHours+0x70>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	b29b      	uxth	r3, r3
 80009a6:	461a      	mov	r2, r3
 80009a8:	0052      	lsls	r2, r2, #1
 80009aa:	441a      	add	r2, r3
 80009ac:	00d2      	lsls	r2, r2, #3
 80009ae:	1ad3      	subs	r3, r2, r3
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	461a      	mov	r2, r3
 80009b4:	2100      	movs	r1, #0
 80009b6:	f7ff fea7 	bl	8000708 <clampValue>
 80009ba:	4603      	mov	r3, r0
 80009bc:	461a      	mov	r2, r3
 80009be:	4b0d      	ldr	r3, [pc, #52]	; (80009f4 <SetHours+0x6c>)
 80009c0:	601a      	str	r2, [r3, #0]
    sTime.Hours = counter / sensitivity;
 80009c2:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <SetHours+0x6c>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a0c      	ldr	r2, [pc, #48]	; (80009f8 <SetHours+0x70>)
 80009c8:	6812      	ldr	r2, [r2, #0]
 80009ca:	fbb3 f3f2 	udiv	r3, r3, r2
 80009ce:	b2da      	uxtb	r2, r3
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <SetHours+0x74>)
 80009d2:	701a      	strb	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 80009d4:	4b09      	ldr	r3, [pc, #36]	; (80009fc <SetHours+0x74>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	461a      	mov	r2, r3
 80009da:	4b08      	ldr	r3, [pc, #32]	; (80009fc <SetHours+0x74>)
 80009dc:	785b      	ldrb	r3, [r3, #1]
 80009de:	9300      	str	r3, [sp, #0]
 80009e0:	4613      	mov	r3, r2
 80009e2:	4a07      	ldr	r2, [pc, #28]	; (8000a00 <SetHours+0x78>)
 80009e4:	2180      	movs	r1, #128	; 0x80
 80009e6:	4807      	ldr	r0, [pc, #28]	; (8000a04 <SetHours+0x7c>)
 80009e8:	f004 f97e 	bl	8004ce8 <sniprintf>
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	200001ac 	.word	0x200001ac
 80009f8:	20000004 	.word	0x20000004
 80009fc:	200001b0 	.word	0x200001b0
 8000a00:	08005604 	.word	0x08005604
 8000a04:	200001cc 	.word	0x200001cc

08000a08 <SetMinutes>:

void SetMinutes() {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af02      	add	r7, sp, #8
    counter = clampValue(counter, 0, 59 * sensitivity); //59 minutes
 8000a0e:	4b16      	ldr	r3, [pc, #88]	; (8000a68 <SetMinutes+0x60>)
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	b298      	uxth	r0, r3
 8000a14:	4b15      	ldr	r3, [pc, #84]	; (8000a6c <SetMinutes+0x64>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	b29b      	uxth	r3, r3
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	0112      	lsls	r2, r2, #4
 8000a1e:	1ad2      	subs	r2, r2, r3
 8000a20:	0092      	lsls	r2, r2, #2
 8000a22:	1ad3      	subs	r3, r2, r3
 8000a24:	b29b      	uxth	r3, r3
 8000a26:	461a      	mov	r2, r3
 8000a28:	2100      	movs	r1, #0
 8000a2a:	f7ff fe6d 	bl	8000708 <clampValue>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	461a      	mov	r2, r3
 8000a32:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <SetMinutes+0x60>)
 8000a34:	601a      	str	r2, [r3, #0]
    sTime.Minutes = counter / sensitivity;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <SetMinutes+0x60>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	; (8000a6c <SetMinutes+0x64>)
 8000a3c:	6812      	ldr	r2, [r2, #0]
 8000a3e:	fbb3 f3f2 	udiv	r3, r3, r2
 8000a42:	b2da      	uxtb	r2, r3
 8000a44:	4b0a      	ldr	r3, [pc, #40]	; (8000a70 <SetMinutes+0x68>)
 8000a46:	705a      	strb	r2, [r3, #1]
    snprintf(displayStr, sizeof(displayStr), "%02u:%02u", sTime.Hours, sTime.Minutes);
 8000a48:	4b09      	ldr	r3, [pc, #36]	; (8000a70 <SetMinutes+0x68>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	461a      	mov	r2, r3
 8000a4e:	4b08      	ldr	r3, [pc, #32]	; (8000a70 <SetMinutes+0x68>)
 8000a50:	785b      	ldrb	r3, [r3, #1]
 8000a52:	9300      	str	r3, [sp, #0]
 8000a54:	4613      	mov	r3, r2
 8000a56:	4a07      	ldr	r2, [pc, #28]	; (8000a74 <SetMinutes+0x6c>)
 8000a58:	2180      	movs	r1, #128	; 0x80
 8000a5a:	4807      	ldr	r0, [pc, #28]	; (8000a78 <SetMinutes+0x70>)
 8000a5c:	f004 f944 	bl	8004ce8 <sniprintf>
}
 8000a60:	bf00      	nop
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	200001ac 	.word	0x200001ac
 8000a6c:	20000004 	.word	0x20000004
 8000a70:	200001b0 	.word	0x200001b0
 8000a74:	08005604 	.word	0x08005604
 8000a78:	200001cc 	.word	0x200001cc

08000a7c <SetMonth>:

int SetMonth() {
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af02      	add	r7, sp, #8
    counter = clampValue(counter, 0, 12 * sensitivity); //12 months
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <SetMonth+0x68>)
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	b298      	uxth	r0, r3
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <SetMonth+0x6c>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	b29b      	uxth	r3, r3
 8000a8e:	461a      	mov	r2, r3
 8000a90:	0052      	lsls	r2, r2, #1
 8000a92:	4413      	add	r3, r2
 8000a94:	009b      	lsls	r3, r3, #2
 8000a96:	b29b      	uxth	r3, r3
 8000a98:	461a      	mov	r2, r3
 8000a9a:	2100      	movs	r1, #0
 8000a9c:	f7ff fe34 	bl	8000708 <clampValue>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	461a      	mov	r2, r3
 8000aa4:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <SetMonth+0x68>)
 8000aa6:	601a      	str	r2, [r3, #0]
    sDate.Month = counter / sensitivity;
 8000aa8:	4b0e      	ldr	r3, [pc, #56]	; (8000ae4 <SetMonth+0x68>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <SetMonth+0x6c>)
 8000aae:	6812      	ldr	r2, [r2, #0]
 8000ab0:	fbb3 f3f2 	udiv	r3, r3, r2
 8000ab4:	b2da      	uxtb	r2, r3
 8000ab6:	4b0d      	ldr	r3, [pc, #52]	; (8000aec <SetMonth+0x70>)
 8000ab8:	705a      	strb	r2, [r3, #1]
    snprintf(displayStr, sizeof(displayStr), "%02u%02u", sDate.Month, sDate.Date);
 8000aba:	4b0c      	ldr	r3, [pc, #48]	; (8000aec <SetMonth+0x70>)
 8000abc:	785b      	ldrb	r3, [r3, #1]
 8000abe:	461a      	mov	r2, r3
 8000ac0:	4b0a      	ldr	r3, [pc, #40]	; (8000aec <SetMonth+0x70>)
 8000ac2:	789b      	ldrb	r3, [r3, #2]
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	4613      	mov	r3, r2
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <SetMonth+0x74>)
 8000aca:	2180      	movs	r1, #128	; 0x80
 8000acc:	4809      	ldr	r0, [pc, #36]	; (8000af4 <SetMonth+0x78>)
 8000ace:	f004 f90b 	bl	8004ce8 <sniprintf>
    return counter / sensitivity;
 8000ad2:	4b04      	ldr	r3, [pc, #16]	; (8000ae4 <SetMonth+0x68>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4a04      	ldr	r2, [pc, #16]	; (8000ae8 <SetMonth+0x6c>)
 8000ad8:	6812      	ldr	r2, [r2, #0]
 8000ada:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000ade:	4618      	mov	r0, r3
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}
 8000ae4:	200001ac 	.word	0x200001ac
 8000ae8:	20000004 	.word	0x20000004
 8000aec:	200001c4 	.word	0x200001c4
 8000af0:	08005610 	.word	0x08005610
 8000af4:	200001cc 	.word	0x200001cc

08000af8 <SetDay>:

int SetDay() {
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b082      	sub	sp, #8
 8000afc:	af02      	add	r7, sp, #8
    counter = clampValue(counter, 0, 31 * sensitivity); //31 days
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <SetDay+0x68>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	b29b      	uxth	r3, r3
 8000b04:	4a17      	ldr	r2, [pc, #92]	; (8000b64 <SetDay+0x6c>)
 8000b06:	6812      	ldr	r2, [r2, #0]
 8000b08:	b292      	uxth	r2, r2
 8000b0a:	4611      	mov	r1, r2
 8000b0c:	0149      	lsls	r1, r1, #5
 8000b0e:	1a8a      	subs	r2, r1, r2
 8000b10:	b292      	uxth	r2, r2
 8000b12:	2100      	movs	r1, #0
 8000b14:	4618      	mov	r0, r3
 8000b16:	f7ff fdf7 	bl	8000708 <clampValue>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	461a      	mov	r2, r3
 8000b1e:	4b10      	ldr	r3, [pc, #64]	; (8000b60 <SetDay+0x68>)
 8000b20:	601a      	str	r2, [r3, #0]
    //FIXME: user could enter February 31 which is wrong
    sDate.Date = counter / sensitivity;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <SetDay+0x68>)
 8000b24:	681b      	ldr	r3, [r3, #0]
 8000b26:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <SetDay+0x6c>)
 8000b28:	6812      	ldr	r2, [r2, #0]
 8000b2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000b2e:	b2da      	uxtb	r2, r3
 8000b30:	4b0d      	ldr	r3, [pc, #52]	; (8000b68 <SetDay+0x70>)
 8000b32:	709a      	strb	r2, [r3, #2]
    snprintf(displayStr, sizeof(displayStr), "%02u%02u", sDate.Month, sDate.Date);
 8000b34:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <SetDay+0x70>)
 8000b36:	785b      	ldrb	r3, [r3, #1]
 8000b38:	461a      	mov	r2, r3
 8000b3a:	4b0b      	ldr	r3, [pc, #44]	; (8000b68 <SetDay+0x70>)
 8000b3c:	789b      	ldrb	r3, [r3, #2]
 8000b3e:	9300      	str	r3, [sp, #0]
 8000b40:	4613      	mov	r3, r2
 8000b42:	4a0a      	ldr	r2, [pc, #40]	; (8000b6c <SetDay+0x74>)
 8000b44:	2180      	movs	r1, #128	; 0x80
 8000b46:	480a      	ldr	r0, [pc, #40]	; (8000b70 <SetDay+0x78>)
 8000b48:	f004 f8ce 	bl	8004ce8 <sniprintf>
    return counter / sensitivity;
 8000b4c:	4b04      	ldr	r3, [pc, #16]	; (8000b60 <SetDay+0x68>)
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	4a04      	ldr	r2, [pc, #16]	; (8000b64 <SetDay+0x6c>)
 8000b52:	6812      	ldr	r2, [r2, #0]
 8000b54:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000b58:	4618      	mov	r0, r3
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	200001ac 	.word	0x200001ac
 8000b64:	20000004 	.word	0x20000004
 8000b68:	200001c4 	.word	0x200001c4
 8000b6c:	08005610 	.word	0x08005610
 8000b70:	200001cc 	.word	0x200001cc

08000b74 <SetYear>:

int SetYear() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 3000 * sensitivity); //12 months
 8000b78:	4b19      	ldr	r3, [pc, #100]	; (8000be0 <SetYear+0x6c>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	b298      	uxth	r0, r3
 8000b7e:	4b19      	ldr	r3, [pc, #100]	; (8000be4 <SetYear+0x70>)
 8000b80:	681b      	ldr	r3, [r3, #0]
 8000b82:	b29b      	uxth	r3, r3
 8000b84:	461a      	mov	r2, r3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4413      	add	r3, r2
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	0091      	lsls	r1, r2, #2
 8000b8e:	461a      	mov	r2, r3
 8000b90:	460b      	mov	r3, r1
 8000b92:	4413      	add	r3, r2
 8000b94:	461a      	mov	r2, r3
 8000b96:	0112      	lsls	r2, r2, #4
 8000b98:	1ad3      	subs	r3, r2, r3
 8000b9a:	00db      	lsls	r3, r3, #3
 8000b9c:	b29b      	uxth	r3, r3
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	2100      	movs	r1, #0
 8000ba2:	f7ff fdb1 	bl	8000708 <clampValue>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	461a      	mov	r2, r3
 8000baa:	4b0d      	ldr	r3, [pc, #52]	; (8000be0 <SetYear+0x6c>)
 8000bac:	601a      	str	r2, [r3, #0]
    sDate.Year = counter / sensitivity;
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <SetYear+0x6c>)
 8000bb0:	681b      	ldr	r3, [r3, #0]
 8000bb2:	4a0c      	ldr	r2, [pc, #48]	; (8000be4 <SetYear+0x70>)
 8000bb4:	6812      	ldr	r2, [r2, #0]
 8000bb6:	fbb3 f3f2 	udiv	r3, r3, r2
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <SetYear+0x74>)
 8000bbe:	70da      	strb	r2, [r3, #3]
    snprintf(displayStr, sizeof(displayStr), "%04u", sDate.Year);
 8000bc0:	4b09      	ldr	r3, [pc, #36]	; (8000be8 <SetYear+0x74>)
 8000bc2:	78db      	ldrb	r3, [r3, #3]
 8000bc4:	4a09      	ldr	r2, [pc, #36]	; (8000bec <SetYear+0x78>)
 8000bc6:	2180      	movs	r1, #128	; 0x80
 8000bc8:	4809      	ldr	r0, [pc, #36]	; (8000bf0 <SetYear+0x7c>)
 8000bca:	f004 f88d 	bl	8004ce8 <sniprintf>
    return counter / sensitivity;
 8000bce:	4b04      	ldr	r3, [pc, #16]	; (8000be0 <SetYear+0x6c>)
 8000bd0:	681b      	ldr	r3, [r3, #0]
 8000bd2:	4a04      	ldr	r2, [pc, #16]	; (8000be4 <SetYear+0x70>)
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	fbb3 f3f2 	udiv	r3, r3, r2
}
 8000bda:	4618      	mov	r0, r3
 8000bdc:	bd80      	pop	{r7, pc}
 8000bde:	bf00      	nop
 8000be0:	200001ac 	.word	0x200001ac
 8000be4:	20000004 	.word	0x20000004
 8000be8:	200001c4 	.word	0x200001c4
 8000bec:	0800561c 	.word	0x0800561c
 8000bf0:	200001cc 	.word	0x200001cc

08000bf4 <SetColor>:

void SetColor() {
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 0, 16 * sensitivity); //16 color presets
 8000bf8:	4b1d      	ldr	r3, [pc, #116]	; (8000c70 <SetColor+0x7c>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	b298      	uxth	r0, r3
 8000bfe:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <SetColor+0x80>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	b29b      	uxth	r3, r3
 8000c04:	011b      	lsls	r3, r3, #4
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	461a      	mov	r2, r3
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	f7ff fd7c 	bl	8000708 <clampValue>
 8000c10:	4603      	mov	r3, r0
 8000c12:	461a      	mov	r2, r3
 8000c14:	4b16      	ldr	r3, [pc, #88]	; (8000c70 <SetColor+0x7c>)
 8000c16:	601a      	str	r2, [r3, #0]
    color = counter / sensitivity;
 8000c18:	4b15      	ldr	r3, [pc, #84]	; (8000c70 <SetColor+0x7c>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a15      	ldr	r2, [pc, #84]	; (8000c74 <SetColor+0x80>)
 8000c1e:	6812      	ldr	r2, [r2, #0]
 8000c20:	fbb3 f3f2 	udiv	r3, r3, r2
 8000c24:	b29a      	uxth	r2, r3
 8000c26:	4b14      	ldr	r3, [pc, #80]	; (8000c78 <SetColor+0x84>)
 8000c28:	801a      	strh	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%04u", color);
 8000c2a:	4b13      	ldr	r3, [pc, #76]	; (8000c78 <SetColor+0x84>)
 8000c2c:	881b      	ldrh	r3, [r3, #0]
 8000c2e:	b29b      	uxth	r3, r3
 8000c30:	4a12      	ldr	r2, [pc, #72]	; (8000c7c <SetColor+0x88>)
 8000c32:	2180      	movs	r1, #128	; 0x80
 8000c34:	4812      	ldr	r0, [pc, #72]	; (8000c80 <SetColor+0x8c>)
 8000c36:	f004 f857 	bl	8004ce8 <sniprintf>
    Set_LED_Hex(136, getRainbowColor(color));
 8000c3a:	4b0f      	ldr	r3, [pc, #60]	; (8000c78 <SetColor+0x84>)
 8000c3c:	881b      	ldrh	r3, [r3, #0]
 8000c3e:	b29b      	uxth	r3, r3
 8000c40:	b2db      	uxtb	r3, r3
 8000c42:	4618      	mov	r0, r3
 8000c44:	f7ff fca6 	bl	8000594 <getRainbowColor>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	2088      	movs	r0, #136	; 0x88
 8000c4e:	f003 ffd1 	bl	8004bf4 <Set_LED_Hex>
    Set_LED_Hex(140, getRainbowColor(color));
 8000c52:	4b09      	ldr	r3, [pc, #36]	; (8000c78 <SetColor+0x84>)
 8000c54:	881b      	ldrh	r3, [r3, #0]
 8000c56:	b29b      	uxth	r3, r3
 8000c58:	b2db      	uxtb	r3, r3
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	f7ff fc9a 	bl	8000594 <getRainbowColor>
 8000c60:	4603      	mov	r3, r0
 8000c62:	4619      	mov	r1, r3
 8000c64:	208c      	movs	r0, #140	; 0x8c
 8000c66:	f003 ffc5 	bl	8004bf4 <Set_LED_Hex>
}
 8000c6a:	bf00      	nop
 8000c6c:	bd80      	pop	{r7, pc}
 8000c6e:	bf00      	nop
 8000c70:	200001ac 	.word	0x200001ac
 8000c74:	20000004 	.word	0x20000004
 8000c78:	200001c8 	.word	0x200001c8
 8000c7c:	0800561c 	.word	0x0800561c
 8000c80:	200001cc 	.word	0x200001cc

08000c84 <SetBrightness>:


void SetBrightness() {
 8000c84:	b580      	push	{r7, lr}
 8000c86:	af00      	add	r7, sp, #0
    counter = clampValue(counter, 1, 100 * (sensitivity / 2)); //1-100% brightness
 8000c88:	4b18      	ldr	r3, [pc, #96]	; (8000cec <SetBrightness+0x68>)
 8000c8a:	681b      	ldr	r3, [r3, #0]
 8000c8c:	b298      	uxth	r0, r3
 8000c8e:	4b18      	ldr	r3, [pc, #96]	; (8000cf0 <SetBrightness+0x6c>)
 8000c90:	681b      	ldr	r3, [r3, #0]
 8000c92:	0fda      	lsrs	r2, r3, #31
 8000c94:	4413      	add	r3, r2
 8000c96:	105b      	asrs	r3, r3, #1
 8000c98:	b29b      	uxth	r3, r3
 8000c9a:	461a      	mov	r2, r3
 8000c9c:	0092      	lsls	r2, r2, #2
 8000c9e:	4413      	add	r3, r2
 8000ca0:	461a      	mov	r2, r3
 8000ca2:	0091      	lsls	r1, r2, #2
 8000ca4:	461a      	mov	r2, r3
 8000ca6:	460b      	mov	r3, r1
 8000ca8:	4413      	add	r3, r2
 8000caa:	009b      	lsls	r3, r3, #2
 8000cac:	b29b      	uxth	r3, r3
 8000cae:	461a      	mov	r2, r3
 8000cb0:	2101      	movs	r1, #1
 8000cb2:	f7ff fd29 	bl	8000708 <clampValue>
 8000cb6:	4603      	mov	r3, r0
 8000cb8:	461a      	mov	r2, r3
 8000cba:	4b0c      	ldr	r3, [pc, #48]	; (8000cec <SetBrightness+0x68>)
 8000cbc:	601a      	str	r2, [r3, #0]
    brightness = counter / (sensitivity / 2);
 8000cbe:	4b0b      	ldr	r3, [pc, #44]	; (8000cec <SetBrightness+0x68>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4b0b      	ldr	r3, [pc, #44]	; (8000cf0 <SetBrightness+0x6c>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	0fd9      	lsrs	r1, r3, #31
 8000cc8:	440b      	add	r3, r1
 8000cca:	105b      	asrs	r3, r3, #1
 8000ccc:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cd0:	b29a      	uxth	r2, r3
 8000cd2:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <SetBrightness+0x70>)
 8000cd4:	801a      	strh	r2, [r3, #0]
    snprintf(displayStr, sizeof(displayStr), "%04u", brightness);
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <SetBrightness+0x70>)
 8000cd8:	881b      	ldrh	r3, [r3, #0]
 8000cda:	b29b      	uxth	r3, r3
 8000cdc:	4a06      	ldr	r2, [pc, #24]	; (8000cf8 <SetBrightness+0x74>)
 8000cde:	2180      	movs	r1, #128	; 0x80
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <SetBrightness+0x78>)
 8000ce2:	f004 f801 	bl	8004ce8 <sniprintf>
}
 8000ce6:	bf00      	nop
 8000ce8:	bd80      	pop	{r7, pc}
 8000cea:	bf00      	nop
 8000cec:	200001ac 	.word	0x200001ac
 8000cf0:	20000004 	.word	0x20000004
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	0800561c 	.word	0x0800561c
 8000cfc:	200001cc 	.word	0x200001cc

08000d00 <Select>:

void Select() {
 8000d00:	b598      	push	{r3, r4, r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 3 * sensitivity);
 8000d04:	4b23      	ldr	r3, [pc, #140]	; (8000d94 <Select+0x94>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	b29b      	uxth	r3, r3
 8000d0a:	4a23      	ldr	r2, [pc, #140]	; (8000d98 <Select+0x98>)
 8000d0c:	6812      	ldr	r2, [r2, #0]
 8000d0e:	b292      	uxth	r2, r2
 8000d10:	4611      	mov	r1, r2
 8000d12:	0049      	lsls	r1, r1, #1
 8000d14:	440a      	add	r2, r1
 8000d16:	b292      	uxth	r2, r2
 8000d18:	2100      	movs	r1, #0
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	f7ff fcf4 	bl	8000708 <clampValue>
 8000d20:	4603      	mov	r3, r0
 8000d22:	461a      	mov	r2, r3
 8000d24:	4b1b      	ldr	r3, [pc, #108]	; (8000d94 <Select+0x94>)
 8000d26:	601a      	str	r2, [r3, #0]
	Set_LED_Hex(LED_SET + (!isSet), getRainbowColor(color));
 8000d28:	4b1c      	ldr	r3, [pc, #112]	; (8000d9c <Select+0x9c>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	f083 0301 	eor.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	f103 0488 	add.w	r4, r3, #136	; 0x88
 8000d36:	4b1a      	ldr	r3, [pc, #104]	; (8000da0 <Select+0xa0>)
 8000d38:	881b      	ldrh	r3, [r3, #0]
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	b2db      	uxtb	r3, r3
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fc28 	bl	8000594 <getRainbowColor>
 8000d44:	4603      	mov	r3, r0
 8000d46:	4619      	mov	r1, r3
 8000d48:	4620      	mov	r0, r4
 8000d4a:	f003 ff53 	bl	8004bf4 <Set_LED_Hex>
	Blink_LED(LED_SET_TIME - (counter/sensitivity), getRainbowColor(color));
 8000d4e:	4b11      	ldr	r3, [pc, #68]	; (8000d94 <Select+0x94>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	4a11      	ldr	r2, [pc, #68]	; (8000d98 <Select+0x98>)
 8000d54:	6812      	ldr	r2, [r2, #0]
 8000d56:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d5a:	b29b      	uxth	r3, r3
 8000d5c:	f1c3 038d 	rsb	r3, r3, #141	; 0x8d
 8000d60:	b29c      	uxth	r4, r3
 8000d62:	4b0f      	ldr	r3, [pc, #60]	; (8000da0 <Select+0xa0>)
 8000d64:	881b      	ldrh	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f7ff fc12 	bl	8000594 <getRainbowColor>
 8000d70:	4603      	mov	r3, r0
 8000d72:	4619      	mov	r1, r3
 8000d74:	4620      	mov	r0, r4
 8000d76:	f7ff fc77 	bl	8000668 <Blink_LED>
	snprintf(displayStr, sizeof(displayStr), "%04u", counter/sensitivity);
 8000d7a:	4b06      	ldr	r3, [pc, #24]	; (8000d94 <Select+0x94>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	4a06      	ldr	r2, [pc, #24]	; (8000d98 <Select+0x98>)
 8000d80:	6812      	ldr	r2, [r2, #0]
 8000d82:	fbb3 f3f2 	udiv	r3, r3, r2
 8000d86:	4a07      	ldr	r2, [pc, #28]	; (8000da4 <Select+0xa4>)
 8000d88:	2180      	movs	r1, #128	; 0x80
 8000d8a:	4807      	ldr	r0, [pc, #28]	; (8000da8 <Select+0xa8>)
 8000d8c:	f003 ffac 	bl	8004ce8 <sniprintf>
}
 8000d90:	bf00      	nop
 8000d92:	bd98      	pop	{r3, r4, r7, pc}
 8000d94:	200001ac 	.word	0x200001ac
 8000d98:	20000004 	.word	0x20000004
 8000d9c:	2000000d 	.word	0x2000000d
 8000da0:	200001c8 	.word	0x200001c8
 8000da4:	0800561c 	.word	0x0800561c
 8000da8:	200001cc 	.word	0x200001cc

08000dac <Wake>:

void Wake() {
 8000dac:	b598      	push	{r3, r4, r7, lr}
 8000dae:	af00      	add	r7, sp, #0
	counter = clampValue(counter, 0, 1);
 8000db0:	4b17      	ldr	r3, [pc, #92]	; (8000e10 <Wake+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	b29b      	uxth	r3, r3
 8000db6:	2201      	movs	r2, #1
 8000db8:	2100      	movs	r1, #0
 8000dba:	4618      	mov	r0, r3
 8000dbc:	f7ff fca4 	bl	8000708 <clampValue>
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	461a      	mov	r2, r3
 8000dc4:	4b12      	ldr	r3, [pc, #72]	; (8000e10 <Wake+0x64>)
 8000dc6:	601a      	str	r2, [r3, #0]
	Blink_LED(LED_SET + counter, getRainbowColor(color));
 8000dc8:	4b11      	ldr	r3, [pc, #68]	; (8000e10 <Wake+0x64>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	b29b      	uxth	r3, r3
 8000dce:	3388      	adds	r3, #136	; 0x88
 8000dd0:	b29c      	uxth	r4, r3
 8000dd2:	4b10      	ldr	r3, [pc, #64]	; (8000e14 <Wake+0x68>)
 8000dd4:	881b      	ldrh	r3, [r3, #0]
 8000dd6:	b29b      	uxth	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fbda 	bl	8000594 <getRainbowColor>
 8000de0:	4603      	mov	r3, r0
 8000de2:	4619      	mov	r1, r3
 8000de4:	4620      	mov	r0, r4
 8000de6:	f7ff fc3f 	bl	8000668 <Blink_LED>
	snprintf(displayStr, sizeof(displayStr), "%04u", LED_SET + counter);
 8000dea:	4b09      	ldr	r3, [pc, #36]	; (8000e10 <Wake+0x64>)
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	3388      	adds	r3, #136	; 0x88
 8000df0:	4a09      	ldr	r2, [pc, #36]	; (8000e18 <Wake+0x6c>)
 8000df2:	2180      	movs	r1, #128	; 0x80
 8000df4:	4809      	ldr	r0, [pc, #36]	; (8000e1c <Wake+0x70>)
 8000df6:	f003 ff77 	bl	8004ce8 <sniprintf>

	//counter = 0 -> isSet
	//counter = 1 -> isNotSet
	isSet = !counter;
 8000dfa:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <Wake+0x64>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	2b00      	cmp	r3, #0
 8000e00:	bf0c      	ite	eq
 8000e02:	2301      	moveq	r3, #1
 8000e04:	2300      	movne	r3, #0
 8000e06:	b2da      	uxtb	r2, r3
 8000e08:	4b05      	ldr	r3, [pc, #20]	; (8000e20 <Wake+0x74>)
 8000e0a:	701a      	strb	r2, [r3, #0]
}
 8000e0c:	bf00      	nop
 8000e0e:	bd98      	pop	{r3, r4, r7, pc}
 8000e10:	200001ac 	.word	0x200001ac
 8000e14:	200001c8 	.word	0x200001c8
 8000e18:	0800561c 	.word	0x0800561c
 8000e1c:	200001cc 	.word	0x200001cc
 8000e20:	2000000d 	.word	0x2000000d

08000e24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e28:	f000 ff36 	bl	8001c98 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2c:	f000 f890 	bl	8000f50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e30:	f000 fa66 	bl	8001300 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e34:	f000 fa44 	bl	80012c0 <MX_DMA_Init>
  MX_TIM1_Init();
 8000e38:	f000 f94e 	bl	80010d8 <MX_TIM1_Init>
  MX_RTC_Init();
 8000e3c:	f000 f8f2 	bl	8001024 <MX_RTC_Init>
  MX_TIM3_Init();
 8000e40:	f000 f9ea 	bl	8001218 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL); // Start the encoder interface
 8000e44:	213c      	movs	r1, #60	; 0x3c
 8000e46:	4838      	ldr	r0, [pc, #224]	; (8000f28 <main+0x104>)
 8000e48:	f002 ffb6 	bl	8003db8 <HAL_TIM_Encoder_Start>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000e4c:	4b36      	ldr	r3, [pc, #216]	; (8000f28 <main+0x104>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e52:	4a36      	ldr	r2, [pc, #216]	; (8000f2c <main+0x108>)
 8000e54:	6013      	str	r3, [r2, #0]

	  checkButtonPress();
 8000e56:	f7ff fd79 	bl	800094c <checkButtonPress>
	  if(stateChangeRequest){
 8000e5a:	4b35      	ldr	r3, [pc, #212]	; (8000f30 <main+0x10c>)
 8000e5c:	781b      	ldrb	r3, [r3, #0]
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d010      	beq.n	8000e84 <main+0x60>
		  switchState();
 8000e62:	f7ff fc7f 	bl	8000764 <switchState>
		  stateChangeRequest = !stateChangeRequest;
 8000e66:	4b32      	ldr	r3, [pc, #200]	; (8000f30 <main+0x10c>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf14      	ite	ne
 8000e6e:	2301      	movne	r3, #1
 8000e70:	2300      	moveq	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	f083 0301 	eor.w	r3, r3, #1
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	f003 0301 	and.w	r3, r3, #1
 8000e7e:	b2da      	uxtb	r2, r3
 8000e80:	4b2b      	ldr	r3, [pc, #172]	; (8000f30 <main+0x10c>)
 8000e82:	701a      	strb	r2, [r3, #0]
	  }

	// get time and get date must both be called
	HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000e84:	2200      	movs	r2, #0
 8000e86:	492b      	ldr	r1, [pc, #172]	; (8000f34 <main+0x110>)
 8000e88:	482b      	ldr	r0, [pc, #172]	; (8000f38 <main+0x114>)
 8000e8a:	f002 fb93 	bl	80035b4 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	492a      	ldr	r1, [pc, #168]	; (8000f3c <main+0x118>)
 8000e92:	4829      	ldr	r0, [pc, #164]	; (8000f38 <main+0x114>)
 8000e94:	f002 fc70 	bl	8003778 <HAL_RTC_GetDate>


	switch(currentState) {
 8000e98:	4b29      	ldr	r3, [pc, #164]	; (8000f40 <main+0x11c>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	b2db      	uxtb	r3, r3
 8000e9e:	2b09      	cmp	r3, #9
 8000ea0:	d838      	bhi.n	8000f14 <main+0xf0>
 8000ea2:	a201      	add	r2, pc, #4	; (adr r2, 8000ea8 <main+0x84>)
 8000ea4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ea8:	08000ed1 	.word	0x08000ed1
 8000eac:	08000edf 	.word	0x08000edf
 8000eb0:	08000ee5 	.word	0x08000ee5
 8000eb4:	08000eeb 	.word	0x08000eeb
 8000eb8:	08000ef1 	.word	0x08000ef1
 8000ebc:	08000f09 	.word	0x08000f09
 8000ec0:	08000f0f 	.word	0x08000f0f
 8000ec4:	08000ef7 	.word	0x08000ef7
 8000ec8:	08000efd 	.word	0x08000efd
 8000ecc:	08000f03 	.word	0x08000f03
		case SLEEP:
			snprintf(displayStr, 4, "%s", "\0");
 8000ed0:	4b1c      	ldr	r3, [pc, #112]	; (8000f44 <main+0x120>)
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <main+0x124>)
 8000ed4:	2104      	movs	r1, #4
 8000ed6:	481d      	ldr	r0, [pc, #116]	; (8000f4c <main+0x128>)
 8000ed8:	f003 ff06 	bl	8004ce8 <sniprintf>
			break;
 8000edc:	e01a      	b.n	8000f14 <main+0xf0>
		case WAKE:
			Wake();
 8000ede:	f7ff ff65 	bl	8000dac <Wake>
			break;
 8000ee2:	e017      	b.n	8000f14 <main+0xf0>
		case SELECT:
			Select();
 8000ee4:	f7ff ff0c 	bl	8000d00 <Select>
			break;
 8000ee8:	e014      	b.n	8000f14 <main+0xf0>
		case SET_HOURS:
			SetHours();
 8000eea:	f7ff fd4d 	bl	8000988 <SetHours>
			break;
 8000eee:	e011      	b.n	8000f14 <main+0xf0>
		case SET_MINUTES:
			SetMinutes();
 8000ef0:	f7ff fd8a 	bl	8000a08 <SetMinutes>
			break;
 8000ef4:	e00e      	b.n	8000f14 <main+0xf0>
		case SET_MONTH:
			SetMonth();
 8000ef6:	f7ff fdc1 	bl	8000a7c <SetMonth>
			break;
 8000efa:	e00b      	b.n	8000f14 <main+0xf0>
		case SET_DAY:
			SetDay();
 8000efc:	f7ff fdfc 	bl	8000af8 <SetDay>
			break;
 8000f00:	e008      	b.n	8000f14 <main+0xf0>
		case SET_YEAR:
			SetYear();
 8000f02:	f7ff fe37 	bl	8000b74 <SetYear>
			break;
 8000f06:	e005      	b.n	8000f14 <main+0xf0>
		case SET_COLOR:
			SetColor();
 8000f08:	f7ff fe74 	bl	8000bf4 <SetColor>
			break;
 8000f0c:	e002      	b.n	8000f14 <main+0xf0>
		case SET_BRIGHTNESS:
			SetBrightness();
 8000f0e:	f7ff feb9 	bl	8000c84 <SetBrightness>
			break;
 8000f12:	bf00      	nop
	}

	__HAL_TIM_SET_COUNTER(&htim3, counter);
 8000f14:	4b04      	ldr	r3, [pc, #16]	; (8000f28 <main+0x104>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <main+0x108>)
 8000f1a:	6812      	ldr	r2, [r2, #0]
 8000f1c:	625a      	str	r2, [r3, #36]	; 0x24
	Segment_Display(displayStr);
 8000f1e:	480b      	ldr	r0, [pc, #44]	; (8000f4c <main+0x128>)
 8000f20:	f000 fd36 	bl	8001990 <Segment_Display>
	  counter = __HAL_TIM_GET_COUNTER(&htim3);
 8000f24:	e792      	b.n	8000e4c <main+0x28>
 8000f26:	bf00      	nop
 8000f28:	20000104 	.word	0x20000104
 8000f2c:	200001ac 	.word	0x200001ac
 8000f30:	2000024c 	.word	0x2000024c
 8000f34:	200001b0 	.word	0x200001b0
 8000f38:	2000009c 	.word	0x2000009c
 8000f3c:	200001c4 	.word	0x200001c4
 8000f40:	200001ca 	.word	0x200001ca
 8000f44:	08005624 	.word	0x08005624
 8000f48:	08005628 	.word	0x08005628
 8000f4c:	200001cc 	.word	0x200001cc

08000f50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b094      	sub	sp, #80	; 0x50
 8000f54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f56:	f107 0320 	add.w	r3, r7, #32
 8000f5a:	2230      	movs	r2, #48	; 0x30
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4618      	mov	r0, r3
 8000f60:	f003 feba 	bl	8004cd8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f64:	f107 030c 	add.w	r3, r7, #12
 8000f68:	2200      	movs	r2, #0
 8000f6a:	601a      	str	r2, [r3, #0]
 8000f6c:	605a      	str	r2, [r3, #4]
 8000f6e:	609a      	str	r2, [r3, #8]
 8000f70:	60da      	str	r2, [r3, #12]
 8000f72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f74:	2300      	movs	r3, #0
 8000f76:	60bb      	str	r3, [r7, #8]
 8000f78:	4b28      	ldr	r3, [pc, #160]	; (800101c <SystemClock_Config+0xcc>)
 8000f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f7c:	4a27      	ldr	r2, [pc, #156]	; (800101c <SystemClock_Config+0xcc>)
 8000f7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f82:	6413      	str	r3, [r2, #64]	; 0x40
 8000f84:	4b25      	ldr	r3, [pc, #148]	; (800101c <SystemClock_Config+0xcc>)
 8000f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f8c:	60bb      	str	r3, [r7, #8]
 8000f8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	4b22      	ldr	r3, [pc, #136]	; (8001020 <SystemClock_Config+0xd0>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	4a21      	ldr	r2, [pc, #132]	; (8001020 <SystemClock_Config+0xd0>)
 8000f9a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000f9e:	6013      	str	r3, [r2, #0]
 8000fa0:	4b1f      	ldr	r3, [pc, #124]	; (8001020 <SystemClock_Config+0xd0>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fa8:	607b      	str	r3, [r7, #4]
 8000faa:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000fac:	230a      	movs	r3, #10
 8000fae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fb0:	2301      	movs	r3, #1
 8000fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fb4:	2310      	movs	r3, #16
 8000fb6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000fb8:	2301      	movs	r3, #1
 8000fba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fc4:	2308      	movs	r3, #8
 8000fc6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fc8:	2348      	movs	r3, #72	; 0x48
 8000fca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fcc:	2302      	movs	r3, #2
 8000fce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fd0:	2304      	movs	r3, #4
 8000fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fd4:	f107 0320 	add.w	r3, r7, #32
 8000fd8:	4618      	mov	r0, r3
 8000fda:	f001 fcc7 	bl	800296c <HAL_RCC_OscConfig>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d001      	beq.n	8000fe8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fe4:	f000 fa10 	bl	8001408 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fe8:	230f      	movs	r3, #15
 8000fea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fec:	2302      	movs	r3, #2
 8000fee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ff8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	2102      	movs	r1, #2
 8001004:	4618      	mov	r0, r3
 8001006:	f001 ff29 	bl	8002e5c <HAL_RCC_ClockConfig>
 800100a:	4603      	mov	r3, r0
 800100c:	2b00      	cmp	r3, #0
 800100e:	d001      	beq.n	8001014 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001010:	f000 f9fa 	bl	8001408 <Error_Handler>
  }
}
 8001014:	bf00      	nop
 8001016:	3750      	adds	r7, #80	; 0x50
 8001018:	46bd      	mov	sp, r7
 800101a:	bd80      	pop	{r7, pc}
 800101c:	40023800 	.word	0x40023800
 8001020:	40007000 	.word	0x40007000

08001024 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800102a:	1d3b      	adds	r3, r7, #4
 800102c:	2200      	movs	r2, #0
 800102e:	601a      	str	r2, [r3, #0]
 8001030:	605a      	str	r2, [r3, #4]
 8001032:	609a      	str	r2, [r3, #8]
 8001034:	60da      	str	r2, [r3, #12]
 8001036:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001038:	2300      	movs	r3, #0
 800103a:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800103c:	4b24      	ldr	r3, [pc, #144]	; (80010d0 <MX_RTC_Init+0xac>)
 800103e:	4a25      	ldr	r2, [pc, #148]	; (80010d4 <MX_RTC_Init+0xb0>)
 8001040:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001042:	4b23      	ldr	r3, [pc, #140]	; (80010d0 <MX_RTC_Init+0xac>)
 8001044:	2200      	movs	r2, #0
 8001046:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001048:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_RTC_Init+0xac>)
 800104a:	227f      	movs	r2, #127	; 0x7f
 800104c:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 800104e:	4b20      	ldr	r3, [pc, #128]	; (80010d0 <MX_RTC_Init+0xac>)
 8001050:	22ff      	movs	r2, #255	; 0xff
 8001052:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001054:	4b1e      	ldr	r3, [pc, #120]	; (80010d0 <MX_RTC_Init+0xac>)
 8001056:	2200      	movs	r2, #0
 8001058:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800105a:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_RTC_Init+0xac>)
 800105c:	2200      	movs	r2, #0
 800105e:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001060:	4b1b      	ldr	r3, [pc, #108]	; (80010d0 <MX_RTC_Init+0xac>)
 8001062:	2200      	movs	r2, #0
 8001064:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001066:	481a      	ldr	r0, [pc, #104]	; (80010d0 <MX_RTC_Init+0xac>)
 8001068:	f002 f994 	bl	8003394 <HAL_RTC_Init>
 800106c:	4603      	mov	r3, r0
 800106e:	2b00      	cmp	r3, #0
 8001070:	d001      	beq.n	8001076 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001072:	f000 f9c9 	bl	8001408 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 7;
 8001076:	2307      	movs	r3, #7
 8001078:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 15;
 800107a:	230f      	movs	r3, #15
 800107c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 50;
 800107e:	2332      	movs	r3, #50	; 0x32
 8001080:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001086:	2300      	movs	r3, #0
 8001088:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800108a:	1d3b      	adds	r3, r7, #4
 800108c:	2200      	movs	r2, #0
 800108e:	4619      	mov	r1, r3
 8001090:	480f      	ldr	r0, [pc, #60]	; (80010d0 <MX_RTC_Init+0xac>)
 8001092:	f002 f9f5 	bl	8003480 <HAL_RTC_SetTime>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d001      	beq.n	80010a0 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800109c:	f000 f9b4 	bl	8001408 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_TUESDAY;
 80010a0:	2302      	movs	r3, #2
 80010a2:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 80010a4:	2301      	movs	r3, #1
 80010a6:	707b      	strb	r3, [r7, #1]
  sDate.Date = 23;
 80010a8:	2317      	movs	r3, #23
 80010aa:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 24;
 80010ac:	2318      	movs	r3, #24
 80010ae:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 80010b0:	463b      	mov	r3, r7
 80010b2:	2200      	movs	r2, #0
 80010b4:	4619      	mov	r1, r3
 80010b6:	4806      	ldr	r0, [pc, #24]	; (80010d0 <MX_RTC_Init+0xac>)
 80010b8:	f002 fada 	bl	8003670 <HAL_RTC_SetDate>
 80010bc:	4603      	mov	r3, r0
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d001      	beq.n	80010c6 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80010c2:	f000 f9a1 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80010c6:	bf00      	nop
 80010c8:	3718      	adds	r7, #24
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	2000009c 	.word	0x2000009c
 80010d4:	40002800 	.word	0x40002800

080010d8 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b096      	sub	sp, #88	; 0x58
 80010dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010de:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80010e2:	2200      	movs	r2, #0
 80010e4:	601a      	str	r2, [r3, #0]
 80010e6:	605a      	str	r2, [r3, #4]
 80010e8:	609a      	str	r2, [r3, #8]
 80010ea:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010ec:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80010f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80010fa:	2200      	movs	r2, #0
 80010fc:	601a      	str	r2, [r3, #0]
 80010fe:	605a      	str	r2, [r3, #4]
 8001100:	609a      	str	r2, [r3, #8]
 8001102:	60da      	str	r2, [r3, #12]
 8001104:	611a      	str	r2, [r3, #16]
 8001106:	615a      	str	r2, [r3, #20]
 8001108:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800110a:	1d3b      	adds	r3, r7, #4
 800110c:	2220      	movs	r2, #32
 800110e:	2100      	movs	r1, #0
 8001110:	4618      	mov	r0, r3
 8001112:	f003 fde1 	bl	8004cd8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001116:	4b3e      	ldr	r3, [pc, #248]	; (8001210 <MX_TIM1_Init+0x138>)
 8001118:	4a3e      	ldr	r2, [pc, #248]	; (8001214 <MX_TIM1_Init+0x13c>)
 800111a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800111c:	4b3c      	ldr	r3, [pc, #240]	; (8001210 <MX_TIM1_Init+0x138>)
 800111e:	2200      	movs	r2, #0
 8001120:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001122:	4b3b      	ldr	r3, [pc, #236]	; (8001210 <MX_TIM1_Init+0x138>)
 8001124:	2200      	movs	r2, #0
 8001126:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 90-1;
 8001128:	4b39      	ldr	r3, [pc, #228]	; (8001210 <MX_TIM1_Init+0x138>)
 800112a:	2259      	movs	r2, #89	; 0x59
 800112c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112e:	4b38      	ldr	r3, [pc, #224]	; (8001210 <MX_TIM1_Init+0x138>)
 8001130:	2200      	movs	r2, #0
 8001132:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001134:	4b36      	ldr	r3, [pc, #216]	; (8001210 <MX_TIM1_Init+0x138>)
 8001136:	2200      	movs	r2, #0
 8001138:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800113a:	4b35      	ldr	r3, [pc, #212]	; (8001210 <MX_TIM1_Init+0x138>)
 800113c:	2200      	movs	r2, #0
 800113e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001140:	4833      	ldr	r0, [pc, #204]	; (8001210 <MX_TIM1_Init+0x138>)
 8001142:	f002 fc25 	bl	8003990 <HAL_TIM_Base_Init>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 800114c:	f000 f95c 	bl	8001408 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001150:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001154:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001156:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800115a:	4619      	mov	r1, r3
 800115c:	482c      	ldr	r0, [pc, #176]	; (8001210 <MX_TIM1_Init+0x138>)
 800115e:	f003 f883 	bl	8004268 <HAL_TIM_ConfigClockSource>
 8001162:	4603      	mov	r3, r0
 8001164:	2b00      	cmp	r3, #0
 8001166:	d001      	beq.n	800116c <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8001168:	f000 f94e 	bl	8001408 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800116c:	4828      	ldr	r0, [pc, #160]	; (8001210 <MX_TIM1_Init+0x138>)
 800116e:	f002 fc5e 	bl	8003a2e <HAL_TIM_PWM_Init>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001178:	f000 f946 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800117c:	2300      	movs	r3, #0
 800117e:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001180:	2300      	movs	r3, #0
 8001182:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001184:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001188:	4619      	mov	r1, r3
 800118a:	4821      	ldr	r0, [pc, #132]	; (8001210 <MX_TIM1_Init+0x138>)
 800118c:	f003 fc28 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 8001190:	4603      	mov	r3, r0
 8001192:	2b00      	cmp	r3, #0
 8001194:	d001      	beq.n	800119a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8001196:	f000 f937 	bl	8001408 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800119a:	2360      	movs	r3, #96	; 0x60
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800119e:	2300      	movs	r3, #0
 80011a0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011a6:	2300      	movs	r3, #0
 80011a8:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011ae:	2300      	movs	r3, #0
 80011b0:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011b6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011ba:	2200      	movs	r2, #0
 80011bc:	4619      	mov	r1, r3
 80011be:	4814      	ldr	r0, [pc, #80]	; (8001210 <MX_TIM1_Init+0x138>)
 80011c0:	f002 ff90 	bl	80040e4 <HAL_TIM_PWM_ConfigChannel>
 80011c4:	4603      	mov	r3, r0
 80011c6:	2b00      	cmp	r3, #0
 80011c8:	d001      	beq.n	80011ce <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 80011ca:	f000 f91d 	bl	8001408 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011ce:	2300      	movs	r3, #0
 80011d0:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011d2:	2300      	movs	r3, #0
 80011d4:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80011d6:	2300      	movs	r3, #0
 80011d8:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80011de:	2300      	movs	r3, #0
 80011e0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80011e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011e6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80011e8:	2300      	movs	r3, #0
 80011ea:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	4619      	mov	r1, r3
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <MX_TIM1_Init+0x138>)
 80011f2:	f003 fc63 	bl	8004abc <HAL_TIMEx_ConfigBreakDeadTime>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 80011fc:	f000 f904 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <MX_TIM1_Init+0x138>)
 8001202:	f000 fa21 	bl	8001648 <HAL_TIM_MspPostInit>

}
 8001206:	bf00      	nop
 8001208:	3758      	adds	r7, #88	; 0x58
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000bc 	.word	0x200000bc
 8001214:	40010000 	.word	0x40010000

08001218 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001218:	b580      	push	{r7, lr}
 800121a:	b08c      	sub	sp, #48	; 0x30
 800121c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2224      	movs	r2, #36	; 0x24
 8001224:	2100      	movs	r1, #0
 8001226:	4618      	mov	r0, r3
 8001228:	f003 fd56 	bl	8004cd8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800122c:	1d3b      	adds	r3, r7, #4
 800122e:	2200      	movs	r2, #0
 8001230:	601a      	str	r2, [r3, #0]
 8001232:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001234:	4b20      	ldr	r3, [pc, #128]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001236:	4a21      	ldr	r2, [pc, #132]	; (80012bc <MX_TIM3_Init+0xa4>)
 8001238:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800123a:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <MX_TIM3_Init+0xa0>)
 800123c:	2200      	movs	r2, #0
 800123e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001246:	4b1c      	ldr	r3, [pc, #112]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001248:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800124c:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800124e:	4b1a      	ldr	r3, [pc, #104]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001254:	4b18      	ldr	r3, [pc, #96]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001256:	2200      	movs	r2, #0
 8001258:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800125a:	2303      	movs	r3, #3
 800125c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 800125e:	2302      	movs	r3, #2
 8001260:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001262:	2301      	movs	r3, #1
 8001264:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800126a:	2300      	movs	r3, #0
 800126c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 800126e:	2302      	movs	r3, #2
 8001270:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001272:	2301      	movs	r3, #1
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001276:	2300      	movs	r3, #0
 8001278:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800127a:	2300      	movs	r3, #0
 800127c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	480c      	ldr	r0, [pc, #48]	; (80012b8 <MX_TIM3_Init+0xa0>)
 8001286:	f002 fcf1 	bl	8003c6c <HAL_TIM_Encoder_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001290:	f000 f8ba 	bl	8001408 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001294:	2300      	movs	r3, #0
 8001296:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	4619      	mov	r1, r3
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <MX_TIM3_Init+0xa0>)
 80012a2:	f003 fb9d 	bl	80049e0 <HAL_TIMEx_MasterConfigSynchronization>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80012ac:	f000 f8ac 	bl	8001408 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	3730      	adds	r7, #48	; 0x30
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	20000104 	.word	0x20000104
 80012bc:	40000400 	.word	0x40000400

080012c0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80012c6:	2300      	movs	r3, #0
 80012c8:	607b      	str	r3, [r7, #4]
 80012ca:	4b0c      	ldr	r3, [pc, #48]	; (80012fc <MX_DMA_Init+0x3c>)
 80012cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ce:	4a0b      	ldr	r2, [pc, #44]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012d4:	6313      	str	r3, [r2, #48]	; 0x30
 80012d6:	4b09      	ldr	r3, [pc, #36]	; (80012fc <MX_DMA_Init+0x3c>)
 80012d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012de:	607b      	str	r3, [r7, #4]
 80012e0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 8, 0);
 80012e2:	2200      	movs	r2, #0
 80012e4:	2108      	movs	r1, #8
 80012e6:	2039      	movs	r0, #57	; 0x39
 80012e8:	f000 fe47 	bl	8001f7a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 80012ec:	2039      	movs	r0, #57	; 0x39
 80012ee:	f000 fe60 	bl	8001fb2 <HAL_NVIC_EnableIRQ>

}
 80012f2:	bf00      	nop
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	40023800 	.word	0x40023800

08001300 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b08a      	sub	sp, #40	; 0x28
 8001304:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001306:	f107 0314 	add.w	r3, r7, #20
 800130a:	2200      	movs	r2, #0
 800130c:	601a      	str	r2, [r3, #0]
 800130e:	605a      	str	r2, [r3, #4]
 8001310:	609a      	str	r2, [r3, #8]
 8001312:	60da      	str	r2, [r3, #12]
 8001314:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	613b      	str	r3, [r7, #16]
 800131a:	4b38      	ldr	r3, [pc, #224]	; (80013fc <MX_GPIO_Init+0xfc>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131e:	4a37      	ldr	r2, [pc, #220]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001320:	f043 0304 	orr.w	r3, r3, #4
 8001324:	6313      	str	r3, [r2, #48]	; 0x30
 8001326:	4b35      	ldr	r3, [pc, #212]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800132a:	f003 0304 	and.w	r3, r3, #4
 800132e:	613b      	str	r3, [r7, #16]
 8001330:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001332:	2300      	movs	r3, #0
 8001334:	60fb      	str	r3, [r7, #12]
 8001336:	4b31      	ldr	r3, [pc, #196]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800133a:	4a30      	ldr	r2, [pc, #192]	; (80013fc <MX_GPIO_Init+0xfc>)
 800133c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001340:	6313      	str	r3, [r2, #48]	; 0x30
 8001342:	4b2e      	ldr	r3, [pc, #184]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001346:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800134a:	60fb      	str	r3, [r7, #12]
 800134c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800134e:	2300      	movs	r3, #0
 8001350:	60bb      	str	r3, [r7, #8]
 8001352:	4b2a      	ldr	r3, [pc, #168]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001356:	4a29      	ldr	r2, [pc, #164]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001358:	f043 0301 	orr.w	r3, r3, #1
 800135c:	6313      	str	r3, [r2, #48]	; 0x30
 800135e:	4b27      	ldr	r3, [pc, #156]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001362:	f003 0301 	and.w	r3, r3, #1
 8001366:	60bb      	str	r3, [r7, #8]
 8001368:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	607b      	str	r3, [r7, #4]
 800136e:	4b23      	ldr	r3, [pc, #140]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001372:	4a22      	ldr	r2, [pc, #136]	; (80013fc <MX_GPIO_Init+0xfc>)
 8001374:	f043 0302 	orr.w	r3, r3, #2
 8001378:	6313      	str	r3, [r2, #48]	; 0x30
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_GPIO_Init+0xfc>)
 800137c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 8001386:	2200      	movs	r2, #0
 8001388:	f248 01ff 	movw	r1, #33023	; 0x80ff
 800138c:	481c      	ldr	r0, [pc, #112]	; (8001400 <MX_GPIO_Init+0x100>)
 800138e:	f001 fad3 	bl	8002938 <HAL_GPIO_WritePin>
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 8001392:	2200      	movs	r2, #0
 8001394:	f241 4107 	movw	r1, #5127	; 0x1407
 8001398:	481a      	ldr	r0, [pc, #104]	; (8001404 <MX_GPIO_Init+0x104>)
 800139a:	f001 facd 	bl	8002938 <HAL_GPIO_WritePin>
                          |DIG_1_A_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : SEG_B_K_Pin SEG_G_K_Pin SEG_A_K_Pin SEG_C_K_Pin
                           SEG_F_K_Pin DIG_4_A_Pin DP_K_Pin DIG_3_A_Pin
                           LED_Pin */
  GPIO_InitStruct.Pin = SEG_B_K_Pin|SEG_G_K_Pin|SEG_A_K_Pin|SEG_C_K_Pin
 800139e:	f248 03ff 	movw	r3, #33023	; 0x80ff
 80013a2:	617b      	str	r3, [r7, #20]
                          |SEG_F_K_Pin|DIG_4_A_Pin|DP_K_Pin|DIG_3_A_Pin
                          |LED_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013a4:	2301      	movs	r3, #1
 80013a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ac:	2300      	movs	r3, #0
 80013ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b0:	f107 0314 	add.w	r3, r7, #20
 80013b4:	4619      	mov	r1, r3
 80013b6:	4812      	ldr	r0, [pc, #72]	; (8001400 <MX_GPIO_Init+0x100>)
 80013b8:	f001 f922 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pins : SEG_E_K_Pin DEC_A_Pin SEG_D_K_Pin DIG_2_A_Pin
                           DIG_1_A_Pin */
  GPIO_InitStruct.Pin = SEG_E_K_Pin|DEC_A_Pin|SEG_D_K_Pin|DIG_2_A_Pin
 80013bc:	f241 4307 	movw	r3, #5127	; 0x1407
 80013c0:	617b      	str	r3, [r7, #20]
                          |DIG_1_A_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013c2:	2301      	movs	r3, #1
 80013c4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	2300      	movs	r3, #0
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013ca:	2300      	movs	r3, #0
 80013cc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ce:	f107 0314 	add.w	r3, r7, #20
 80013d2:	4619      	mov	r1, r3
 80013d4:	480b      	ldr	r0, [pc, #44]	; (8001404 <MX_GPIO_Init+0x104>)
 80013d6:	f001 f913 	bl	8002600 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTON_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin;
 80013da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80013de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e0:	2300      	movs	r3, #0
 80013e2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013e4:	2301      	movs	r3, #1
 80013e6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80013e8:	f107 0314 	add.w	r3, r7, #20
 80013ec:	4619      	mov	r1, r3
 80013ee:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_GPIO_Init+0x104>)
 80013f0:	f001 f906 	bl	8002600 <HAL_GPIO_Init>

}
 80013f4:	bf00      	nop
 80013f6:	3728      	adds	r7, #40	; 0x28
 80013f8:	46bd      	mov	sp, r7
 80013fa:	bd80      	pop	{r7, pc}
 80013fc:	40023800 	.word	0x40023800
 8001400:	40020000 	.word	0x40020000
 8001404:	40020400 	.word	0x40020400

08001408 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800140c:	b672      	cpsid	i
}
 800140e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001410:	e7fe      	b.n	8001410 <Error_Handler+0x8>
	...

08001414 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	607b      	str	r3, [r7, #4]
 800141e:	4b21      	ldr	r3, [pc, #132]	; (80014a4 <HAL_MspInit+0x90>)
 8001420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001422:	4a20      	ldr	r2, [pc, #128]	; (80014a4 <HAL_MspInit+0x90>)
 8001424:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001428:	6453      	str	r3, [r2, #68]	; 0x44
 800142a:	4b1e      	ldr	r3, [pc, #120]	; (80014a4 <HAL_MspInit+0x90>)
 800142c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800142e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001432:	607b      	str	r3, [r7, #4]
 8001434:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	603b      	str	r3, [r7, #0]
 800143a:	4b1a      	ldr	r3, [pc, #104]	; (80014a4 <HAL_MspInit+0x90>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	4a19      	ldr	r2, [pc, #100]	; (80014a4 <HAL_MspInit+0x90>)
 8001440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001444:	6413      	str	r3, [r2, #64]	; 0x40
 8001446:	4b17      	ldr	r3, [pc, #92]	; (80014a4 <HAL_MspInit+0x90>)
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800144e:	603b      	str	r3, [r7, #0]
 8001450:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 1, 0);
 8001452:	2200      	movs	r2, #0
 8001454:	2101      	movs	r1, #1
 8001456:	f06f 000b 	mvn.w	r0, #11
 800145a:	f000 fd8e 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 2, 0);
 800145e:	2200      	movs	r2, #0
 8001460:	2102      	movs	r1, #2
 8001462:	f06f 000a 	mvn.w	r0, #10
 8001466:	f000 fd88 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 3, 0);
 800146a:	2200      	movs	r2, #0
 800146c:	2103      	movs	r1, #3
 800146e:	f06f 0009 	mvn.w	r0, #9
 8001472:	f000 fd82 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 4, 0);
 8001476:	2200      	movs	r2, #0
 8001478:	2104      	movs	r1, #4
 800147a:	f06f 0004 	mvn.w	r0, #4
 800147e:	f000 fd7c 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 5, 0);
 8001482:	2200      	movs	r2, #0
 8001484:	2105      	movs	r1, #5
 8001486:	f06f 0003 	mvn.w	r0, #3
 800148a:	f000 fd76 	bl	8001f7a <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 6, 0);
 800148e:	2200      	movs	r2, #0
 8001490:	2106      	movs	r1, #6
 8001492:	f06f 0001 	mvn.w	r0, #1
 8001496:	f000 fd70 	bl	8001f7a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800149a:	bf00      	nop
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40023800 	.word	0x40023800

080014a8 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b088      	sub	sp, #32
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014b0:	f107 0308 	add.w	r3, r7, #8
 80014b4:	2200      	movs	r2, #0
 80014b6:	601a      	str	r2, [r3, #0]
 80014b8:	605a      	str	r2, [r3, #4]
 80014ba:	609a      	str	r2, [r3, #8]
 80014bc:	60da      	str	r2, [r3, #12]
 80014be:	611a      	str	r2, [r3, #16]
 80014c0:	615a      	str	r2, [r3, #20]
  if(hrtc->Instance==RTC)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	4a0c      	ldr	r2, [pc, #48]	; (80014f8 <HAL_RTC_MspInit+0x50>)
 80014c8:	4293      	cmp	r3, r2
 80014ca:	d111      	bne.n	80014f0 <HAL_RTC_MspInit+0x48>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80014cc:	2302      	movs	r3, #2
 80014ce:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 80014d0:	f44f 7300 	mov.w	r3, #512	; 0x200
 80014d4:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014d6:	f107 0308 	add.w	r3, r7, #8
 80014da:	4618      	mov	r0, r3
 80014dc:	f001 fe6a 	bl	80031b4 <HAL_RCCEx_PeriphCLKConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 80014e6:	f7ff ff8f 	bl	8001408 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80014ea:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_RTC_MspInit+0x54>)
 80014ec:	2201      	movs	r2, #1
 80014ee:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80014f0:	bf00      	nop
 80014f2:	3720      	adds	r7, #32
 80014f4:	46bd      	mov	sp, r7
 80014f6:	bd80      	pop	{r7, pc}
 80014f8:	40002800 	.word	0x40002800
 80014fc:	42470e3c 	.word	0x42470e3c

08001500 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a22      	ldr	r2, [pc, #136]	; (8001598 <HAL_TIM_Base_MspInit+0x98>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d13d      	bne.n	800158e <HAL_TIM_Base_MspInit+0x8e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b21      	ldr	r3, [pc, #132]	; (800159c <HAL_TIM_Base_MspInit+0x9c>)
 8001518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800151a:	4a20      	ldr	r2, [pc, #128]	; (800159c <HAL_TIM_Base_MspInit+0x9c>)
 800151c:	f043 0301 	orr.w	r3, r3, #1
 8001520:	6453      	str	r3, [r2, #68]	; 0x44
 8001522:	4b1e      	ldr	r3, [pc, #120]	; (800159c <HAL_TIM_Base_MspInit+0x9c>)
 8001524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001526:	f003 0301 	and.w	r3, r3, #1
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001530:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <HAL_TIM_Base_MspInit+0xa4>)
 8001532:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8001534:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001536:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 800153a:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 800153e:	2240      	movs	r2, #64	; 0x40
 8001540:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001544:	2200      	movs	r2, #0
 8001546:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 800154a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800154e:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001550:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001552:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001556:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 800155a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800155e:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8001572:	480b      	ldr	r0, [pc, #44]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001574:	f000 fd38 	bl	8001fe8 <HAL_DMA_Init>
 8001578:	4603      	mov	r3, r0
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 800157e:	f7ff ff43 	bl	8001408 <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4a06      	ldr	r2, [pc, #24]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 8001586:	625a      	str	r2, [r3, #36]	; 0x24
 8001588:	4a05      	ldr	r2, [pc, #20]	; (80015a0 <HAL_TIM_Base_MspInit+0xa0>)
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010000 	.word	0x40010000
 800159c:	40023800 	.word	0x40023800
 80015a0:	2000014c 	.word	0x2000014c
 80015a4:	40026428 	.word	0x40026428

080015a8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b08a      	sub	sp, #40	; 0x28
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 0314 	add.w	r3, r7, #20
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM3)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	4a1d      	ldr	r2, [pc, #116]	; (800163c <HAL_TIM_Encoder_MspInit+0x94>)
 80015c6:	4293      	cmp	r3, r2
 80015c8:	d133      	bne.n	8001632 <HAL_TIM_Encoder_MspInit+0x8a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	613b      	str	r3, [r7, #16]
 80015ce:	4b1c      	ldr	r3, [pc, #112]	; (8001640 <HAL_TIM_Encoder_MspInit+0x98>)
 80015d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d2:	4a1b      	ldr	r2, [pc, #108]	; (8001640 <HAL_TIM_Encoder_MspInit+0x98>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	6413      	str	r3, [r2, #64]	; 0x40
 80015da:	4b19      	ldr	r3, [pc, #100]	; (8001640 <HAL_TIM_Encoder_MspInit+0x98>)
 80015dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	613b      	str	r3, [r7, #16]
 80015e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	60fb      	str	r3, [r7, #12]
 80015ea:	4b15      	ldr	r3, [pc, #84]	; (8001640 <HAL_TIM_Encoder_MspInit+0x98>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a14      	ldr	r2, [pc, #80]	; (8001640 <HAL_TIM_Encoder_MspInit+0x98>)
 80015f0:	f043 0302 	orr.w	r3, r3, #2
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b12      	ldr	r3, [pc, #72]	; (8001640 <HAL_TIM_Encoder_MspInit+0x98>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0302 	and.w	r3, r3, #2
 80015fe:	60fb      	str	r3, [r7, #12]
 8001600:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001602:	2330      	movs	r3, #48	; 0x30
 8001604:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	2302      	movs	r3, #2
 8001608:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800160a:	2300      	movs	r3, #0
 800160c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160e:	2300      	movs	r3, #0
 8001610:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001612:	2302      	movs	r3, #2
 8001614:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001616:	f107 0314 	add.w	r3, r7, #20
 800161a:	4619      	mov	r1, r3
 800161c:	4809      	ldr	r0, [pc, #36]	; (8001644 <HAL_TIM_Encoder_MspInit+0x9c>)
 800161e:	f000 ffef 	bl	8002600 <HAL_GPIO_Init>

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 9, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2109      	movs	r1, #9
 8001626:	201d      	movs	r0, #29
 8001628:	f000 fca7 	bl	8001f7a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800162c:	201d      	movs	r0, #29
 800162e:	f000 fcc0 	bl	8001fb2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001632:	bf00      	nop
 8001634:	3728      	adds	r7, #40	; 0x28
 8001636:	46bd      	mov	sp, r7
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40000400 	.word	0x40000400
 8001640:	40023800 	.word	0x40023800
 8001644:	40020400 	.word	0x40020400

08001648 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b088      	sub	sp, #32
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2200      	movs	r2, #0
 8001656:	601a      	str	r2, [r3, #0]
 8001658:	605a      	str	r2, [r3, #4]
 800165a:	609a      	str	r2, [r3, #8]
 800165c:	60da      	str	r2, [r3, #12]
 800165e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a12      	ldr	r2, [pc, #72]	; (80016b0 <HAL_TIM_MspPostInit+0x68>)
 8001666:	4293      	cmp	r3, r2
 8001668:	d11e      	bne.n	80016a8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166a:	2300      	movs	r3, #0
 800166c:	60bb      	str	r3, [r7, #8]
 800166e:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_TIM_MspPostInit+0x6c>)
 8001670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001672:	4a10      	ldr	r2, [pc, #64]	; (80016b4 <HAL_TIM_MspPostInit+0x6c>)
 8001674:	f043 0301 	orr.w	r3, r3, #1
 8001678:	6313      	str	r3, [r2, #48]	; 0x30
 800167a:	4b0e      	ldr	r3, [pc, #56]	; (80016b4 <HAL_TIM_MspPostInit+0x6c>)
 800167c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800167e:	f003 0301 	and.w	r3, r3, #1
 8001682:	60bb      	str	r3, [r7, #8]
 8001684:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001686:	f44f 7380 	mov.w	r3, #256	; 0x100
 800168a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168c:	2302      	movs	r3, #2
 800168e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001698:	2301      	movs	r3, #1
 800169a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	4805      	ldr	r0, [pc, #20]	; (80016b8 <HAL_TIM_MspPostInit+0x70>)
 80016a4:	f000 ffac 	bl	8002600 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80016a8:	bf00      	nop
 80016aa:	3720      	adds	r7, #32
 80016ac:	46bd      	mov	sp, r7
 80016ae:	bd80      	pop	{r7, pc}
 80016b0:	40010000 	.word	0x40010000
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40020000 	.word	0x40020000

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr

080016f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001708:	f000 fb18 	bl	8001d3c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800170c:	bf00      	nop
 800170e:	bd80      	pop	{r7, pc}

08001710 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001714:	4802      	ldr	r0, [pc, #8]	; (8001720 <TIM3_IRQHandler+0x10>)
 8001716:	f002 fbdd 	bl	8003ed4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800171a:	bf00      	nop
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	20000104 	.word	0x20000104

08001724 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001728:	4802      	ldr	r0, [pc, #8]	; (8001734 <DMA2_Stream1_IRQHandler+0x10>)
 800172a:	f000 fd2d 	bl	8002188 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800172e:	bf00      	nop
 8001730:	bd80      	pop	{r7, pc}
 8001732:	bf00      	nop
 8001734:	2000014c 	.word	0x2000014c

08001738 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
 800173e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001740:	4a14      	ldr	r2, [pc, #80]	; (8001794 <_sbrk+0x5c>)
 8001742:	4b15      	ldr	r3, [pc, #84]	; (8001798 <_sbrk+0x60>)
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800174c:	4b13      	ldr	r3, [pc, #76]	; (800179c <_sbrk+0x64>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	2b00      	cmp	r3, #0
 8001752:	d102      	bne.n	800175a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001754:	4b11      	ldr	r3, [pc, #68]	; (800179c <_sbrk+0x64>)
 8001756:	4a12      	ldr	r2, [pc, #72]	; (80017a0 <_sbrk+0x68>)
 8001758:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800175a:	4b10      	ldr	r3, [pc, #64]	; (800179c <_sbrk+0x64>)
 800175c:	681a      	ldr	r2, [r3, #0]
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	4413      	add	r3, r2
 8001762:	693a      	ldr	r2, [r7, #16]
 8001764:	429a      	cmp	r2, r3
 8001766:	d207      	bcs.n	8001778 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001768:	f003 fa8c 	bl	8004c84 <__errno>
 800176c:	4603      	mov	r3, r0
 800176e:	220c      	movs	r2, #12
 8001770:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001772:	f04f 33ff 	mov.w	r3, #4294967295
 8001776:	e009      	b.n	800178c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001778:	4b08      	ldr	r3, [pc, #32]	; (800179c <_sbrk+0x64>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800177e:	4b07      	ldr	r3, [pc, #28]	; (800179c <_sbrk+0x64>)
 8001780:	681a      	ldr	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	4413      	add	r3, r2
 8001786:	4a05      	ldr	r2, [pc, #20]	; (800179c <_sbrk+0x64>)
 8001788:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800178a:	68fb      	ldr	r3, [r7, #12]
}
 800178c:	4618      	mov	r0, r3
 800178e:	3718      	adds	r7, #24
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20020000 	.word	0x20020000
 8001798:	00000400 	.word	0x00000400
 800179c:	20000254 	.word	0x20000254
 80017a0:	20000418 	.word	0x20000418

080017a4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80017a8:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <SystemInit+0x20>)
 80017aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80017ae:	4a05      	ldr	r2, [pc, #20]	; (80017c4 <SystemInit+0x20>)
 80017b0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80017b4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b8:	bf00      	nop
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
 80017c2:	bf00      	nop
 80017c4:	e000ed00 	.word	0xe000ed00

080017c8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80017c8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001800 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017cc:	480d      	ldr	r0, [pc, #52]	; (8001804 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80017ce:	490e      	ldr	r1, [pc, #56]	; (8001808 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80017d0:	4a0e      	ldr	r2, [pc, #56]	; (800180c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d4:	e002      	b.n	80017dc <LoopCopyDataInit>

080017d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017da:	3304      	adds	r3, #4

080017dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017e0:	d3f9      	bcc.n	80017d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017e2:	4a0b      	ldr	r2, [pc, #44]	; (8001810 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80017e4:	4c0b      	ldr	r4, [pc, #44]	; (8001814 <LoopFillZerobss+0x26>)
  movs r3, #0
 80017e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e8:	e001      	b.n	80017ee <LoopFillZerobss>

080017ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017ec:	3204      	adds	r2, #4

080017ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017f0:	d3fb      	bcc.n	80017ea <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80017f2:	f7ff ffd7 	bl	80017a4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017f6:	f003 fa4b 	bl	8004c90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017fa:	f7ff fb13 	bl	8000e24 <main>
  bx  lr    
 80017fe:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001800:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001804:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001808:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 800180c:	08005688 	.word	0x08005688
  ldr r2, =_sbss
 8001810:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001814:	20000418 	.word	0x20000418

08001818 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001818:	e7fe      	b.n	8001818 <ADC_IRQHandler>
	...

0800181c <setSegments>:

char outputBuffer[CHAR_TO_DISPLAY_MAX] = {0};


// Set the segments for the current digit
void setSegments(int segments) {
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  HAL_GPIO_WritePin(GPIOA, SEG_A_K_Pin, (segments & (1 << 0)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	f003 0301 	and.w	r3, r3, #1
 800182a:	2b00      	cmp	r3, #0
 800182c:	bf0c      	ite	eq
 800182e:	2301      	moveq	r3, #1
 8001830:	2300      	movne	r3, #0
 8001832:	b2db      	uxtb	r3, r3
 8001834:	461a      	mov	r2, r3
 8001836:	2104      	movs	r1, #4
 8001838:	4830      	ldr	r0, [pc, #192]	; (80018fc <setSegments+0xe0>)
 800183a:	f001 f87d 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_B_K_Pin, (segments & (1 << 1)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	bf0c      	ite	eq
 8001848:	2301      	moveq	r3, #1
 800184a:	2300      	movne	r3, #0
 800184c:	b2db      	uxtb	r3, r3
 800184e:	461a      	mov	r2, r3
 8001850:	2101      	movs	r1, #1
 8001852:	482a      	ldr	r0, [pc, #168]	; (80018fc <setSegments+0xe0>)
 8001854:	f001 f870 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_C_K_Pin, (segments & (1 << 2)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	f003 0304 	and.w	r3, r3, #4
 800185e:	2b00      	cmp	r3, #0
 8001860:	bf0c      	ite	eq
 8001862:	2301      	moveq	r3, #1
 8001864:	2300      	movne	r3, #0
 8001866:	b2db      	uxtb	r3, r3
 8001868:	461a      	mov	r2, r3
 800186a:	2108      	movs	r1, #8
 800186c:	4823      	ldr	r0, [pc, #140]	; (80018fc <setSegments+0xe0>)
 800186e:	f001 f863 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_D_K_Pin, (segments & (1 << 3)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	f003 0308 	and.w	r3, r3, #8
 8001878:	2b00      	cmp	r3, #0
 800187a:	bf0c      	ite	eq
 800187c:	2301      	moveq	r3, #1
 800187e:	2300      	movne	r3, #0
 8001880:	b2db      	uxtb	r3, r3
 8001882:	461a      	mov	r2, r3
 8001884:	2104      	movs	r1, #4
 8001886:	481e      	ldr	r0, [pc, #120]	; (8001900 <setSegments+0xe4>)
 8001888:	f001 f856 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, SEG_E_K_Pin, (segments & (1 << 4)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	f003 0310 	and.w	r3, r3, #16
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf0c      	ite	eq
 8001896:	2301      	moveq	r3, #1
 8001898:	2300      	movne	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	461a      	mov	r2, r3
 800189e:	2101      	movs	r1, #1
 80018a0:	4817      	ldr	r0, [pc, #92]	; (8001900 <setSegments+0xe4>)
 80018a2:	f001 f849 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_F_K_Pin, (segments & (1 << 5)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	f003 0320 	and.w	r3, r3, #32
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	bf0c      	ite	eq
 80018b0:	2301      	moveq	r3, #1
 80018b2:	2300      	movne	r3, #0
 80018b4:	b2db      	uxtb	r3, r3
 80018b6:	461a      	mov	r2, r3
 80018b8:	2110      	movs	r1, #16
 80018ba:	4810      	ldr	r0, [pc, #64]	; (80018fc <setSegments+0xe0>)
 80018bc:	f001 f83c 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, SEG_G_K_Pin, (segments & (1 << 6)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	bf0c      	ite	eq
 80018ca:	2301      	moveq	r3, #1
 80018cc:	2300      	movne	r3, #0
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	461a      	mov	r2, r3
 80018d2:	2102      	movs	r1, #2
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <setSegments+0xe0>)
 80018d6:	f001 f82f 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DP_K_Pin, 	(segments & (1 << 7)) ? GPIO_PIN_RESET : GPIO_PIN_SET);
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	bf0c      	ite	eq
 80018e4:	2301      	moveq	r3, #1
 80018e6:	2300      	movne	r3, #0
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	461a      	mov	r2, r3
 80018ec:	2140      	movs	r1, #64	; 0x40
 80018ee:	4803      	ldr	r0, [pc, #12]	; (80018fc <setSegments+0xe0>)
 80018f0:	f001 f822 	bl	8002938 <HAL_GPIO_WritePin>
}
 80018f4:	bf00      	nop
 80018f6:	3708      	adds	r7, #8
 80018f8:	46bd      	mov	sp, r7
 80018fa:	bd80      	pop	{r7, pc}
 80018fc:	40020000 	.word	0x40020000
 8001900:	40020400 	.word	0x40020400

08001904 <activateDigit>:

// Activate a single digit
void activateDigit(int digit) {
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]

  HAL_GPIO_WritePin(GPIOB, DIG_1_A_Pin, digit == 1 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	2b01      	cmp	r3, #1
 8001910:	bf0c      	ite	eq
 8001912:	2301      	moveq	r3, #1
 8001914:	2300      	movne	r3, #0
 8001916:	b2db      	uxtb	r3, r3
 8001918:	461a      	mov	r2, r3
 800191a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800191e:	481a      	ldr	r0, [pc, #104]	; (8001988 <activateDigit+0x84>)
 8001920:	f001 f80a 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DIG_2_A_Pin, digit == 2 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2b02      	cmp	r3, #2
 8001928:	bf0c      	ite	eq
 800192a:	2301      	moveq	r3, #1
 800192c:	2300      	movne	r3, #0
 800192e:	b2db      	uxtb	r3, r3
 8001930:	461a      	mov	r2, r3
 8001932:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001936:	4814      	ldr	r0, [pc, #80]	; (8001988 <activateDigit+0x84>)
 8001938:	f000 fffe 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_3_A_Pin, digit == 3 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b03      	cmp	r3, #3
 8001940:	bf0c      	ite	eq
 8001942:	2301      	moveq	r3, #1
 8001944:	2300      	movne	r3, #0
 8001946:	b2db      	uxtb	r3, r3
 8001948:	461a      	mov	r2, r3
 800194a:	2180      	movs	r1, #128	; 0x80
 800194c:	480f      	ldr	r0, [pc, #60]	; (800198c <activateDigit+0x88>)
 800194e:	f000 fff3 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, DIG_4_A_Pin, digit == 4 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	2b04      	cmp	r3, #4
 8001956:	bf0c      	ite	eq
 8001958:	2301      	moveq	r3, #1
 800195a:	2300      	movne	r3, #0
 800195c:	b2db      	uxtb	r3, r3
 800195e:	461a      	mov	r2, r3
 8001960:	2120      	movs	r1, #32
 8001962:	480a      	ldr	r0, [pc, #40]	; (800198c <activateDigit+0x88>)
 8001964:	f000 ffe8 	bl	8002938 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, DEC_A_Pin,   digit == 5 ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	2b05      	cmp	r3, #5
 800196c:	bf0c      	ite	eq
 800196e:	2301      	moveq	r3, #1
 8001970:	2300      	movne	r3, #0
 8001972:	b2db      	uxtb	r3, r3
 8001974:	461a      	mov	r2, r3
 8001976:	2102      	movs	r1, #2
 8001978:	4803      	ldr	r0, [pc, #12]	; (8001988 <activateDigit+0x84>)
 800197a:	f000 ffdd 	bl	8002938 <HAL_GPIO_WritePin>
}
 800197e:	bf00      	nop
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	40020400 	.word	0x40020400
 800198c:	40020000 	.word	0x40020000

08001990 <Segment_Display>:

// Display up to four characters on the 7-segment displays
void Segment_Display(const char *input) {
 8001990:	b580      	push	{r7, lr}
 8001992:	b084      	sub	sp, #16
 8001994:	af00      	add	r7, sp, #0
 8001996:	6078      	str	r0, [r7, #4]
    // Calculate the number of characters to display

    for(int i = 0; i < 4; i++) {
 8001998:	2300      	movs	r3, #0
 800199a:	60fb      	str	r3, [r7, #12]
 800199c:	e172      	b.n	8001c84 <Segment_Display+0x2f4>
        activateDigit(i + 1);
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	3301      	adds	r3, #1
 80019a2:	4618      	mov	r0, r3
 80019a4:	f7ff ffae 	bl	8001904 <activateDigit>

        if(strlen(input) < i) {
 80019a8:	6878      	ldr	r0, [r7, #4]
 80019aa:	f7fe fc19 	bl	80001e0 <strlen>
 80019ae:	4602      	mov	r2, r0
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	429a      	cmp	r2, r3
 80019b4:	f0c0 816b 	bcc.w	8001c8e <Segment_Display+0x2fe>
        	break;
        }


		char ch = input[i];
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	4413      	add	r3, r2
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	72fb      	strb	r3, [r7, #11]
        switch(ch) {
 80019c2:	7afb      	ldrb	r3, [r7, #11]
 80019c4:	3b20      	subs	r3, #32
 80019c6:	2b5a      	cmp	r3, #90	; 0x5a
 80019c8:	f200 8152 	bhi.w	8001c70 <Segment_Display+0x2e0>
 80019cc:	a201      	add	r2, pc, #4	; (adr r2, 80019d4 <Segment_Display+0x44>)
 80019ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d2:	bf00      	nop
 80019d4:	08001c61 	.word	0x08001c61
 80019d8:	08001c71 	.word	0x08001c71
 80019dc:	08001c71 	.word	0x08001c71
 80019e0:	08001c71 	.word	0x08001c71
 80019e4:	08001c71 	.word	0x08001c71
 80019e8:	08001c71 	.word	0x08001c71
 80019ec:	08001c71 	.word	0x08001c71
 80019f0:	08001c71 	.word	0x08001c71
 80019f4:	08001c71 	.word	0x08001c71
 80019f8:	08001c71 	.word	0x08001c71
 80019fc:	08001c71 	.word	0x08001c71
 8001a00:	08001c71 	.word	0x08001c71
 8001a04:	08001c71 	.word	0x08001c71
 8001a08:	08001c69 	.word	0x08001c69
 8001a0c:	08001c71 	.word	0x08001c71
 8001a10:	08001c71 	.word	0x08001c71
 8001a14:	08001b41 	.word	0x08001b41
 8001a18:	08001b49 	.word	0x08001b49
 8001a1c:	08001b51 	.word	0x08001b51
 8001a20:	08001b59 	.word	0x08001b59
 8001a24:	08001b61 	.word	0x08001b61
 8001a28:	08001b69 	.word	0x08001b69
 8001a2c:	08001b71 	.word	0x08001b71
 8001a30:	08001b79 	.word	0x08001b79
 8001a34:	08001b81 	.word	0x08001b81
 8001a38:	08001b89 	.word	0x08001b89
 8001a3c:	08001c71 	.word	0x08001c71
 8001a40:	08001c71 	.word	0x08001c71
 8001a44:	08001c71 	.word	0x08001c71
 8001a48:	08001c71 	.word	0x08001c71
 8001a4c:	08001c71 	.word	0x08001c71
 8001a50:	08001c71 	.word	0x08001c71
 8001a54:	08001c71 	.word	0x08001c71
 8001a58:	08001b91 	.word	0x08001b91
 8001a5c:	08001b99 	.word	0x08001b99
 8001a60:	08001ba1 	.word	0x08001ba1
 8001a64:	08001ba9 	.word	0x08001ba9
 8001a68:	08001bb1 	.word	0x08001bb1
 8001a6c:	08001bb9 	.word	0x08001bb9
 8001a70:	08001bc1 	.word	0x08001bc1
 8001a74:	08001bc9 	.word	0x08001bc9
 8001a78:	08001bd1 	.word	0x08001bd1
 8001a7c:	08001bd9 	.word	0x08001bd9
 8001a80:	08001be1 	.word	0x08001be1
 8001a84:	08001be9 	.word	0x08001be9
 8001a88:	08001bf1 	.word	0x08001bf1
 8001a8c:	08001bf9 	.word	0x08001bf9
 8001a90:	08001c01 	.word	0x08001c01
 8001a94:	08001c09 	.word	0x08001c09
 8001a98:	08001c11 	.word	0x08001c11
 8001a9c:	08001c19 	.word	0x08001c19
 8001aa0:	08001c21 	.word	0x08001c21
 8001aa4:	08001c29 	.word	0x08001c29
 8001aa8:	08001c31 	.word	0x08001c31
 8001aac:	08001c39 	.word	0x08001c39
 8001ab0:	08001c41 	.word	0x08001c41
 8001ab4:	08001c49 	.word	0x08001c49
 8001ab8:	08001c51 	.word	0x08001c51
 8001abc:	08001c59 	.word	0x08001c59
 8001ac0:	08001c71 	.word	0x08001c71
 8001ac4:	08001c71 	.word	0x08001c71
 8001ac8:	08001c71 	.word	0x08001c71
 8001acc:	08001c71 	.word	0x08001c71
 8001ad0:	08001c71 	.word	0x08001c71
 8001ad4:	08001c71 	.word	0x08001c71
 8001ad8:	08001b91 	.word	0x08001b91
 8001adc:	08001b99 	.word	0x08001b99
 8001ae0:	08001ba1 	.word	0x08001ba1
 8001ae4:	08001ba9 	.word	0x08001ba9
 8001ae8:	08001bb1 	.word	0x08001bb1
 8001aec:	08001bb9 	.word	0x08001bb9
 8001af0:	08001bc1 	.word	0x08001bc1
 8001af4:	08001bc9 	.word	0x08001bc9
 8001af8:	08001bd1 	.word	0x08001bd1
 8001afc:	08001bd9 	.word	0x08001bd9
 8001b00:	08001be1 	.word	0x08001be1
 8001b04:	08001be9 	.word	0x08001be9
 8001b08:	08001bf1 	.word	0x08001bf1
 8001b0c:	08001bf9 	.word	0x08001bf9
 8001b10:	08001c01 	.word	0x08001c01
 8001b14:	08001c09 	.word	0x08001c09
 8001b18:	08001c11 	.word	0x08001c11
 8001b1c:	08001c19 	.word	0x08001c19
 8001b20:	08001c21 	.word	0x08001c21
 8001b24:	08001c29 	.word	0x08001c29
 8001b28:	08001c31 	.word	0x08001c31
 8001b2c:	08001c39 	.word	0x08001c39
 8001b30:	08001c41 	.word	0x08001c41
 8001b34:	08001c49 	.word	0x08001c49
 8001b38:	08001c51 	.word	0x08001c51
 8001b3c:	08001c59 	.word	0x08001c59
            case '0':
                setSegments(0x3F);
 8001b40:	203f      	movs	r0, #63	; 0x3f
 8001b42:	f7ff fe6b 	bl	800181c <setSegments>
                break;
 8001b46:	e097      	b.n	8001c78 <Segment_Display+0x2e8>
            case '1':
                setSegments(0x06);
 8001b48:	2006      	movs	r0, #6
 8001b4a:	f7ff fe67 	bl	800181c <setSegments>
                break;
 8001b4e:	e093      	b.n	8001c78 <Segment_Display+0x2e8>
            case '2':
                setSegments(0x5B);
 8001b50:	205b      	movs	r0, #91	; 0x5b
 8001b52:	f7ff fe63 	bl	800181c <setSegments>
                break;
 8001b56:	e08f      	b.n	8001c78 <Segment_Display+0x2e8>
            case '3':
                setSegments(0x4F);
 8001b58:	204f      	movs	r0, #79	; 0x4f
 8001b5a:	f7ff fe5f 	bl	800181c <setSegments>
                break;
 8001b5e:	e08b      	b.n	8001c78 <Segment_Display+0x2e8>
            case '4':
                setSegments(0x66);
 8001b60:	2066      	movs	r0, #102	; 0x66
 8001b62:	f7ff fe5b 	bl	800181c <setSegments>
                break;
 8001b66:	e087      	b.n	8001c78 <Segment_Display+0x2e8>
            case '5':
                setSegments(0x6D);
 8001b68:	206d      	movs	r0, #109	; 0x6d
 8001b6a:	f7ff fe57 	bl	800181c <setSegments>
                break;
 8001b6e:	e083      	b.n	8001c78 <Segment_Display+0x2e8>
            case '6':
                setSegments(0x7D);
 8001b70:	207d      	movs	r0, #125	; 0x7d
 8001b72:	f7ff fe53 	bl	800181c <setSegments>
                break;
 8001b76:	e07f      	b.n	8001c78 <Segment_Display+0x2e8>
            case '7':
                setSegments(0x07);
 8001b78:	2007      	movs	r0, #7
 8001b7a:	f7ff fe4f 	bl	800181c <setSegments>
                break;
 8001b7e:	e07b      	b.n	8001c78 <Segment_Display+0x2e8>
            case '8':
                setSegments(0x7F);
 8001b80:	207f      	movs	r0, #127	; 0x7f
 8001b82:	f7ff fe4b 	bl	800181c <setSegments>
                break;
 8001b86:	e077      	b.n	8001c78 <Segment_Display+0x2e8>
            case '9':
                setSegments(0x6F);
 8001b88:	206f      	movs	r0, #111	; 0x6f
 8001b8a:	f7ff fe47 	bl	800181c <setSegments>
                break;
 8001b8e:	e073      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'a':
            case 'A':
                setSegments(0x77);
 8001b90:	2077      	movs	r0, #119	; 0x77
 8001b92:	f7ff fe43 	bl	800181c <setSegments>
                break;
 8001b96:	e06f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'b':
            case 'B':
                setSegments(0x7C);
 8001b98:	207c      	movs	r0, #124	; 0x7c
 8001b9a:	f7ff fe3f 	bl	800181c <setSegments>
                break;
 8001b9e:	e06b      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'c':
            case 'C':
                setSegments(0x39);
 8001ba0:	2039      	movs	r0, #57	; 0x39
 8001ba2:	f7ff fe3b 	bl	800181c <setSegments>
                break;
 8001ba6:	e067      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'd':
            case 'D':
                setSegments(0x5E);
 8001ba8:	205e      	movs	r0, #94	; 0x5e
 8001baa:	f7ff fe37 	bl	800181c <setSegments>
                break;
 8001bae:	e063      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'e':
            case 'E':
                setSegments(0x79);
 8001bb0:	2079      	movs	r0, #121	; 0x79
 8001bb2:	f7ff fe33 	bl	800181c <setSegments>
                break;
 8001bb6:	e05f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'f':
            case 'F':
                setSegments(0x71);
 8001bb8:	2071      	movs	r0, #113	; 0x71
 8001bba:	f7ff fe2f 	bl	800181c <setSegments>
                break;
 8001bbe:	e05b      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'g':
            case 'G':
                setSegments(0x3D);
 8001bc0:	203d      	movs	r0, #61	; 0x3d
 8001bc2:	f7ff fe2b 	bl	800181c <setSegments>
                break;
 8001bc6:	e057      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'h':
            case 'H':
                setSegments(0x76);
 8001bc8:	2076      	movs	r0, #118	; 0x76
 8001bca:	f7ff fe27 	bl	800181c <setSegments>
                break;
 8001bce:	e053      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'i':
            case 'I':
                setSegments(0x30);
 8001bd0:	2030      	movs	r0, #48	; 0x30
 8001bd2:	f7ff fe23 	bl	800181c <setSegments>
                break;
 8001bd6:	e04f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'j':
            case 'J':
                setSegments(0x1E);
 8001bd8:	201e      	movs	r0, #30
 8001bda:	f7ff fe1f 	bl	800181c <setSegments>
                break;
 8001bde:	e04b      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'k':
            case 'K':
                // Using same as 'H', no unique representation for 'K'
                setSegments(0x76);
 8001be0:	2076      	movs	r0, #118	; 0x76
 8001be2:	f7ff fe1b 	bl	800181c <setSegments>
                break;
 8001be6:	e047      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'l':
            case 'L':
                setSegments(0x38);
 8001be8:	2038      	movs	r0, #56	; 0x38
 8001bea:	f7ff fe17 	bl	800181c <setSegments>
                break;
 8001bee:	e043      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'm':
            case 'M':
                // 'M' uses same as 'n', no unique representation
                setSegments(0x37);
 8001bf0:	2037      	movs	r0, #55	; 0x37
 8001bf2:	f7ff fe13 	bl	800181c <setSegments>
                break;
 8001bf6:	e03f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'n':
            case 'N':
                setSegments(0x54);
 8001bf8:	2054      	movs	r0, #84	; 0x54
 8001bfa:	f7ff fe0f 	bl	800181c <setSegments>
                break;
 8001bfe:	e03b      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'o':
            case 'O':
                setSegments(0x3F);
 8001c00:	203f      	movs	r0, #63	; 0x3f
 8001c02:	f7ff fe0b 	bl	800181c <setSegments>
                break;
 8001c06:	e037      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'p':
            case 'P':
                setSegments(0x73);
 8001c08:	2073      	movs	r0, #115	; 0x73
 8001c0a:	f7ff fe07 	bl	800181c <setSegments>
                break;
 8001c0e:	e033      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'q':
            case 'Q':
                setSegments(0x67);
 8001c10:	2067      	movs	r0, #103	; 0x67
 8001c12:	f7ff fe03 	bl	800181c <setSegments>
                break;
 8001c16:	e02f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'r':
            case 'R':
                setSegments(0x50);
 8001c18:	2050      	movs	r0, #80	; 0x50
 8001c1a:	f7ff fdff 	bl	800181c <setSegments>
                break;
 8001c1e:	e02b      	b.n	8001c78 <Segment_Display+0x2e8>
            case 's':
            case 'S':
                setSegments(0x6D);
 8001c20:	206d      	movs	r0, #109	; 0x6d
 8001c22:	f7ff fdfb 	bl	800181c <setSegments>
                break;
 8001c26:	e027      	b.n	8001c78 <Segment_Display+0x2e8>
            case 't':
            case 'T':
                setSegments(0x78);
 8001c28:	2078      	movs	r0, #120	; 0x78
 8001c2a:	f7ff fdf7 	bl	800181c <setSegments>
                break;
 8001c2e:	e023      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'u':
            case 'U':
                setSegments(0x3E);
 8001c30:	203e      	movs	r0, #62	; 0x3e
 8001c32:	f7ff fdf3 	bl	800181c <setSegments>
                break;
 8001c36:	e01f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'v':
            case 'V':
                // Using same as 'U', no unique representation for 'V'
                setSegments(0x3E);
 8001c38:	203e      	movs	r0, #62	; 0x3e
 8001c3a:	f7ff fdef 	bl	800181c <setSegments>
                break;
 8001c3e:	e01b      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'w':
            case 'W':
                // Representation of 'W' is not possible, so using compromise
                setSegments(0x2A);
 8001c40:	202a      	movs	r0, #42	; 0x2a
 8001c42:	f7ff fdeb 	bl	800181c <setSegments>
                break;
 8001c46:	e017      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'x':
            case 'X':
                // Using same as 'H', no unique representation for 'X'
                setSegments(0x76);
 8001c48:	2076      	movs	r0, #118	; 0x76
 8001c4a:	f7ff fde7 	bl	800181c <setSegments>
                break;
 8001c4e:	e013      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'y':
            case 'Y':
                setSegments(0x6E);
 8001c50:	206e      	movs	r0, #110	; 0x6e
 8001c52:	f7ff fde3 	bl	800181c <setSegments>
                break;
 8001c56:	e00f      	b.n	8001c78 <Segment_Display+0x2e8>
            case 'z':
            case 'Z':
                // 'Z' uses same as '2'
                setSegments(0x5B);
 8001c58:	205b      	movs	r0, #91	; 0x5b
 8001c5a:	f7ff fddf 	bl	800181c <setSegments>
                break;
 8001c5e:	e00b      	b.n	8001c78 <Segment_Display+0x2e8>
            case ' ':
                // Blank character
                setSegments(0x00);
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fddb 	bl	800181c <setSegments>
                break;
 8001c66:	e007      	b.n	8001c78 <Segment_Display+0x2e8>
            case '-':
            	setSegments(0b01000000);
 8001c68:	2040      	movs	r0, #64	; 0x40
 8001c6a:	f7ff fdd7 	bl	800181c <setSegments>
            	break;
 8001c6e:	e003      	b.n	8001c78 <Segment_Display+0x2e8>
            default:
            	setSegments(0x00);
 8001c70:	2000      	movs	r0, #0
 8001c72:	f7ff fdd3 	bl	800181c <setSegments>
                break;
 8001c76:	bf00      	nop
        }
        HAL_Delay(5);
 8001c78:	2005      	movs	r0, #5
 8001c7a:	f000 f87f 	bl	8001d7c <HAL_Delay>
    for(int i = 0; i < 4; i++) {
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	3301      	adds	r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
 8001c86:	2b03      	cmp	r3, #3
 8001c88:	f77f ae89 	ble.w	800199e <Segment_Display+0xe>
    }
}
 8001c8c:	e000      	b.n	8001c90 <Segment_Display+0x300>
        	break;
 8001c8e:	bf00      	nop
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}

08001c98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c9c:	4b0e      	ldr	r3, [pc, #56]	; (8001cd8 <HAL_Init+0x40>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	4a0d      	ldr	r2, [pc, #52]	; (8001cd8 <HAL_Init+0x40>)
 8001ca2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ca6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001ca8:	4b0b      	ldr	r3, [pc, #44]	; (8001cd8 <HAL_Init+0x40>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	4a0a      	ldr	r2, [pc, #40]	; (8001cd8 <HAL_Init+0x40>)
 8001cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001cb2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001cb4:	4b08      	ldr	r3, [pc, #32]	; (8001cd8 <HAL_Init+0x40>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	4a07      	ldr	r2, [pc, #28]	; (8001cd8 <HAL_Init+0x40>)
 8001cba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cbe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001cc0:	2003      	movs	r0, #3
 8001cc2:	f000 f94f 	bl	8001f64 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001cc6:	200f      	movs	r0, #15
 8001cc8:	f000 f808 	bl	8001cdc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ccc:	f7ff fba2 	bl	8001414 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001cd0:	2300      	movs	r3, #0
}
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40023c00 	.word	0x40023c00

08001cdc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001ce4:	4b12      	ldr	r3, [pc, #72]	; (8001d30 <HAL_InitTick+0x54>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <HAL_InitTick+0x58>)
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001cf2:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cf6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	f000 f967 	bl	8001fce <HAL_SYSTICK_Config>
 8001d00:	4603      	mov	r3, r0
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d001      	beq.n	8001d0a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001d06:	2301      	movs	r3, #1
 8001d08:	e00e      	b.n	8001d28 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2b0f      	cmp	r3, #15
 8001d0e:	d80a      	bhi.n	8001d26 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001d10:	2200      	movs	r2, #0
 8001d12:	6879      	ldr	r1, [r7, #4]
 8001d14:	f04f 30ff 	mov.w	r0, #4294967295
 8001d18:	f000 f92f 	bl	8001f7a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001d1c:	4a06      	ldr	r2, [pc, #24]	; (8001d38 <HAL_InitTick+0x5c>)
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001d22:	2300      	movs	r3, #0
 8001d24:	e000      	b.n	8001d28 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001d26:	2301      	movs	r3, #1
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	3708      	adds	r7, #8
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	20000010 	.word	0x20000010
 8001d34:	20000018 	.word	0x20000018
 8001d38:	20000014 	.word	0x20000014

08001d3c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d3c:	b480      	push	{r7}
 8001d3e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <HAL_IncTick+0x20>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	4b06      	ldr	r3, [pc, #24]	; (8001d60 <HAL_IncTick+0x24>)
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	4413      	add	r3, r2
 8001d4c:	4a04      	ldr	r2, [pc, #16]	; (8001d60 <HAL_IncTick+0x24>)
 8001d4e:	6013      	str	r3, [r2, #0]
}
 8001d50:	bf00      	nop
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
 8001d5a:	bf00      	nop
 8001d5c:	20000018 	.word	0x20000018
 8001d60:	20000258 	.word	0x20000258

08001d64 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return uwTick;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_GetTick+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000258 	.word	0x20000258

08001d7c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b084      	sub	sp, #16
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001d84:	f7ff ffee 	bl	8001d64 <HAL_GetTick>
 8001d88:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d94:	d005      	beq.n	8001da2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001d96:	4b0a      	ldr	r3, [pc, #40]	; (8001dc0 <HAL_Delay+0x44>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	4413      	add	r3, r2
 8001da0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001da2:	bf00      	nop
 8001da4:	f7ff ffde 	bl	8001d64 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68bb      	ldr	r3, [r7, #8]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	68fa      	ldr	r2, [r7, #12]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d8f7      	bhi.n	8001da4 <HAL_Delay+0x28>
  {
  }
}
 8001db4:	bf00      	nop
 8001db6:	bf00      	nop
 8001db8:	3710      	adds	r7, #16
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20000018 	.word	0x20000018

08001dc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b085      	sub	sp, #20
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	f003 0307 	and.w	r3, r3, #7
 8001dd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dd4:	4b0c      	ldr	r3, [pc, #48]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dda:	68ba      	ldr	r2, [r7, #8]
 8001ddc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001de0:	4013      	ands	r3, r2
 8001de2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de8:	68bb      	ldr	r3, [r7, #8]
 8001dea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001dec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001df0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001df4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001df6:	4a04      	ldr	r2, [pc, #16]	; (8001e08 <__NVIC_SetPriorityGrouping+0x44>)
 8001df8:	68bb      	ldr	r3, [r7, #8]
 8001dfa:	60d3      	str	r3, [r2, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	3714      	adds	r7, #20
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	e000ed00 	.word	0xe000ed00

08001e0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <__NVIC_GetPriorityGrouping+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	0a1b      	lsrs	r3, r3, #8
 8001e16:	f003 0307 	and.w	r3, r3, #7
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e22:	4770      	bx	lr
 8001e24:	e000ed00 	.word	0xe000ed00

08001e28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e28:	b480      	push	{r7}
 8001e2a:	b083      	sub	sp, #12
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	4603      	mov	r3, r0
 8001e30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	db0b      	blt.n	8001e52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 021f 	and.w	r2, r3, #31
 8001e40:	4907      	ldr	r1, [pc, #28]	; (8001e60 <__NVIC_EnableIRQ+0x38>)
 8001e42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e46:	095b      	lsrs	r3, r3, #5
 8001e48:	2001      	movs	r0, #1
 8001e4a:	fa00 f202 	lsl.w	r2, r0, r2
 8001e4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001e52:	bf00      	nop
 8001e54:	370c      	adds	r7, #12
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	e000e100 	.word	0xe000e100

08001e64 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e64:	b480      	push	{r7}
 8001e66:	b083      	sub	sp, #12
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	6039      	str	r1, [r7, #0]
 8001e6e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	db0a      	blt.n	8001e8e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	b2da      	uxtb	r2, r3
 8001e7c:	490c      	ldr	r1, [pc, #48]	; (8001eb0 <__NVIC_SetPriority+0x4c>)
 8001e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e82:	0112      	lsls	r2, r2, #4
 8001e84:	b2d2      	uxtb	r2, r2
 8001e86:	440b      	add	r3, r1
 8001e88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e8c:	e00a      	b.n	8001ea4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	b2da      	uxtb	r2, r3
 8001e92:	4908      	ldr	r1, [pc, #32]	; (8001eb4 <__NVIC_SetPriority+0x50>)
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	f003 030f 	and.w	r3, r3, #15
 8001e9a:	3b04      	subs	r3, #4
 8001e9c:	0112      	lsls	r2, r2, #4
 8001e9e:	b2d2      	uxtb	r2, r2
 8001ea0:	440b      	add	r3, r1
 8001ea2:	761a      	strb	r2, [r3, #24]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr
 8001eb0:	e000e100 	.word	0xe000e100
 8001eb4:	e000ed00 	.word	0xe000ed00

08001eb8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b089      	sub	sp, #36	; 0x24
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	60b9      	str	r1, [r7, #8]
 8001ec2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	f1c3 0307 	rsb	r3, r3, #7
 8001ed2:	2b04      	cmp	r3, #4
 8001ed4:	bf28      	it	cs
 8001ed6:	2304      	movcs	r3, #4
 8001ed8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001eda:	69fb      	ldr	r3, [r7, #28]
 8001edc:	3304      	adds	r3, #4
 8001ede:	2b06      	cmp	r3, #6
 8001ee0:	d902      	bls.n	8001ee8 <NVIC_EncodePriority+0x30>
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	3b03      	subs	r3, #3
 8001ee6:	e000      	b.n	8001eea <NVIC_EncodePriority+0x32>
 8001ee8:	2300      	movs	r3, #0
 8001eea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001eec:	f04f 32ff 	mov.w	r2, #4294967295
 8001ef0:	69bb      	ldr	r3, [r7, #24]
 8001ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef6:	43da      	mvns	r2, r3
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	401a      	ands	r2, r3
 8001efc:	697b      	ldr	r3, [r7, #20]
 8001efe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f00:	f04f 31ff 	mov.w	r1, #4294967295
 8001f04:	697b      	ldr	r3, [r7, #20]
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	43d9      	mvns	r1, r3
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f10:	4313      	orrs	r3, r2
         );
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3724      	adds	r7, #36	; 0x24
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr
	...

08001f20 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	3b01      	subs	r3, #1
 8001f2c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f30:	d301      	bcc.n	8001f36 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f32:	2301      	movs	r3, #1
 8001f34:	e00f      	b.n	8001f56 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f36:	4a0a      	ldr	r2, [pc, #40]	; (8001f60 <SysTick_Config+0x40>)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	3b01      	subs	r3, #1
 8001f3c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f3e:	210f      	movs	r1, #15
 8001f40:	f04f 30ff 	mov.w	r0, #4294967295
 8001f44:	f7ff ff8e 	bl	8001e64 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f48:	4b05      	ldr	r3, [pc, #20]	; (8001f60 <SysTick_Config+0x40>)
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f4e:	4b04      	ldr	r3, [pc, #16]	; (8001f60 <SysTick_Config+0x40>)
 8001f50:	2207      	movs	r2, #7
 8001f52:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f54:	2300      	movs	r3, #0
}
 8001f56:	4618      	mov	r0, r3
 8001f58:	3708      	adds	r7, #8
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	e000e010 	.word	0xe000e010

08001f64 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f6c:	6878      	ldr	r0, [r7, #4]
 8001f6e:	f7ff ff29 	bl	8001dc4 <__NVIC_SetPriorityGrouping>
}
 8001f72:	bf00      	nop
 8001f74:	3708      	adds	r7, #8
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}

08001f7a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af00      	add	r7, sp, #0
 8001f80:	4603      	mov	r3, r0
 8001f82:	60b9      	str	r1, [r7, #8]
 8001f84:	607a      	str	r2, [r7, #4]
 8001f86:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f88:	2300      	movs	r3, #0
 8001f8a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f8c:	f7ff ff3e 	bl	8001e0c <__NVIC_GetPriorityGrouping>
 8001f90:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f92:	687a      	ldr	r2, [r7, #4]
 8001f94:	68b9      	ldr	r1, [r7, #8]
 8001f96:	6978      	ldr	r0, [r7, #20]
 8001f98:	f7ff ff8e 	bl	8001eb8 <NVIC_EncodePriority>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fa2:	4611      	mov	r1, r2
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff ff5d 	bl	8001e64 <__NVIC_SetPriority>
}
 8001faa:	bf00      	nop
 8001fac:	3718      	adds	r7, #24
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}

08001fb2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fb2:	b580      	push	{r7, lr}
 8001fb4:	b082      	sub	sp, #8
 8001fb6:	af00      	add	r7, sp, #0
 8001fb8:	4603      	mov	r3, r0
 8001fba:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff ff31 	bl	8001e28 <__NVIC_EnableIRQ>
}
 8001fc6:	bf00      	nop
 8001fc8:	3708      	adds	r7, #8
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	bd80      	pop	{r7, pc}

08001fce <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fce:	b580      	push	{r7, lr}
 8001fd0:	b082      	sub	sp, #8
 8001fd2:	af00      	add	r7, sp, #0
 8001fd4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f7ff ffa2 	bl	8001f20 <SysTick_Config>
 8001fdc:	4603      	mov	r3, r0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3708      	adds	r7, #8
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
	...

08001fe8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b086      	sub	sp, #24
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001ff4:	f7ff feb6 	bl	8001d64 <HAL_GetTick>
 8001ff8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e099      	b.n	8002138 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2200      	movs	r2, #0
 8002010:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	681a      	ldr	r2, [r3, #0]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f022 0201 	bic.w	r2, r2, #1
 8002022:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002024:	e00f      	b.n	8002046 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002026:	f7ff fe9d 	bl	8001d64 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	2b05      	cmp	r3, #5
 8002032:	d908      	bls.n	8002046 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	2220      	movs	r2, #32
 8002038:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2203      	movs	r2, #3
 800203e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	e078      	b.n	8002138 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f003 0301 	and.w	r3, r3, #1
 8002050:	2b00      	cmp	r3, #0
 8002052:	d1e8      	bne.n	8002026 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	4b38      	ldr	r3, [pc, #224]	; (8002140 <HAL_DMA_Init+0x158>)
 8002060:	4013      	ands	r3, r2
 8002062:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685a      	ldr	r2, [r3, #4]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	689b      	ldr	r3, [r3, #8]
 800206c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002072:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800207e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800208a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	6a1b      	ldr	r3, [r3, #32]
 8002090:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002092:	697a      	ldr	r2, [r7, #20]
 8002094:	4313      	orrs	r3, r2
 8002096:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800209c:	2b04      	cmp	r3, #4
 800209e:	d107      	bne.n	80020b0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a8:	4313      	orrs	r3, r2
 80020aa:	697a      	ldr	r2, [r7, #20]
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	697a      	ldr	r2, [r7, #20]
 80020b6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	695b      	ldr	r3, [r3, #20]
 80020be:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80020c0:	697b      	ldr	r3, [r7, #20]
 80020c2:	f023 0307 	bic.w	r3, r3, #7
 80020c6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020cc:	697a      	ldr	r2, [r7, #20]
 80020ce:	4313      	orrs	r3, r2
 80020d0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020d6:	2b04      	cmp	r3, #4
 80020d8:	d117      	bne.n	800210a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020de:	697a      	ldr	r2, [r7, #20]
 80020e0:	4313      	orrs	r3, r2
 80020e2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d00e      	beq.n	800210a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80020ec:	6878      	ldr	r0, [r7, #4]
 80020ee:	f000 fa0b 	bl	8002508 <DMA_CheckFifoParam>
 80020f2:	4603      	mov	r3, r0
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d008      	beq.n	800210a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2240      	movs	r2, #64	; 0x40
 80020fc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2201      	movs	r2, #1
 8002102:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8002106:	2301      	movs	r3, #1
 8002108:	e016      	b.n	8002138 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	697a      	ldr	r2, [r7, #20]
 8002110:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f000 f9c2 	bl	800249c <DMA_CalcBaseAndBitshift>
 8002118:	4603      	mov	r3, r0
 800211a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	223f      	movs	r2, #63	; 0x3f
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2200      	movs	r2, #0
 800212c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	2201      	movs	r2, #1
 8002132:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3718      	adds	r7, #24
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	f010803f 	.word	0xf010803f

08002144 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002144:	b480      	push	{r7}
 8002146:	b083      	sub	sp, #12
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002152:	b2db      	uxtb	r3, r3
 8002154:	2b02      	cmp	r3, #2
 8002156:	d004      	beq.n	8002162 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	2280      	movs	r2, #128	; 0x80
 800215c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	e00c      	b.n	800217c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2205      	movs	r2, #5
 8002166:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f022 0201 	bic.w	r2, r2, #1
 8002178:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002190:	2300      	movs	r3, #0
 8002192:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002194:	4b8e      	ldr	r3, [pc, #568]	; (80023d0 <HAL_DMA_IRQHandler+0x248>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4a8e      	ldr	r2, [pc, #568]	; (80023d4 <HAL_DMA_IRQHandler+0x24c>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	0a9b      	lsrs	r3, r3, #10
 80021a0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021a6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021a8:	693b      	ldr	r3, [r7, #16]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b2:	2208      	movs	r2, #8
 80021b4:	409a      	lsls	r2, r3
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d01a      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f003 0304 	and.w	r3, r3, #4
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d013      	beq.n	80021f4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	681a      	ldr	r2, [r3, #0]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0204 	bic.w	r2, r2, #4
 80021da:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	2208      	movs	r2, #8
 80021e2:	409a      	lsls	r2, r3
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021ec:	f043 0201 	orr.w	r2, r3, #1
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021f8:	2201      	movs	r2, #1
 80021fa:	409a      	lsls	r2, r3
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d012      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	695b      	ldr	r3, [r3, #20]
 800220a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00b      	beq.n	800222a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002216:	2201      	movs	r2, #1
 8002218:	409a      	lsls	r2, r3
 800221a:	693b      	ldr	r3, [r7, #16]
 800221c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002222:	f043 0202 	orr.w	r2, r3, #2
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222e:	2204      	movs	r2, #4
 8002230:	409a      	lsls	r2, r3
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	4013      	ands	r3, r2
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d00b      	beq.n	8002260 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800224c:	2204      	movs	r2, #4
 800224e:	409a      	lsls	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002258:	f043 0204 	orr.w	r2, r3, #4
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002264:	2210      	movs	r2, #16
 8002266:	409a      	lsls	r2, r3
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	4013      	ands	r3, r2
 800226c:	2b00      	cmp	r3, #0
 800226e:	d043      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	f003 0308 	and.w	r3, r3, #8
 800227a:	2b00      	cmp	r3, #0
 800227c:	d03c      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002282:	2210      	movs	r2, #16
 8002284:	409a      	lsls	r2, r3
 8002286:	693b      	ldr	r3, [r7, #16]
 8002288:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002294:	2b00      	cmp	r3, #0
 8002296:	d018      	beq.n	80022ca <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d108      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d024      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	6878      	ldr	r0, [r7, #4]
 80022b4:	4798      	blx	r3
 80022b6:	e01f      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d01b      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	4798      	blx	r3
 80022c8:	e016      	b.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d107      	bne.n	80022e8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	681a      	ldr	r2, [r3, #0]
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f022 0208 	bic.w	r2, r2, #8
 80022e6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d003      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	6878      	ldr	r0, [r7, #4]
 80022f6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022fc:	2220      	movs	r2, #32
 80022fe:	409a      	lsls	r2, r3
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	4013      	ands	r3, r2
 8002304:	2b00      	cmp	r3, #0
 8002306:	f000 808f 	beq.w	8002428 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f003 0310 	and.w	r3, r3, #16
 8002314:	2b00      	cmp	r3, #0
 8002316:	f000 8087 	beq.w	8002428 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800231e:	2220      	movs	r2, #32
 8002320:	409a      	lsls	r2, r3
 8002322:	693b      	ldr	r3, [r7, #16]
 8002324:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800232c:	b2db      	uxtb	r3, r3
 800232e:	2b05      	cmp	r3, #5
 8002330:	d136      	bne.n	80023a0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681a      	ldr	r2, [r3, #0]
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f022 0216 	bic.w	r2, r2, #22
 8002340:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	695a      	ldr	r2, [r3, #20]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002350:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002356:	2b00      	cmp	r3, #0
 8002358:	d103      	bne.n	8002362 <HAL_DMA_IRQHandler+0x1da>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800235e:	2b00      	cmp	r3, #0
 8002360:	d007      	beq.n	8002372 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	681a      	ldr	r2, [r3, #0]
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f022 0208 	bic.w	r2, r2, #8
 8002370:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002376:	223f      	movs	r2, #63	; 0x3f
 8002378:	409a      	lsls	r2, r3
 800237a:	693b      	ldr	r3, [r7, #16]
 800237c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	2201      	movs	r2, #1
 8002382:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2200      	movs	r2, #0
 800238a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002392:	2b00      	cmp	r3, #0
 8002394:	d07e      	beq.n	8002494 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	4798      	blx	r3
        }
        return;
 800239e:	e079      	b.n	8002494 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d01d      	beq.n	80023ea <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d10d      	bne.n	80023d8 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d031      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	6878      	ldr	r0, [r7, #4]
 80023ca:	4798      	blx	r3
 80023cc:	e02c      	b.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
 80023ce:	bf00      	nop
 80023d0:	20000010 	.word	0x20000010
 80023d4:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d023      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	4798      	blx	r3
 80023e8:	e01e      	b.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10f      	bne.n	8002418 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	681a      	ldr	r2, [r3, #0]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2201      	movs	r2, #1
 800240c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2200      	movs	r2, #0
 8002414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800241c:	2b00      	cmp	r3, #0
 800241e:	d003      	beq.n	8002428 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800242c:	2b00      	cmp	r3, #0
 800242e:	d032      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	2b00      	cmp	r3, #0
 800243a:	d022      	beq.n	8002482 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	2205      	movs	r2, #5
 8002440:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	681a      	ldr	r2, [r3, #0]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f022 0201 	bic.w	r2, r2, #1
 8002452:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	3301      	adds	r3, #1
 8002458:	60bb      	str	r3, [r7, #8]
 800245a:	697a      	ldr	r2, [r7, #20]
 800245c:	429a      	cmp	r2, r3
 800245e:	d307      	bcc.n	8002470 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0301 	and.w	r3, r3, #1
 800246a:	2b00      	cmp	r3, #0
 800246c:	d1f2      	bne.n	8002454 <HAL_DMA_IRQHandler+0x2cc>
 800246e:	e000      	b.n	8002472 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002470:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	2201      	movs	r2, #1
 8002476:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d005      	beq.n	8002496 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	4798      	blx	r3
 8002492:	e000      	b.n	8002496 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002494:	bf00      	nop
    }
  }
}
 8002496:	3718      	adds	r7, #24
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}

0800249c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800249c:	b480      	push	{r7}
 800249e:	b085      	sub	sp, #20
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	b2db      	uxtb	r3, r3
 80024aa:	3b10      	subs	r3, #16
 80024ac:	4a14      	ldr	r2, [pc, #80]	; (8002500 <DMA_CalcBaseAndBitshift+0x64>)
 80024ae:	fba2 2303 	umull	r2, r3, r2, r3
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024b6:	4a13      	ldr	r2, [pc, #76]	; (8002504 <DMA_CalcBaseAndBitshift+0x68>)
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	4413      	add	r3, r2
 80024bc:	781b      	ldrb	r3, [r3, #0]
 80024be:	461a      	mov	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2b03      	cmp	r3, #3
 80024c8:	d909      	bls.n	80024de <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024d2:	f023 0303 	bic.w	r3, r3, #3
 80024d6:	1d1a      	adds	r2, r3, #4
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	659a      	str	r2, [r3, #88]	; 0x58
 80024dc:	e007      	b.n	80024ee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024e6:	f023 0303 	bic.w	r3, r3, #3
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3714      	adds	r7, #20
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	aaaaaaab 	.word	0xaaaaaaab
 8002504:	0800563c 	.word	0x0800563c

08002508 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002508:	b480      	push	{r7}
 800250a:	b085      	sub	sp, #20
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002510:	2300      	movs	r3, #0
 8002512:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002518:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d11f      	bne.n	8002562 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002522:	68bb      	ldr	r3, [r7, #8]
 8002524:	2b03      	cmp	r3, #3
 8002526:	d856      	bhi.n	80025d6 <DMA_CheckFifoParam+0xce>
 8002528:	a201      	add	r2, pc, #4	; (adr r2, 8002530 <DMA_CheckFifoParam+0x28>)
 800252a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800252e:	bf00      	nop
 8002530:	08002541 	.word	0x08002541
 8002534:	08002553 	.word	0x08002553
 8002538:	08002541 	.word	0x08002541
 800253c:	080025d7 	.word	0x080025d7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002544:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002548:	2b00      	cmp	r3, #0
 800254a:	d046      	beq.n	80025da <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800254c:	2301      	movs	r3, #1
 800254e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002550:	e043      	b.n	80025da <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002556:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800255a:	d140      	bne.n	80025de <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002560:	e03d      	b.n	80025de <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	699b      	ldr	r3, [r3, #24]
 8002566:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800256a:	d121      	bne.n	80025b0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b03      	cmp	r3, #3
 8002570:	d837      	bhi.n	80025e2 <DMA_CheckFifoParam+0xda>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <DMA_CheckFifoParam+0x70>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	08002589 	.word	0x08002589
 800257c:	0800258f 	.word	0x0800258f
 8002580:	08002589 	.word	0x08002589
 8002584:	080025a1 	.word	0x080025a1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e030      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002592:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d025      	beq.n	80025e6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800259e:	e022      	b.n	80025e6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025a8:	d11f      	bne.n	80025ea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ae:	e01c      	b.n	80025ea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b0:	68bb      	ldr	r3, [r7, #8]
 80025b2:	2b02      	cmp	r3, #2
 80025b4:	d903      	bls.n	80025be <DMA_CheckFifoParam+0xb6>
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	2b03      	cmp	r3, #3
 80025ba:	d003      	beq.n	80025c4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025bc:	e018      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025be:	2301      	movs	r3, #1
 80025c0:	73fb      	strb	r3, [r7, #15]
      break;
 80025c2:	e015      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d00e      	beq.n	80025ee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d0:	2301      	movs	r3, #1
 80025d2:	73fb      	strb	r3, [r7, #15]
      break;
 80025d4:	e00b      	b.n	80025ee <DMA_CheckFifoParam+0xe6>
      break;
 80025d6:	bf00      	nop
 80025d8:	e00a      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025da:	bf00      	nop
 80025dc:	e008      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025de:	bf00      	nop
 80025e0:	e006      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e004      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e002      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;   
 80025ea:	bf00      	nop
 80025ec:	e000      	b.n	80025f0 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
    }
  } 
  
  return status; 
 80025f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025f2:	4618      	mov	r0, r3
 80025f4:	3714      	adds	r7, #20
 80025f6:	46bd      	mov	sp, r7
 80025f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fc:	4770      	bx	lr
 80025fe:	bf00      	nop

08002600 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002600:	b480      	push	{r7}
 8002602:	b089      	sub	sp, #36	; 0x24
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800260a:	2300      	movs	r3, #0
 800260c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002616:	2300      	movs	r3, #0
 8002618:	61fb      	str	r3, [r7, #28]
 800261a:	e159      	b.n	80028d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800261c:	2201      	movs	r2, #1
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	fa02 f303 	lsl.w	r3, r2, r3
 8002624:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	697a      	ldr	r2, [r7, #20]
 800262c:	4013      	ands	r3, r2
 800262e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002630:	693a      	ldr	r2, [r7, #16]
 8002632:	697b      	ldr	r3, [r7, #20]
 8002634:	429a      	cmp	r2, r3
 8002636:	f040 8148 	bne.w	80028ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	2b01      	cmp	r3, #1
 8002644:	d005      	beq.n	8002652 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800264e:	2b02      	cmp	r3, #2
 8002650:	d130      	bne.n	80026b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	689b      	ldr	r3, [r3, #8]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002658:	69fb      	ldr	r3, [r7, #28]
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	2203      	movs	r2, #3
 800265e:	fa02 f303 	lsl.w	r3, r2, r3
 8002662:	43db      	mvns	r3, r3
 8002664:	69ba      	ldr	r2, [r7, #24]
 8002666:	4013      	ands	r3, r2
 8002668:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	68da      	ldr	r2, [r3, #12]
 800266e:	69fb      	ldr	r3, [r7, #28]
 8002670:	005b      	lsls	r3, r3, #1
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	69ba      	ldr	r2, [r7, #24]
 8002678:	4313      	orrs	r3, r2
 800267a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002688:	2201      	movs	r2, #1
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	69ba      	ldr	r2, [r7, #24]
 8002694:	4013      	ands	r3, r2
 8002696:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	685b      	ldr	r3, [r3, #4]
 800269c:	091b      	lsrs	r3, r3, #4
 800269e:	f003 0201 	and.w	r2, r3, #1
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	fa02 f303 	lsl.w	r3, r2, r3
 80026a8:	69ba      	ldr	r2, [r7, #24]
 80026aa:	4313      	orrs	r3, r2
 80026ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f003 0303 	and.w	r3, r3, #3
 80026bc:	2b03      	cmp	r3, #3
 80026be:	d017      	beq.n	80026f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026c6:	69fb      	ldr	r3, [r7, #28]
 80026c8:	005b      	lsls	r3, r3, #1
 80026ca:	2203      	movs	r2, #3
 80026cc:	fa02 f303 	lsl.w	r3, r2, r3
 80026d0:	43db      	mvns	r3, r3
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	4013      	ands	r3, r2
 80026d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026d8:	683b      	ldr	r3, [r7, #0]
 80026da:	689a      	ldr	r2, [r3, #8]
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	005b      	lsls	r3, r3, #1
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	f003 0303 	and.w	r3, r3, #3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d123      	bne.n	8002744 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80026fc:	69fb      	ldr	r3, [r7, #28]
 80026fe:	08da      	lsrs	r2, r3, #3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	3208      	adds	r2, #8
 8002704:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	f003 0307 	and.w	r3, r3, #7
 8002710:	009b      	lsls	r3, r3, #2
 8002712:	220f      	movs	r2, #15
 8002714:	fa02 f303 	lsl.w	r3, r2, r3
 8002718:	43db      	mvns	r3, r3
 800271a:	69ba      	ldr	r2, [r7, #24]
 800271c:	4013      	ands	r3, r2
 800271e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	691a      	ldr	r2, [r3, #16]
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	f003 0307 	and.w	r3, r3, #7
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	fa02 f303 	lsl.w	r3, r2, r3
 8002730:	69ba      	ldr	r2, [r7, #24]
 8002732:	4313      	orrs	r3, r2
 8002734:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002736:	69fb      	ldr	r3, [r7, #28]
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	3208      	adds	r2, #8
 800273e:	69b9      	ldr	r1, [r7, #24]
 8002740:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800274a:	69fb      	ldr	r3, [r7, #28]
 800274c:	005b      	lsls	r3, r3, #1
 800274e:	2203      	movs	r2, #3
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	4013      	ands	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	685b      	ldr	r3, [r3, #4]
 8002760:	f003 0203 	and.w	r2, r3, #3
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	005b      	lsls	r3, r3, #1
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	69ba      	ldr	r2, [r7, #24]
 800276e:	4313      	orrs	r3, r2
 8002770:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002780:	2b00      	cmp	r3, #0
 8002782:	f000 80a2 	beq.w	80028ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002786:	2300      	movs	r3, #0
 8002788:	60fb      	str	r3, [r7, #12]
 800278a:	4b57      	ldr	r3, [pc, #348]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 800278c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278e:	4a56      	ldr	r2, [pc, #344]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 8002790:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002794:	6453      	str	r3, [r2, #68]	; 0x44
 8002796:	4b54      	ldr	r3, [pc, #336]	; (80028e8 <HAL_GPIO_Init+0x2e8>)
 8002798:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800279a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800279e:	60fb      	str	r3, [r7, #12]
 80027a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027a2:	4a52      	ldr	r2, [pc, #328]	; (80028ec <HAL_GPIO_Init+0x2ec>)
 80027a4:	69fb      	ldr	r3, [r7, #28]
 80027a6:	089b      	lsrs	r3, r3, #2
 80027a8:	3302      	adds	r3, #2
 80027aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	220f      	movs	r2, #15
 80027ba:	fa02 f303 	lsl.w	r3, r2, r3
 80027be:	43db      	mvns	r3, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4013      	ands	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a49      	ldr	r2, [pc, #292]	; (80028f0 <HAL_GPIO_Init+0x2f0>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d019      	beq.n	8002802 <HAL_GPIO_Init+0x202>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a48      	ldr	r2, [pc, #288]	; (80028f4 <HAL_GPIO_Init+0x2f4>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_GPIO_Init+0x1fe>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a47      	ldr	r2, [pc, #284]	; (80028f8 <HAL_GPIO_Init+0x2f8>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d00d      	beq.n	80027fa <HAL_GPIO_Init+0x1fa>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a46      	ldr	r2, [pc, #280]	; (80028fc <HAL_GPIO_Init+0x2fc>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d007      	beq.n	80027f6 <HAL_GPIO_Init+0x1f6>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a45      	ldr	r2, [pc, #276]	; (8002900 <HAL_GPIO_Init+0x300>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d101      	bne.n	80027f2 <HAL_GPIO_Init+0x1f2>
 80027ee:	2304      	movs	r3, #4
 80027f0:	e008      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027f2:	2307      	movs	r3, #7
 80027f4:	e006      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027f6:	2303      	movs	r3, #3
 80027f8:	e004      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027fa:	2302      	movs	r3, #2
 80027fc:	e002      	b.n	8002804 <HAL_GPIO_Init+0x204>
 80027fe:	2301      	movs	r3, #1
 8002800:	e000      	b.n	8002804 <HAL_GPIO_Init+0x204>
 8002802:	2300      	movs	r3, #0
 8002804:	69fa      	ldr	r2, [r7, #28]
 8002806:	f002 0203 	and.w	r2, r2, #3
 800280a:	0092      	lsls	r2, r2, #2
 800280c:	4093      	lsls	r3, r2
 800280e:	69ba      	ldr	r2, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002814:	4935      	ldr	r1, [pc, #212]	; (80028ec <HAL_GPIO_Init+0x2ec>)
 8002816:	69fb      	ldr	r3, [r7, #28]
 8002818:	089b      	lsrs	r3, r3, #2
 800281a:	3302      	adds	r3, #2
 800281c:	69ba      	ldr	r2, [r7, #24]
 800281e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002822:	4b38      	ldr	r3, [pc, #224]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	43db      	mvns	r3, r3
 800282c:	69ba      	ldr	r2, [r7, #24]
 800282e:	4013      	ands	r3, r2
 8002830:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	685b      	ldr	r3, [r3, #4]
 8002836:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800283e:	69ba      	ldr	r2, [r7, #24]
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002846:	4a2f      	ldr	r2, [pc, #188]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002848:	69bb      	ldr	r3, [r7, #24]
 800284a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800284c:	4b2d      	ldr	r3, [pc, #180]	; (8002904 <HAL_GPIO_Init+0x304>)
 800284e:	68db      	ldr	r3, [r3, #12]
 8002850:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	43db      	mvns	r3, r3
 8002856:	69ba      	ldr	r2, [r7, #24]
 8002858:	4013      	ands	r3, r2
 800285a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800285c:	683b      	ldr	r3, [r7, #0]
 800285e:	685b      	ldr	r3, [r3, #4]
 8002860:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d003      	beq.n	8002870 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002868:	69ba      	ldr	r2, [r7, #24]
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	4313      	orrs	r3, r2
 800286e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002870:	4a24      	ldr	r2, [pc, #144]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002872:	69bb      	ldr	r3, [r7, #24]
 8002874:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002876:	4b23      	ldr	r3, [pc, #140]	; (8002904 <HAL_GPIO_Init+0x304>)
 8002878:	685b      	ldr	r3, [r3, #4]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800289a:	4a1a      	ldr	r2, [pc, #104]	; (8002904 <HAL_GPIO_Init+0x304>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a0:	4b18      	ldr	r3, [pc, #96]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c4:	4a0f      	ldr	r2, [pc, #60]	; (8002904 <HAL_GPIO_Init+0x304>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	3301      	adds	r3, #1
 80028ce:	61fb      	str	r3, [r7, #28]
 80028d0:	69fb      	ldr	r3, [r7, #28]
 80028d2:	2b0f      	cmp	r3, #15
 80028d4:	f67f aea2 	bls.w	800261c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028d8:	bf00      	nop
 80028da:	bf00      	nop
 80028dc:	3724      	adds	r7, #36	; 0x24
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40013800 	.word	0x40013800
 80028f0:	40020000 	.word	0x40020000
 80028f4:	40020400 	.word	0x40020400
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020c00 	.word	0x40020c00
 8002900:	40021000 	.word	0x40021000
 8002904:	40013c00 	.word	0x40013c00

08002908 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002908:	b480      	push	{r7}
 800290a:	b085      	sub	sp, #20
 800290c:	af00      	add	r7, sp, #0
 800290e:	6078      	str	r0, [r7, #4]
 8002910:	460b      	mov	r3, r1
 8002912:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	691a      	ldr	r2, [r3, #16]
 8002918:	887b      	ldrh	r3, [r7, #2]
 800291a:	4013      	ands	r3, r2
 800291c:	2b00      	cmp	r3, #0
 800291e:	d002      	beq.n	8002926 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002920:	2301      	movs	r3, #1
 8002922:	73fb      	strb	r3, [r7, #15]
 8002924:	e001      	b.n	800292a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002926:	2300      	movs	r3, #0
 8002928:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800292a:	7bfb      	ldrb	r3, [r7, #15]
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr

08002938 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002938:	b480      	push	{r7}
 800293a:	b083      	sub	sp, #12
 800293c:	af00      	add	r7, sp, #0
 800293e:	6078      	str	r0, [r7, #4]
 8002940:	460b      	mov	r3, r1
 8002942:	807b      	strh	r3, [r7, #2]
 8002944:	4613      	mov	r3, r2
 8002946:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002948:	787b      	ldrb	r3, [r7, #1]
 800294a:	2b00      	cmp	r3, #0
 800294c:	d003      	beq.n	8002956 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800294e:	887a      	ldrh	r2, [r7, #2]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002954:	e003      	b.n	800295e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002956:	887b      	ldrh	r3, [r7, #2]
 8002958:	041a      	lsls	r2, r3, #16
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	619a      	str	r2, [r3, #24]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr
	...

0800296c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800296c:	b580      	push	{r7, lr}
 800296e:	b086      	sub	sp, #24
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d101      	bne.n	800297e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800297a:	2301      	movs	r3, #1
 800297c:	e267      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0301 	and.w	r3, r3, #1
 8002986:	2b00      	cmp	r3, #0
 8002988:	d075      	beq.n	8002a76 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800298a:	4b88      	ldr	r3, [pc, #544]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
 8002992:	2b04      	cmp	r3, #4
 8002994:	d00c      	beq.n	80029b0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002996:	4b85      	ldr	r3, [pc, #532]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002998:	689b      	ldr	r3, [r3, #8]
 800299a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800299e:	2b08      	cmp	r3, #8
 80029a0:	d112      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80029a2:	4b82      	ldr	r3, [pc, #520]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80029aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80029ae:	d10b      	bne.n	80029c8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029b0:	4b7e      	ldr	r3, [pc, #504]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d05b      	beq.n	8002a74 <HAL_RCC_OscConfig+0x108>
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	685b      	ldr	r3, [r3, #4]
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d157      	bne.n	8002a74 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80029c4:	2301      	movs	r3, #1
 80029c6:	e242      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029d0:	d106      	bne.n	80029e0 <HAL_RCC_OscConfig+0x74>
 80029d2:	4b76      	ldr	r3, [pc, #472]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a75      	ldr	r2, [pc, #468]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029dc:	6013      	str	r3, [r2, #0]
 80029de:	e01d      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029e8:	d10c      	bne.n	8002a04 <HAL_RCC_OscConfig+0x98>
 80029ea:	4b70      	ldr	r3, [pc, #448]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a6f      	ldr	r2, [pc, #444]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029f4:	6013      	str	r3, [r2, #0]
 80029f6:	4b6d      	ldr	r3, [pc, #436]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	4a6c      	ldr	r2, [pc, #432]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 80029fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002a00:	6013      	str	r3, [r2, #0]
 8002a02:	e00b      	b.n	8002a1c <HAL_RCC_OscConfig+0xb0>
 8002a04:	4b69      	ldr	r3, [pc, #420]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	4a68      	ldr	r2, [pc, #416]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a0e:	6013      	str	r3, [r2, #0]
 8002a10:	4b66      	ldr	r3, [pc, #408]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	4a65      	ldr	r2, [pc, #404]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a16:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a1a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	685b      	ldr	r3, [r3, #4]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d013      	beq.n	8002a4c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff f99e 	bl	8001d64 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff f99a 	bl	8001d64 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e207      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a3e:	4b5b      	ldr	r3, [pc, #364]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d0f0      	beq.n	8002a2c <HAL_RCC_OscConfig+0xc0>
 8002a4a:	e014      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a4c:	f7ff f98a 	bl	8001d64 <HAL_GetTick>
 8002a50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a52:	e008      	b.n	8002a66 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a54:	f7ff f986 	bl	8001d64 <HAL_GetTick>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	693b      	ldr	r3, [r7, #16]
 8002a5c:	1ad3      	subs	r3, r2, r3
 8002a5e:	2b64      	cmp	r3, #100	; 0x64
 8002a60:	d901      	bls.n	8002a66 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a62:	2303      	movs	r3, #3
 8002a64:	e1f3      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a66:	4b51      	ldr	r3, [pc, #324]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d1f0      	bne.n	8002a54 <HAL_RCC_OscConfig+0xe8>
 8002a72:	e000      	b.n	8002a76 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f003 0302 	and.w	r3, r3, #2
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d063      	beq.n	8002b4a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a82:	4b4a      	ldr	r3, [pc, #296]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	f003 030c 	and.w	r3, r3, #12
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00b      	beq.n	8002aa6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a8e:	4b47      	ldr	r3, [pc, #284]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a96:	2b08      	cmp	r3, #8
 8002a98:	d11c      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a9a:	4b44      	ldr	r3, [pc, #272]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002a9c:	685b      	ldr	r3, [r3, #4]
 8002a9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d116      	bne.n	8002ad4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aa6:	4b41      	ldr	r3, [pc, #260]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0302 	and.w	r3, r3, #2
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d005      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	68db      	ldr	r3, [r3, #12]
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d001      	beq.n	8002abe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	e1c7      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abe:	4b3b      	ldr	r3, [pc, #236]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	4937      	ldr	r1, [pc, #220]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ad2:	e03a      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	68db      	ldr	r3, [r3, #12]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d020      	beq.n	8002b1e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002adc:	4b34      	ldr	r3, [pc, #208]	; (8002bb0 <HAL_RCC_OscConfig+0x244>)
 8002ade:	2201      	movs	r2, #1
 8002ae0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ae2:	f7ff f93f 	bl	8001d64 <HAL_GetTick>
 8002ae6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae8:	e008      	b.n	8002afc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002aea:	f7ff f93b 	bl	8001d64 <HAL_GetTick>
 8002aee:	4602      	mov	r2, r0
 8002af0:	693b      	ldr	r3, [r7, #16]
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b02      	cmp	r3, #2
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e1a8      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002afc:	4b2b      	ldr	r3, [pc, #172]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f003 0302 	and.w	r3, r3, #2
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0f0      	beq.n	8002aea <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b08:	4b28      	ldr	r3, [pc, #160]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	00db      	lsls	r3, r3, #3
 8002b16:	4925      	ldr	r1, [pc, #148]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	600b      	str	r3, [r1, #0]
 8002b1c:	e015      	b.n	8002b4a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002b1e:	4b24      	ldr	r3, [pc, #144]	; (8002bb0 <HAL_RCC_OscConfig+0x244>)
 8002b20:	2200      	movs	r2, #0
 8002b22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b24:	f7ff f91e 	bl	8001d64 <HAL_GetTick>
 8002b28:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b2a:	e008      	b.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b2c:	f7ff f91a 	bl	8001d64 <HAL_GetTick>
 8002b30:	4602      	mov	r2, r0
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	2b02      	cmp	r3, #2
 8002b38:	d901      	bls.n	8002b3e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b3a:	2303      	movs	r3, #3
 8002b3c:	e187      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b3e:	4b1b      	ldr	r3, [pc, #108]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1f0      	bne.n	8002b2c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d036      	beq.n	8002bc4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d016      	beq.n	8002b8c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b5e:	4b15      	ldr	r3, [pc, #84]	; (8002bb4 <HAL_RCC_OscConfig+0x248>)
 8002b60:	2201      	movs	r2, #1
 8002b62:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b64:	f7ff f8fe 	bl	8001d64 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b6c:	f7ff f8fa 	bl	8001d64 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e167      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b7e:	4b0b      	ldr	r3, [pc, #44]	; (8002bac <HAL_RCC_OscConfig+0x240>)
 8002b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d0f0      	beq.n	8002b6c <HAL_RCC_OscConfig+0x200>
 8002b8a:	e01b      	b.n	8002bc4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b8c:	4b09      	ldr	r3, [pc, #36]	; (8002bb4 <HAL_RCC_OscConfig+0x248>)
 8002b8e:	2200      	movs	r2, #0
 8002b90:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b92:	f7ff f8e7 	bl	8001d64 <HAL_GetTick>
 8002b96:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b98:	e00e      	b.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b9a:	f7ff f8e3 	bl	8001d64 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b02      	cmp	r3, #2
 8002ba6:	d907      	bls.n	8002bb8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e150      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
 8002bac:	40023800 	.word	0x40023800
 8002bb0:	42470000 	.word	0x42470000
 8002bb4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002bb8:	4b88      	ldr	r3, [pc, #544]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002bbc:	f003 0302 	and.w	r3, r3, #2
 8002bc0:	2b00      	cmp	r3, #0
 8002bc2:	d1ea      	bne.n	8002b9a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	f000 8097 	beq.w	8002d00 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bd6:	4b81      	ldr	r3, [pc, #516]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10f      	bne.n	8002c02 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60bb      	str	r3, [r7, #8]
 8002be6:	4b7d      	ldr	r3, [pc, #500]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a7c      	ldr	r2, [pc, #496]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b7a      	ldr	r3, [pc, #488]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bfa:	60bb      	str	r3, [r7, #8]
 8002bfc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c02:	4b77      	ldr	r3, [pc, #476]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d118      	bne.n	8002c40 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c0e:	4b74      	ldr	r3, [pc, #464]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	4a73      	ldr	r2, [pc, #460]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c14:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c18:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002c1a:	f7ff f8a3 	bl	8001d64 <HAL_GetTick>
 8002c1e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c20:	e008      	b.n	8002c34 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c22:	f7ff f89f 	bl	8001d64 <HAL_GetTick>
 8002c26:	4602      	mov	r2, r0
 8002c28:	693b      	ldr	r3, [r7, #16]
 8002c2a:	1ad3      	subs	r3, r2, r3
 8002c2c:	2b02      	cmp	r3, #2
 8002c2e:	d901      	bls.n	8002c34 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c30:	2303      	movs	r3, #3
 8002c32:	e10c      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c34:	4b6a      	ldr	r3, [pc, #424]	; (8002de0 <HAL_RCC_OscConfig+0x474>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d0f0      	beq.n	8002c22 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	2b01      	cmp	r3, #1
 8002c46:	d106      	bne.n	8002c56 <HAL_RCC_OscConfig+0x2ea>
 8002c48:	4b64      	ldr	r3, [pc, #400]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c4c:	4a63      	ldr	r2, [pc, #396]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c4e:	f043 0301 	orr.w	r3, r3, #1
 8002c52:	6713      	str	r3, [r2, #112]	; 0x70
 8002c54:	e01c      	b.n	8002c90 <HAL_RCC_OscConfig+0x324>
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	689b      	ldr	r3, [r3, #8]
 8002c5a:	2b05      	cmp	r3, #5
 8002c5c:	d10c      	bne.n	8002c78 <HAL_RCC_OscConfig+0x30c>
 8002c5e:	4b5f      	ldr	r3, [pc, #380]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a5e      	ldr	r2, [pc, #376]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c64:	f043 0304 	orr.w	r3, r3, #4
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
 8002c6a:	4b5c      	ldr	r3, [pc, #368]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a5b      	ldr	r2, [pc, #364]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c70:	f043 0301 	orr.w	r3, r3, #1
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70
 8002c76:	e00b      	b.n	8002c90 <HAL_RCC_OscConfig+0x324>
 8002c78:	4b58      	ldr	r3, [pc, #352]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c7c:	4a57      	ldr	r2, [pc, #348]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c7e:	f023 0301 	bic.w	r3, r3, #1
 8002c82:	6713      	str	r3, [r2, #112]	; 0x70
 8002c84:	4b55      	ldr	r3, [pc, #340]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c88:	4a54      	ldr	r2, [pc, #336]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002c8a:	f023 0304 	bic.w	r3, r3, #4
 8002c8e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d015      	beq.n	8002cc4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c98:	f7ff f864 	bl	8001d64 <HAL_GetTick>
 8002c9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c9e:	e00a      	b.n	8002cb6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7ff f860 	bl	8001d64 <HAL_GetTick>
 8002ca4:	4602      	mov	r2, r0
 8002ca6:	693b      	ldr	r3, [r7, #16]
 8002ca8:	1ad3      	subs	r3, r2, r3
 8002caa:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cae:	4293      	cmp	r3, r2
 8002cb0:	d901      	bls.n	8002cb6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002cb2:	2303      	movs	r3, #3
 8002cb4:	e0cb      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002cb6:	4b49      	ldr	r3, [pc, #292]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002cb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cba:	f003 0302 	and.w	r3, r3, #2
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d0ee      	beq.n	8002ca0 <HAL_RCC_OscConfig+0x334>
 8002cc2:	e014      	b.n	8002cee <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cc4:	f7ff f84e 	bl	8001d64 <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cca:	e00a      	b.n	8002ce2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ccc:	f7ff f84a 	bl	8001d64 <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cda:	4293      	cmp	r3, r2
 8002cdc:	d901      	bls.n	8002ce2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e0b5      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ce2:	4b3e      	ldr	r3, [pc, #248]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002ce4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ce6:	f003 0302 	and.w	r3, r3, #2
 8002cea:	2b00      	cmp	r3, #0
 8002cec:	d1ee      	bne.n	8002ccc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cee:	7dfb      	ldrb	r3, [r7, #23]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d105      	bne.n	8002d00 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002cf4:	4b39      	ldr	r3, [pc, #228]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002cfa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	699b      	ldr	r3, [r3, #24]
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 80a1 	beq.w	8002e4c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	f003 030c 	and.w	r3, r3, #12
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d05c      	beq.n	8002dd0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d141      	bne.n	8002da2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d1e:	4b31      	ldr	r3, [pc, #196]	; (8002de4 <HAL_RCC_OscConfig+0x478>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d24:	f7ff f81e 	bl	8001d64 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d2c:	f7ff f81a 	bl	8001d64 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e087      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d3e:	4b27      	ldr	r3, [pc, #156]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d1f0      	bne.n	8002d2c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	69da      	ldr	r2, [r3, #28]
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	6a1b      	ldr	r3, [r3, #32]
 8002d52:	431a      	orrs	r2, r3
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d58:	019b      	lsls	r3, r3, #6
 8002d5a:	431a      	orrs	r2, r3
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d60:	085b      	lsrs	r3, r3, #1
 8002d62:	3b01      	subs	r3, #1
 8002d64:	041b      	lsls	r3, r3, #16
 8002d66:	431a      	orrs	r2, r3
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	061b      	lsls	r3, r3, #24
 8002d6e:	491b      	ldr	r1, [pc, #108]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d74:	4b1b      	ldr	r3, [pc, #108]	; (8002de4 <HAL_RCC_OscConfig+0x478>)
 8002d76:	2201      	movs	r2, #1
 8002d78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d7a:	f7fe fff3 	bl	8001d64 <HAL_GetTick>
 8002d7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d80:	e008      	b.n	8002d94 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d82:	f7fe ffef 	bl	8001d64 <HAL_GetTick>
 8002d86:	4602      	mov	r2, r0
 8002d88:	693b      	ldr	r3, [r7, #16]
 8002d8a:	1ad3      	subs	r3, r2, r3
 8002d8c:	2b02      	cmp	r3, #2
 8002d8e:	d901      	bls.n	8002d94 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d90:	2303      	movs	r3, #3
 8002d92:	e05c      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d94:	4b11      	ldr	r3, [pc, #68]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d0f0      	beq.n	8002d82 <HAL_RCC_OscConfig+0x416>
 8002da0:	e054      	b.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002da2:	4b10      	ldr	r3, [pc, #64]	; (8002de4 <HAL_RCC_OscConfig+0x478>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7fe ffdc 	bl	8001d64 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002db0:	f7fe ffd8 	bl	8001d64 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e045      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dc2:	4b06      	ldr	r3, [pc, #24]	; (8002ddc <HAL_RCC_OscConfig+0x470>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x444>
 8002dce:	e03d      	b.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	699b      	ldr	r3, [r3, #24]
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d107      	bne.n	8002de8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e038      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	40007000 	.word	0x40007000
 8002de4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002de8:	4b1b      	ldr	r3, [pc, #108]	; (8002e58 <HAL_RCC_OscConfig+0x4ec>)
 8002dea:	685b      	ldr	r3, [r3, #4]
 8002dec:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	2b01      	cmp	r3, #1
 8002df4:	d028      	beq.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e00:	429a      	cmp	r2, r3
 8002e02:	d121      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d11a      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e12:	68fa      	ldr	r2, [r7, #12]
 8002e14:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002e18:	4013      	ands	r3, r2
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002e1e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002e20:	4293      	cmp	r3, r2
 8002e22:	d111      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e2e:	085b      	lsrs	r3, r3, #1
 8002e30:	3b01      	subs	r3, #1
 8002e32:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d107      	bne.n	8002e48 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e42:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d001      	beq.n	8002e4c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e48:	2301      	movs	r3, #1
 8002e4a:	e000      	b.n	8002e4e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3718      	adds	r7, #24
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	bf00      	nop
 8002e58:	40023800 	.word	0x40023800

08002e5c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e5c:	b580      	push	{r7, lr}
 8002e5e:	b084      	sub	sp, #16
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	6078      	str	r0, [r7, #4]
 8002e64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d101      	bne.n	8002e70 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0cc      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e70:	4b68      	ldr	r3, [pc, #416]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0307 	and.w	r3, r3, #7
 8002e78:	683a      	ldr	r2, [r7, #0]
 8002e7a:	429a      	cmp	r2, r3
 8002e7c:	d90c      	bls.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e7e:	4b65      	ldr	r3, [pc, #404]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e86:	4b63      	ldr	r3, [pc, #396]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	683a      	ldr	r2, [r7, #0]
 8002e90:	429a      	cmp	r2, r3
 8002e92:	d001      	beq.n	8002e98 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e94:	2301      	movs	r3, #1
 8002e96:	e0b8      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d020      	beq.n	8002ee6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f003 0304 	and.w	r3, r3, #4
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d005      	beq.n	8002ebc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002eb0:	4b59      	ldr	r3, [pc, #356]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb2:	689b      	ldr	r3, [r3, #8]
 8002eb4:	4a58      	ldr	r2, [pc, #352]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eb6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002eba:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0308 	and.w	r3, r3, #8
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d005      	beq.n	8002ed4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ec8:	4b53      	ldr	r3, [pc, #332]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002eca:	689b      	ldr	r3, [r3, #8]
 8002ecc:	4a52      	ldr	r2, [pc, #328]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ece:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002ed2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ed4:	4b50      	ldr	r3, [pc, #320]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed6:	689b      	ldr	r3, [r3, #8]
 8002ed8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	494d      	ldr	r1, [pc, #308]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002ee2:	4313      	orrs	r3, r2
 8002ee4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f003 0301 	and.w	r3, r3, #1
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d044      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	685b      	ldr	r3, [r3, #4]
 8002ef6:	2b01      	cmp	r3, #1
 8002ef8:	d107      	bne.n	8002f0a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efa:	4b47      	ldr	r3, [pc, #284]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d119      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f06:	2301      	movs	r3, #1
 8002f08:	e07f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	685b      	ldr	r3, [r3, #4]
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d003      	beq.n	8002f1a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002f16:	2b03      	cmp	r3, #3
 8002f18:	d107      	bne.n	8002f2a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f1a:	4b3f      	ldr	r3, [pc, #252]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d109      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e06f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f2a:	4b3b      	ldr	r3, [pc, #236]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e067      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f3a:	4b37      	ldr	r3, [pc, #220]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f3c:	689b      	ldr	r3, [r3, #8]
 8002f3e:	f023 0203 	bic.w	r2, r3, #3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	685b      	ldr	r3, [r3, #4]
 8002f46:	4934      	ldr	r1, [pc, #208]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f4c:	f7fe ff0a 	bl	8001d64 <HAL_GetTick>
 8002f50:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f52:	e00a      	b.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f54:	f7fe ff06 	bl	8001d64 <HAL_GetTick>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f62:	4293      	cmp	r3, r2
 8002f64:	d901      	bls.n	8002f6a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e04f      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f6a:	4b2b      	ldr	r3, [pc, #172]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f003 020c 	and.w	r2, r3, #12
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	429a      	cmp	r2, r3
 8002f7a:	d1eb      	bne.n	8002f54 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f7c:	4b25      	ldr	r3, [pc, #148]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0307 	and.w	r3, r3, #7
 8002f84:	683a      	ldr	r2, [r7, #0]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d20c      	bcs.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f8a:	4b22      	ldr	r3, [pc, #136]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	b2d2      	uxtb	r2, r2
 8002f90:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f92:	4b20      	ldr	r3, [pc, #128]	; (8003014 <HAL_RCC_ClockConfig+0x1b8>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	683a      	ldr	r2, [r7, #0]
 8002f9c:	429a      	cmp	r2, r3
 8002f9e:	d001      	beq.n	8002fa4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e032      	b.n	800300a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f003 0304 	and.w	r3, r3, #4
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d008      	beq.n	8002fc2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002fb0:	4b19      	ldr	r3, [pc, #100]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb2:	689b      	ldr	r3, [r3, #8]
 8002fb4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68db      	ldr	r3, [r3, #12]
 8002fbc:	4916      	ldr	r1, [pc, #88]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fbe:	4313      	orrs	r3, r2
 8002fc0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f003 0308 	and.w	r3, r3, #8
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d009      	beq.n	8002fe2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fce:	4b12      	ldr	r3, [pc, #72]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	691b      	ldr	r3, [r3, #16]
 8002fda:	00db      	lsls	r3, r3, #3
 8002fdc:	490e      	ldr	r1, [pc, #56]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fde:	4313      	orrs	r3, r2
 8002fe0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fe2:	f000 f821 	bl	8003028 <HAL_RCC_GetSysClockFreq>
 8002fe6:	4602      	mov	r2, r0
 8002fe8:	4b0b      	ldr	r3, [pc, #44]	; (8003018 <HAL_RCC_ClockConfig+0x1bc>)
 8002fea:	689b      	ldr	r3, [r3, #8]
 8002fec:	091b      	lsrs	r3, r3, #4
 8002fee:	f003 030f 	and.w	r3, r3, #15
 8002ff2:	490a      	ldr	r1, [pc, #40]	; (800301c <HAL_RCC_ClockConfig+0x1c0>)
 8002ff4:	5ccb      	ldrb	r3, [r1, r3]
 8002ff6:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffa:	4a09      	ldr	r2, [pc, #36]	; (8003020 <HAL_RCC_ClockConfig+0x1c4>)
 8002ffc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002ffe:	4b09      	ldr	r3, [pc, #36]	; (8003024 <HAL_RCC_ClockConfig+0x1c8>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4618      	mov	r0, r3
 8003004:	f7fe fe6a 	bl	8001cdc <HAL_InitTick>

  return HAL_OK;
 8003008:	2300      	movs	r3, #0
}
 800300a:	4618      	mov	r0, r3
 800300c:	3710      	adds	r7, #16
 800300e:	46bd      	mov	sp, r7
 8003010:	bd80      	pop	{r7, pc}
 8003012:	bf00      	nop
 8003014:	40023c00 	.word	0x40023c00
 8003018:	40023800 	.word	0x40023800
 800301c:	0800562c 	.word	0x0800562c
 8003020:	20000010 	.word	0x20000010
 8003024:	20000014 	.word	0x20000014

08003028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800302c:	b090      	sub	sp, #64	; 0x40
 800302e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003030:	2300      	movs	r3, #0
 8003032:	637b      	str	r3, [r7, #52]	; 0x34
 8003034:	2300      	movs	r3, #0
 8003036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003038:	2300      	movs	r3, #0
 800303a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800303c:	2300      	movs	r3, #0
 800303e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003040:	4b59      	ldr	r3, [pc, #356]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	f003 030c 	and.w	r3, r3, #12
 8003048:	2b08      	cmp	r3, #8
 800304a:	d00d      	beq.n	8003068 <HAL_RCC_GetSysClockFreq+0x40>
 800304c:	2b08      	cmp	r3, #8
 800304e:	f200 80a1 	bhi.w	8003194 <HAL_RCC_GetSysClockFreq+0x16c>
 8003052:	2b00      	cmp	r3, #0
 8003054:	d002      	beq.n	800305c <HAL_RCC_GetSysClockFreq+0x34>
 8003056:	2b04      	cmp	r3, #4
 8003058:	d003      	beq.n	8003062 <HAL_RCC_GetSysClockFreq+0x3a>
 800305a:	e09b      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800305c:	4b53      	ldr	r3, [pc, #332]	; (80031ac <HAL_RCC_GetSysClockFreq+0x184>)
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003060:	e09b      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003062:	4b53      	ldr	r3, [pc, #332]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003064:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003066:	e098      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003068:	4b4f      	ldr	r3, [pc, #316]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003070:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003072:	4b4d      	ldr	r3, [pc, #308]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800307a:	2b00      	cmp	r3, #0
 800307c:	d028      	beq.n	80030d0 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800307e:	4b4a      	ldr	r3, [pc, #296]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	099b      	lsrs	r3, r3, #6
 8003084:	2200      	movs	r2, #0
 8003086:	623b      	str	r3, [r7, #32]
 8003088:	627a      	str	r2, [r7, #36]	; 0x24
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003090:	2100      	movs	r1, #0
 8003092:	4b47      	ldr	r3, [pc, #284]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x188>)
 8003094:	fb03 f201 	mul.w	r2, r3, r1
 8003098:	2300      	movs	r3, #0
 800309a:	fb00 f303 	mul.w	r3, r0, r3
 800309e:	4413      	add	r3, r2
 80030a0:	4a43      	ldr	r2, [pc, #268]	; (80031b0 <HAL_RCC_GetSysClockFreq+0x188>)
 80030a2:	fba0 1202 	umull	r1, r2, r0, r2
 80030a6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030a8:	460a      	mov	r2, r1
 80030aa:	62ba      	str	r2, [r7, #40]	; 0x28
 80030ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030ae:	4413      	add	r3, r2
 80030b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80030b4:	2200      	movs	r2, #0
 80030b6:	61bb      	str	r3, [r7, #24]
 80030b8:	61fa      	str	r2, [r7, #28]
 80030ba:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80030be:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80030c2:	f7fd f8e5 	bl	8000290 <__aeabi_uldivmod>
 80030c6:	4602      	mov	r2, r0
 80030c8:	460b      	mov	r3, r1
 80030ca:	4613      	mov	r3, r2
 80030cc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80030ce:	e053      	b.n	8003178 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030d0:	4b35      	ldr	r3, [pc, #212]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x180>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	099b      	lsrs	r3, r3, #6
 80030d6:	2200      	movs	r2, #0
 80030d8:	613b      	str	r3, [r7, #16]
 80030da:	617a      	str	r2, [r7, #20]
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80030e2:	f04f 0b00 	mov.w	fp, #0
 80030e6:	4652      	mov	r2, sl
 80030e8:	465b      	mov	r3, fp
 80030ea:	f04f 0000 	mov.w	r0, #0
 80030ee:	f04f 0100 	mov.w	r1, #0
 80030f2:	0159      	lsls	r1, r3, #5
 80030f4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80030f8:	0150      	lsls	r0, r2, #5
 80030fa:	4602      	mov	r2, r0
 80030fc:	460b      	mov	r3, r1
 80030fe:	ebb2 080a 	subs.w	r8, r2, sl
 8003102:	eb63 090b 	sbc.w	r9, r3, fp
 8003106:	f04f 0200 	mov.w	r2, #0
 800310a:	f04f 0300 	mov.w	r3, #0
 800310e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003112:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003116:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800311a:	ebb2 0408 	subs.w	r4, r2, r8
 800311e:	eb63 0509 	sbc.w	r5, r3, r9
 8003122:	f04f 0200 	mov.w	r2, #0
 8003126:	f04f 0300 	mov.w	r3, #0
 800312a:	00eb      	lsls	r3, r5, #3
 800312c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003130:	00e2      	lsls	r2, r4, #3
 8003132:	4614      	mov	r4, r2
 8003134:	461d      	mov	r5, r3
 8003136:	eb14 030a 	adds.w	r3, r4, sl
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	eb45 030b 	adc.w	r3, r5, fp
 8003140:	607b      	str	r3, [r7, #4]
 8003142:	f04f 0200 	mov.w	r2, #0
 8003146:	f04f 0300 	mov.w	r3, #0
 800314a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800314e:	4629      	mov	r1, r5
 8003150:	028b      	lsls	r3, r1, #10
 8003152:	4621      	mov	r1, r4
 8003154:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003158:	4621      	mov	r1, r4
 800315a:	028a      	lsls	r2, r1, #10
 800315c:	4610      	mov	r0, r2
 800315e:	4619      	mov	r1, r3
 8003160:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003162:	2200      	movs	r2, #0
 8003164:	60bb      	str	r3, [r7, #8]
 8003166:	60fa      	str	r2, [r7, #12]
 8003168:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800316c:	f7fd f890 	bl	8000290 <__aeabi_uldivmod>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4613      	mov	r3, r2
 8003176:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003178:	4b0b      	ldr	r3, [pc, #44]	; (80031a8 <HAL_RCC_GetSysClockFreq+0x180>)
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	0c1b      	lsrs	r3, r3, #16
 800317e:	f003 0303 	and.w	r3, r3, #3
 8003182:	3301      	adds	r3, #1
 8003184:	005b      	lsls	r3, r3, #1
 8003186:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003188:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800318a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800318c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003190:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003192:	e002      	b.n	800319a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003194:	4b05      	ldr	r3, [pc, #20]	; (80031ac <HAL_RCC_GetSysClockFreq+0x184>)
 8003196:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003198:	bf00      	nop
    }
  }
  return sysclockfreq;
 800319a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800319c:	4618      	mov	r0, r3
 800319e:	3740      	adds	r7, #64	; 0x40
 80031a0:	46bd      	mov	sp, r7
 80031a2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a6:	bf00      	nop
 80031a8:	40023800 	.word	0x40023800
 80031ac:	00f42400 	.word	0x00f42400
 80031b0:	016e3600 	.word	0x016e3600

080031b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031bc:	2300      	movs	r3, #0
 80031be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80031c0:	2300      	movs	r3, #0
 80031c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d105      	bne.n	80031dc <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d038      	beq.n	800324e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80031dc:	4b68      	ldr	r3, [pc, #416]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80031de:	2200      	movs	r2, #0
 80031e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80031e2:	f7fe fdbf 	bl	8001d64 <HAL_GetTick>
 80031e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031e8:	e008      	b.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80031ea:	f7fe fdbb 	bl	8001d64 <HAL_GetTick>
 80031ee:	4602      	mov	r2, r0
 80031f0:	697b      	ldr	r3, [r7, #20]
 80031f2:	1ad3      	subs	r3, r2, r3
 80031f4:	2b02      	cmp	r3, #2
 80031f6:	d901      	bls.n	80031fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80031f8:	2303      	movs	r3, #3
 80031fa:	e0bd      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80031fc:	4b61      	ldr	r3, [pc, #388]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d1f0      	bne.n	80031ea <HAL_RCCEx_PeriphCLKConfig+0x36>

#if defined(STM32F411xE)
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	685a      	ldr	r2, [r3, #4]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	019b      	lsls	r3, r3, #6
 8003212:	431a      	orrs	r2, r3
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	071b      	lsls	r3, r3, #28
 800321a:	495a      	ldr	r1, [pc, #360]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800321c:	4313      	orrs	r3, r2
 800321e:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003222:	4b57      	ldr	r3, [pc, #348]	; (8003380 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8003224:	2201      	movs	r2, #1
 8003226:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003228:	f7fe fd9c 	bl	8001d64 <HAL_GetTick>
 800322c:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800322e:	e008      	b.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x8e>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003230:	f7fe fd98 	bl	8001d64 <HAL_GetTick>
 8003234:	4602      	mov	r2, r0
 8003236:	697b      	ldr	r3, [r7, #20]
 8003238:	1ad3      	subs	r3, r2, r3
 800323a:	2b02      	cmp	r3, #2
 800323c:	d901      	bls.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x8e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800323e:	2303      	movs	r3, #3
 8003240:	e09a      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003242:	4b50      	ldr	r3, [pc, #320]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800324a:	2b00      	cmp	r3, #0
 800324c:	d0f0      	beq.n	8003230 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	f003 0302 	and.w	r3, r3, #2
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 8083 	beq.w	8003362 <HAL_RCCEx_PeriphCLKConfig+0x1ae>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800325c:	2300      	movs	r3, #0
 800325e:	60fb      	str	r3, [r7, #12]
 8003260:	4b48      	ldr	r3, [pc, #288]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003264:	4a47      	ldr	r2, [pc, #284]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800326a:	6413      	str	r3, [r2, #64]	; 0x40
 800326c:	4b45      	ldr	r3, [pc, #276]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003270:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a42      	ldr	r2, [pc, #264]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800327e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003282:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003284:	f7fe fd6e 	bl	8001d64 <HAL_GetTick>
 8003288:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 800328a:	e008      	b.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xea>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 800328c:	f7fe fd6a 	bl	8001d64 <HAL_GetTick>
 8003290:	4602      	mov	r2, r0
 8003292:	697b      	ldr	r3, [r7, #20]
 8003294:	1ad3      	subs	r3, r2, r3
 8003296:	2b02      	cmp	r3, #2
 8003298:	d901      	bls.n	800329e <HAL_RCCEx_PeriphCLKConfig+0xea>
      {
        return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e06c      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 800329e:	4b3a      	ldr	r3, [pc, #232]	; (8003388 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d0f0      	beq.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80032aa:	4b36      	ldr	r3, [pc, #216]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032b2:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d02f      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x166>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80032c2:	693a      	ldr	r2, [r7, #16]
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d028      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x166>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80032c8:	4b2e      	ldr	r3, [pc, #184]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80032d0:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80032d2:	4b2e      	ldr	r3, [pc, #184]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032d4:	2201      	movs	r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80032d8:	4b2c      	ldr	r3, [pc, #176]	; (800338c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80032da:	2200      	movs	r2, #0
 80032dc:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80032de:	4a29      	ldr	r2, [pc, #164]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80032e4:	4b27      	ldr	r3, [pc, #156]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032e8:	f003 0301 	and.w	r3, r3, #1
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	d114      	bne.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80032f0:	f7fe fd38 	bl	8001d64 <HAL_GetTick>
 80032f4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80032f6:	e00a      	b.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032f8:	f7fe fd34 	bl	8001d64 <HAL_GetTick>
 80032fc:	4602      	mov	r2, r0
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	1ad3      	subs	r3, r2, r3
 8003302:	f241 3288 	movw	r2, #5000	; 0x1388
 8003306:	4293      	cmp	r3, r2
 8003308:	d901      	bls.n	800330e <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 800330a:	2303      	movs	r3, #3
 800330c:	e034      	b.n	8003378 <HAL_RCCEx_PeriphCLKConfig+0x1c4>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800330e:	4b1d      	ldr	r3, [pc, #116]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003310:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003312:	f003 0302 	and.w	r3, r3, #2
 8003316:	2b00      	cmp	r3, #0
 8003318:	d0ee      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	691b      	ldr	r3, [r3, #16]
 800331e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003322:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003326:	d10d      	bne.n	8003344 <HAL_RCCEx_PeriphCLKConfig+0x190>
 8003328:	4b16      	ldr	r3, [pc, #88]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003338:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800333c:	4911      	ldr	r1, [pc, #68]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800333e:	4313      	orrs	r3, r2
 8003340:	608b      	str	r3, [r1, #8]
 8003342:	e005      	b.n	8003350 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 8003344:	4b0f      	ldr	r3, [pc, #60]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003346:	689b      	ldr	r3, [r3, #8]
 8003348:	4a0e      	ldr	r2, [pc, #56]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800334a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800334e:	6093      	str	r3, [r2, #8]
 8003350:	4b0c      	ldr	r3, [pc, #48]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003352:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	691b      	ldr	r3, [r3, #16]
 8003358:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800335c:	4909      	ldr	r1, [pc, #36]	; (8003384 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800335e:	4313      	orrs	r3, r2
 8003360:	670b      	str	r3, [r1, #112]	; 0x70
  }
#if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0308 	and.w	r3, r3, #8
 800336a:	2b00      	cmp	r3, #0
 800336c:	d003      	beq.n	8003376 <HAL_RCCEx_PeriphCLKConfig+0x1c2>
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	7d1a      	ldrb	r2, [r3, #20]
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <HAL_RCCEx_PeriphCLKConfig+0x1dc>)
 8003374:	601a      	str	r2, [r3, #0]
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003376:	2300      	movs	r3, #0
}
 8003378:	4618      	mov	r0, r3
 800337a:	3718      	adds	r7, #24
 800337c:	46bd      	mov	sp, r7
 800337e:	bd80      	pop	{r7, pc}
 8003380:	42470068 	.word	0x42470068
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
 800338c:	42470e40 	.word	0x42470e40
 8003390:	424711e0 	.word	0x424711e0

08003394 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003394:	b580      	push	{r7, lr}
 8003396:	b084      	sub	sp, #16
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d101      	bne.n	80033aa <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e066      	b.n	8003478 <HAL_RTC_Init+0xe4>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	7f5b      	ldrb	r3, [r3, #29]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d105      	bne.n	80033c0 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	2200      	movs	r2, #0
 80033b8:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f7fe f874 	bl	80014a8 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2202      	movs	r2, #2
 80033c4:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	22ca      	movs	r2, #202	; 0xca
 80033cc:	625a      	str	r2, [r3, #36]	; 0x24
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	2253      	movs	r2, #83	; 0x53
 80033d4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80033d6:	6878      	ldr	r0, [r7, #4]
 80033d8:	f000 fa45 	bl	8003866 <RTC_EnterInitMode>
 80033dc:	4603      	mov	r3, r0
 80033de:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80033e0:	7bfb      	ldrb	r3, [r7, #15]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d12c      	bne.n	8003440 <HAL_RTC_Init+0xac>
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	689b      	ldr	r3, [r3, #8]
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6812      	ldr	r2, [r2, #0]
 80033f0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033f4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033f8:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6899      	ldr	r1, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	685a      	ldr	r2, [r3, #4]
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	691b      	ldr	r3, [r3, #16]
 8003408:	431a      	orrs	r2, r3
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	695b      	ldr	r3, [r3, #20]
 800340e:	431a      	orrs	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	430a      	orrs	r2, r1
 8003416:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	687a      	ldr	r2, [r7, #4]
 800341e:	68d2      	ldr	r2, [r2, #12]
 8003420:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	6919      	ldr	r1, [r3, #16]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	041a      	lsls	r2, r3, #16
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 fa4c 	bl	80038d4 <RTC_ExitInitMode>
 800343c:	4603      	mov	r3, r0
 800343e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003440:	7bfb      	ldrb	r3, [r7, #15]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d113      	bne.n	800346e <HAL_RTC_Init+0xda>
  {
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003454:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6c19      	ldr	r1, [r3, #64]	; 0x40
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	699a      	ldr	r2, [r3, #24]
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	430a      	orrs	r2, r1
 8003466:	641a      	str	r2, [r3, #64]	; 0x40

    hrtc->State = HAL_RTC_STATE_READY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	22ff      	movs	r2, #255	; 0xff
 8003474:	625a      	str	r2, [r3, #36]	; 0x24

  return status;
 8003476:	7bfb      	ldrb	r3, [r7, #15]
}
 8003478:	4618      	mov	r0, r3
 800347a:	3710      	adds	r7, #16
 800347c:	46bd      	mov	sp, r7
 800347e:	bd80      	pop	{r7, pc}

08003480 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003480:	b590      	push	{r4, r7, lr}
 8003482:	b087      	sub	sp, #28
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	7f1b      	ldrb	r3, [r3, #28]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d101      	bne.n	800349c <HAL_RTC_SetTime+0x1c>
 8003498:	2302      	movs	r3, #2
 800349a:	e087      	b.n	80035ac <HAL_RTC_SetTime+0x12c>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2201      	movs	r2, #1
 80034a0:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2202      	movs	r2, #2
 80034a6:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d126      	bne.n	80034fc <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	689b      	ldr	r3, [r3, #8]
 80034b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d102      	bne.n	80034c2 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80034bc:	68bb      	ldr	r3, [r7, #8]
 80034be:	2200      	movs	r2, #0
 80034c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034c2:	68bb      	ldr	r3, [r7, #8]
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	4618      	mov	r0, r3
 80034c8:	f000 fa29 	bl	800391e <RTC_ByteToBcd2>
 80034cc:	4603      	mov	r3, r0
 80034ce:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034d0:	68bb      	ldr	r3, [r7, #8]
 80034d2:	785b      	ldrb	r3, [r3, #1]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f000 fa22 	bl	800391e <RTC_ByteToBcd2>
 80034da:	4603      	mov	r3, r0
 80034dc:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034de:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80034e0:	68bb      	ldr	r3, [r7, #8]
 80034e2:	789b      	ldrb	r3, [r3, #2]
 80034e4:	4618      	mov	r0, r3
 80034e6:	f000 fa1a 	bl	800391e <RTC_ByteToBcd2>
 80034ea:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80034ec:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80034f0:	68bb      	ldr	r3, [r7, #8]
 80034f2:	78db      	ldrb	r3, [r3, #3]
 80034f4:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80034f6:	4313      	orrs	r3, r2
 80034f8:	617b      	str	r3, [r7, #20]
 80034fa:	e018      	b.n	800352e <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	689b      	ldr	r3, [r3, #8]
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d102      	bne.n	8003510 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800350a:	68bb      	ldr	r3, [r7, #8]
 800350c:	2200      	movs	r2, #0
 800350e:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	781b      	ldrb	r3, [r3, #0]
 8003514:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003516:	68bb      	ldr	r3, [r7, #8]
 8003518:	785b      	ldrb	r3, [r3, #1]
 800351a:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800351c:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800351e:	68ba      	ldr	r2, [r7, #8]
 8003520:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8003522:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8003524:	68bb      	ldr	r3, [r7, #8]
 8003526:	78db      	ldrb	r3, [r3, #3]
 8003528:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800352a:	4313      	orrs	r3, r2
 800352c:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	22ca      	movs	r2, #202	; 0xca
 8003534:	625a      	str	r2, [r3, #36]	; 0x24
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2253      	movs	r2, #83	; 0x53
 800353c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 f991 	bl	8003866 <RTC_EnterInitMode>
 8003544:	4603      	mov	r3, r0
 8003546:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003548:	7cfb      	ldrb	r3, [r7, #19]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d120      	bne.n	8003590 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681a      	ldr	r2, [r3, #0]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 8003558:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 800355c:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	689a      	ldr	r2, [r3, #8]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800356c:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	6899      	ldr	r1, [r3, #8]
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	68da      	ldr	r2, [r3, #12]
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	691b      	ldr	r3, [r3, #16]
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	430a      	orrs	r2, r1
 8003584:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8003586:	68f8      	ldr	r0, [r7, #12]
 8003588:	f000 f9a4 	bl	80038d4 <RTC_ExitInitMode>
 800358c:	4603      	mov	r3, r0
 800358e:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d102      	bne.n	800359c <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2201      	movs	r2, #1
 800359a:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	22ff      	movs	r2, #255	; 0xff
 80035a2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	2200      	movs	r2, #0
 80035a8:	771a      	strb	r2, [r3, #28]

  return status;
 80035aa:	7cfb      	ldrb	r3, [r7, #19]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	371c      	adds	r7, #28
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd90      	pop	{r4, r7, pc}

080035b4 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	60f8      	str	r0, [r7, #12]
 80035bc:	60b9      	str	r1, [r7, #8]
 80035be:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035ca:	68bb      	ldr	r3, [r7, #8]
 80035cc:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80035e6:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80035ea:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	0c1b      	lsrs	r3, r3, #16
 80035f0:	b2db      	uxtb	r3, r3
 80035f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003614:	b2da      	uxtb	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	0d9b      	lsrs	r3, r3, #22
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 0301 	and.w	r3, r3, #1
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11a      	bne.n	8003666 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f98f 	bl	8003958 <RTC_Bcd2ToByte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f986 	bl	8003958 <RTC_Bcd2ToByte>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f97d 	bl	8003958 <RTC_Bcd2ToByte>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003670:	b590      	push	{r4, r7, lr}
 8003672:	b087      	sub	sp, #28
 8003674:	af00      	add	r7, sp, #0
 8003676:	60f8      	str	r0, [r7, #12]
 8003678:	60b9      	str	r1, [r7, #8]
 800367a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800367c:	2300      	movs	r3, #0
 800367e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	7f1b      	ldrb	r3, [r3, #28]
 8003684:	2b01      	cmp	r3, #1
 8003686:	d101      	bne.n	800368c <HAL_RTC_SetDate+0x1c>
 8003688:	2302      	movs	r3, #2
 800368a:	e071      	b.n	8003770 <HAL_RTC_SetDate+0x100>
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2201      	movs	r2, #1
 8003690:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2202      	movs	r2, #2
 8003696:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10e      	bne.n	80036bc <HAL_RTC_SetDate+0x4c>
 800369e:	68bb      	ldr	r3, [r7, #8]
 80036a0:	785b      	ldrb	r3, [r3, #1]
 80036a2:	f003 0310 	and.w	r3, r3, #16
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d008      	beq.n	80036bc <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80036aa:	68bb      	ldr	r3, [r7, #8]
 80036ac:	785b      	ldrb	r3, [r3, #1]
 80036ae:	f023 0310 	bic.w	r3, r3, #16
 80036b2:	b2db      	uxtb	r3, r3
 80036b4:	330a      	adds	r3, #10
 80036b6:	b2da      	uxtb	r2, r3
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d11c      	bne.n	80036fc <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	78db      	ldrb	r3, [r3, #3]
 80036c6:	4618      	mov	r0, r3
 80036c8:	f000 f929 	bl	800391e <RTC_ByteToBcd2>
 80036cc:	4603      	mov	r3, r0
 80036ce:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	785b      	ldrb	r3, [r3, #1]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f000 f922 	bl	800391e <RTC_ByteToBcd2>
 80036da:	4603      	mov	r3, r0
 80036dc:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036de:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	789b      	ldrb	r3, [r3, #2]
 80036e4:	4618      	mov	r0, r3
 80036e6:	f000 f91a 	bl	800391e <RTC_ByteToBcd2>
 80036ea:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80036ec:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80036f0:	68bb      	ldr	r3, [r7, #8]
 80036f2:	781b      	ldrb	r3, [r3, #0]
 80036f4:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80036f6:	4313      	orrs	r3, r2
 80036f8:	617b      	str	r3, [r7, #20]
 80036fa:	e00e      	b.n	800371a <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80036fc:	68bb      	ldr	r3, [r7, #8]
 80036fe:	78db      	ldrb	r3, [r3, #3]
 8003700:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8003702:	68bb      	ldr	r3, [r7, #8]
 8003704:	785b      	ldrb	r3, [r3, #1]
 8003706:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003708:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800370a:	68ba      	ldr	r2, [r7, #8]
 800370c:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800370e:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	22ca      	movs	r2, #202	; 0xca
 8003720:	625a      	str	r2, [r3, #36]	; 0x24
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	2253      	movs	r2, #83	; 0x53
 8003728:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 f89b 	bl	8003866 <RTC_EnterInitMode>
 8003730:	4603      	mov	r3, r0
 8003732:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8003734:	7cfb      	ldrb	r3, [r7, #19]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d10c      	bne.n	8003754 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681a      	ldr	r2, [r3, #0]
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003744:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003748:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800374a:	68f8      	ldr	r0, [r7, #12]
 800374c:	f000 f8c2 	bl	80038d4 <RTC_ExitInitMode>
 8003750:	4603      	mov	r3, r0
 8003752:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8003754:	7cfb      	ldrb	r3, [r7, #19]
 8003756:	2b00      	cmp	r3, #0
 8003758:	d102      	bne.n	8003760 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	2201      	movs	r2, #1
 800375e:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	22ff      	movs	r2, #255	; 0xff
 8003766:	625a      	str	r2, [r3, #36]	; 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	771a      	strb	r2, [r3, #28]

  return status;
 800376e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003770:	4618      	mov	r0, r3
 8003772:	371c      	adds	r7, #28
 8003774:	46bd      	mov	sp, r7
 8003776:	bd90      	pop	{r4, r7, pc}

08003778 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af00      	add	r7, sp, #0
 800377e:	60f8      	str	r0, [r7, #12]
 8003780:	60b9      	str	r1, [r7, #8]
 8003782:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8003784:	2300      	movs	r3, #0
 8003786:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8003792:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8003796:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003798:	697b      	ldr	r3, [r7, #20]
 800379a:	0c1b      	lsrs	r3, r3, #16
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	0a1b      	lsrs	r3, r3, #8
 80037a6:	b2db      	uxtb	r3, r3
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	b2da      	uxtb	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 80037b2:	697b      	ldr	r3, [r7, #20]
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80037ba:	b2da      	uxtb	r2, r3
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	0b5b      	lsrs	r3, r3, #13
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	f003 0307 	and.w	r3, r3, #7
 80037ca:	b2da      	uxtb	r2, r3
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d11a      	bne.n	800380c <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	78db      	ldrb	r3, [r3, #3]
 80037da:	4618      	mov	r0, r3
 80037dc:	f000 f8bc 	bl	8003958 <RTC_Bcd2ToByte>
 80037e0:	4603      	mov	r3, r0
 80037e2:	461a      	mov	r2, r3
 80037e4:	68bb      	ldr	r3, [r7, #8]
 80037e6:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	785b      	ldrb	r3, [r3, #1]
 80037ec:	4618      	mov	r0, r3
 80037ee:	f000 f8b3 	bl	8003958 <RTC_Bcd2ToByte>
 80037f2:	4603      	mov	r3, r0
 80037f4:	461a      	mov	r2, r3
 80037f6:	68bb      	ldr	r3, [r7, #8]
 80037f8:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80037fa:	68bb      	ldr	r3, [r7, #8]
 80037fc:	789b      	ldrb	r3, [r3, #2]
 80037fe:	4618      	mov	r0, r3
 8003800:	f000 f8aa 	bl	8003958 <RTC_Bcd2ToByte>
 8003804:	4603      	mov	r3, r0
 8003806:	461a      	mov	r2, r3
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3718      	adds	r7, #24
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}

08003816 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003816:	b580      	push	{r7, lr}
 8003818:	b084      	sub	sp, #16
 800381a:	af00      	add	r7, sp, #0
 800381c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800381e:	2300      	movs	r3, #0
 8003820:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag */
  hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	68da      	ldr	r2, [r3, #12]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003830:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003832:	f7fe fa97 	bl	8001d64 <HAL_GetTick>
 8003836:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8003838:	e009      	b.n	800384e <HAL_RTC_WaitForSynchro+0x38>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800383a:	f7fe fa93 	bl	8001d64 <HAL_GetTick>
 800383e:	4602      	mov	r2, r0
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	1ad3      	subs	r3, r2, r3
 8003844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003848:	d901      	bls.n	800384e <HAL_RTC_WaitForSynchro+0x38>
    {
      return HAL_TIMEOUT;
 800384a:	2303      	movs	r3, #3
 800384c:	e007      	b.n	800385e <HAL_RTC_WaitForSynchro+0x48>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	68db      	ldr	r3, [r3, #12]
 8003854:	f003 0320 	and.w	r3, r3, #32
 8003858:	2b00      	cmp	r3, #0
 800385a:	d0ee      	beq.n	800383a <HAL_RTC_WaitForSynchro+0x24>
    }
  }

  return HAL_OK;
 800385c:	2300      	movs	r3, #0
}
 800385e:	4618      	mov	r0, r3
 8003860:	3710      	adds	r7, #16
 8003862:	46bd      	mov	sp, r7
 8003864:	bd80      	pop	{r7, pc}

08003866 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003866:	b580      	push	{r7, lr}
 8003868:	b084      	sub	sp, #16
 800386a:	af00      	add	r7, sp, #0
 800386c:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800386e:	2300      	movs	r3, #0
 8003870:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8003872:	2300      	movs	r3, #0
 8003874:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d122      	bne.n	80038ca <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	68da      	ldr	r2, [r3, #12]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003892:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003894:	f7fe fa66 	bl	8001d64 <HAL_GetTick>
 8003898:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800389a:	e00c      	b.n	80038b6 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800389c:	f7fe fa62 	bl	8001d64 <HAL_GetTick>
 80038a0:	4602      	mov	r2, r0
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	1ad3      	subs	r3, r2, r3
 80038a6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038aa:	d904      	bls.n	80038b6 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2204      	movs	r2, #4
 80038b0:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 80038b2:	2301      	movs	r3, #1
 80038b4:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	68db      	ldr	r3, [r3, #12]
 80038bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d102      	bne.n	80038ca <RTC_EnterInitMode+0x64>
 80038c4:	7bfb      	ldrb	r3, [r7, #15]
 80038c6:	2b01      	cmp	r3, #1
 80038c8:	d1e8      	bne.n	800389c <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80038cc:	4618      	mov	r0, r3
 80038ce:	3710      	adds	r7, #16
 80038d0:	46bd      	mov	sp, r7
 80038d2:	bd80      	pop	{r7, pc}

080038d4 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80038d4:	b580      	push	{r7, lr}
 80038d6:	b084      	sub	sp, #16
 80038d8:	af00      	add	r7, sp, #0
 80038da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80038dc:	2300      	movs	r3, #0
 80038de:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68da      	ldr	r2, [r3, #12]
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038ee:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f003 0320 	and.w	r3, r3, #32
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d10a      	bne.n	8003914 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7ff ff89 	bl	8003816 <HAL_RTC_WaitForSynchro>
 8003904:	4603      	mov	r3, r0
 8003906:	2b00      	cmp	r3, #0
 8003908:	d004      	beq.n	8003914 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2204      	movs	r2, #4
 800390e:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003914:	7bfb      	ldrb	r3, [r7, #15]
}
 8003916:	4618      	mov	r0, r3
 8003918:	3710      	adds	r7, #16
 800391a:	46bd      	mov	sp, r7
 800391c:	bd80      	pop	{r7, pc}

0800391e <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800391e:	b480      	push	{r7}
 8003920:	b085      	sub	sp, #20
 8003922:	af00      	add	r7, sp, #0
 8003924:	4603      	mov	r3, r0
 8003926:	71fb      	strb	r3, [r7, #7]
  uint8_t bcdhigh = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	73fb      	strb	r3, [r7, #15]

  while (number >= 10U)
 800392c:	e005      	b.n	800393a <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800392e:	7bfb      	ldrb	r3, [r7, #15]
 8003930:	3301      	adds	r3, #1
 8003932:	73fb      	strb	r3, [r7, #15]
    number -= 10U;
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	3b0a      	subs	r3, #10
 8003938:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 800393a:	79fb      	ldrb	r3, [r7, #7]
 800393c:	2b09      	cmp	r3, #9
 800393e:	d8f6      	bhi.n	800392e <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8003940:	7bfb      	ldrb	r3, [r7, #15]
 8003942:	011b      	lsls	r3, r3, #4
 8003944:	b2da      	uxtb	r2, r3
 8003946:	79fb      	ldrb	r3, [r7, #7]
 8003948:	4313      	orrs	r3, r2
 800394a:	b2db      	uxtb	r3, r3
}
 800394c:	4618      	mov	r0, r3
 800394e:	3714      	adds	r7, #20
 8003950:	46bd      	mov	sp, r7
 8003952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003956:	4770      	bx	lr

08003958 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003958:	b480      	push	{r7}
 800395a:	b085      	sub	sp, #20
 800395c:	af00      	add	r7, sp, #0
 800395e:	4603      	mov	r3, r0
 8003960:	71fb      	strb	r3, [r7, #7]
  uint8_t tmp = 0U;
 8003962:	2300      	movs	r3, #0
 8003964:	73fb      	strb	r3, [r7, #15]
  tmp = ((uint8_t)(number & (uint8_t)0xF0) >> (uint8_t)0x4) * 10;
 8003966:	79fb      	ldrb	r3, [r7, #7]
 8003968:	091b      	lsrs	r3, r3, #4
 800396a:	b2db      	uxtb	r3, r3
 800396c:	461a      	mov	r2, r3
 800396e:	0092      	lsls	r2, r2, #2
 8003970:	4413      	add	r3, r2
 8003972:	005b      	lsls	r3, r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
  return (tmp + (number & (uint8_t)0x0F));
 8003976:	79fb      	ldrb	r3, [r7, #7]
 8003978:	f003 030f 	and.w	r3, r3, #15
 800397c:	b2da      	uxtb	r2, r3
 800397e:	7bfb      	ldrb	r3, [r7, #15]
 8003980:	4413      	add	r3, r2
 8003982:	b2db      	uxtb	r3, r3
}
 8003984:	4618      	mov	r0, r3
 8003986:	3714      	adds	r7, #20
 8003988:	46bd      	mov	sp, r7
 800398a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398e:	4770      	bx	lr

08003990 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003990:	b580      	push	{r7, lr}
 8003992:	b082      	sub	sp, #8
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2b00      	cmp	r3, #0
 800399c:	d101      	bne.n	80039a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	e041      	b.n	8003a26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80039a8:	b2db      	uxtb	r3, r3
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d106      	bne.n	80039bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2200      	movs	r2, #0
 80039b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80039b6:	6878      	ldr	r0, [r7, #4]
 80039b8:	f7fd fda2 	bl	8001500 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2202      	movs	r2, #2
 80039c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681a      	ldr	r2, [r3, #0]
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	3304      	adds	r3, #4
 80039cc:	4619      	mov	r1, r3
 80039ce:	4610      	mov	r0, r2
 80039d0:	f000 fd3a 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2201      	movs	r2, #1
 80039d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2201      	movs	r2, #1
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2201      	movs	r2, #1
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	2201      	movs	r2, #1
 80039f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2201      	movs	r2, #1
 80039f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2201      	movs	r2, #1
 8003a10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2201      	movs	r2, #1
 8003a18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2201      	movs	r2, #1
 8003a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a24:	2300      	movs	r3, #0
}
 8003a26:	4618      	mov	r0, r3
 8003a28:	3708      	adds	r7, #8
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	bd80      	pop	{r7, pc}

08003a2e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a2e:	b580      	push	{r7, lr}
 8003a30:	b082      	sub	sp, #8
 8003a32:	af00      	add	r7, sp, #0
 8003a34:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d101      	bne.n	8003a40 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e041      	b.n	8003ac4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a46:	b2db      	uxtb	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d106      	bne.n	8003a5a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f000 f839 	bl	8003acc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2202      	movs	r2, #2
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	3304      	adds	r3, #4
 8003a6a:	4619      	mov	r1, r3
 8003a6c:	4610      	mov	r0, r2
 8003a6e:	f000 fceb 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2201      	movs	r2, #1
 8003a76:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2201      	movs	r2, #1
 8003a7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2201      	movs	r2, #1
 8003a8e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2201      	movs	r2, #1
 8003a96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2201      	movs	r2, #1
 8003aa6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2201      	movs	r2, #1
 8003ab6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2201      	movs	r2, #1
 8003abe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003ac2:	2300      	movs	r3, #0
}
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	3708      	adds	r7, #8
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}

08003acc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003ad4:	bf00      	nop
 8003ad6:	370c      	adds	r7, #12
 8003ad8:	46bd      	mov	sp, r7
 8003ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ade:	4770      	bx	lr

08003ae0 <HAL_TIM_PWM_Stop_DMA>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_DMA(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	b084      	sub	sp, #16
 8003ae4:	af00      	add	r7, sp, #0
 8003ae6:	6078      	str	r0, [r7, #4]
 8003ae8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	2b0c      	cmp	r3, #12
 8003af2:	d855      	bhi.n	8003ba0 <HAL_TIM_PWM_Stop_DMA+0xc0>
 8003af4:	a201      	add	r2, pc, #4	; (adr r2, 8003afc <HAL_TIM_PWM_Stop_DMA+0x1c>)
 8003af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afa:	bf00      	nop
 8003afc:	08003b31 	.word	0x08003b31
 8003b00:	08003ba1 	.word	0x08003ba1
 8003b04:	08003ba1 	.word	0x08003ba1
 8003b08:	08003ba1 	.word	0x08003ba1
 8003b0c:	08003b4d 	.word	0x08003b4d
 8003b10:	08003ba1 	.word	0x08003ba1
 8003b14:	08003ba1 	.word	0x08003ba1
 8003b18:	08003ba1 	.word	0x08003ba1
 8003b1c:	08003b69 	.word	0x08003b69
 8003b20:	08003ba1 	.word	0x08003ba1
 8003b24:	08003ba1 	.word	0x08003ba1
 8003b28:	08003ba1 	.word	0x08003ba1
 8003b2c:	08003b85 	.word	0x08003b85
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC1);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	68da      	ldr	r2, [r3, #12]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b3e:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC1]);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fe fafd 	bl	8002144 <HAL_DMA_Abort_IT>
      break;
 8003b4a:	e02c      	b.n	8003ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC2);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	68da      	ldr	r2, [r3, #12]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b5a:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC2]);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b60:	4618      	mov	r0, r3
 8003b62:	f7fe faef 	bl	8002144 <HAL_DMA_Abort_IT>
      break;
 8003b66:	e01e      	b.n	8003ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 DMA request */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC3);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	68da      	ldr	r2, [r3, #12]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b76:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC3]);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fe fae1 	bl	8002144 <HAL_DMA_Abort_IT>
      break;
 8003b82:	e010      	b.n	8003ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_CC4);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003b92:	60da      	str	r2, [r3, #12]
      (void)HAL_DMA_Abort_IT(htim->hdma[TIM_DMA_ID_CC4]);
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f7fe fad3 	bl	8002144 <HAL_DMA_Abort_IT>
      break;
 8003b9e:	e002      	b.n	8003ba6 <HAL_TIM_PWM_Stop_DMA+0xc6>
    }

    default:
      status = HAL_ERROR;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ba4:	bf00      	nop
  }

  if (status == HAL_OK)
 8003ba6:	7bfb      	ldrb	r3, [r7, #15]
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d157      	bne.n	8003c5c <HAL_TIM_PWM_Stop_DMA+0x17c>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	2200      	movs	r2, #0
 8003bb2:	6839      	ldr	r1, [r7, #0]
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	f000 feed 	bl	8004994 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a2a      	ldr	r2, [pc, #168]	; (8003c68 <HAL_TIM_PWM_Stop_DMA+0x188>)
 8003bc0:	4293      	cmp	r3, r2
 8003bc2:	d117      	bne.n	8003bf4 <HAL_TIM_PWM_Stop_DMA+0x114>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	6a1a      	ldr	r2, [r3, #32]
 8003bca:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bce:	4013      	ands	r3, r2
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d10f      	bne.n	8003bf4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	6a1a      	ldr	r2, [r3, #32]
 8003bda:	f240 4344 	movw	r3, #1092	; 0x444
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d107      	bne.n	8003bf4 <HAL_TIM_PWM_Stop_DMA+0x114>
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bf2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	6a1a      	ldr	r2, [r3, #32]
 8003bfa:	f241 1311 	movw	r3, #4369	; 0x1111
 8003bfe:	4013      	ands	r3, r2
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10f      	bne.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	6a1a      	ldr	r2, [r3, #32]
 8003c0a:	f240 4344 	movw	r3, #1092	; 0x444
 8003c0e:	4013      	ands	r3, r2
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_PWM_Stop_DMA+0x144>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	681a      	ldr	r2, [r3, #0]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f022 0201 	bic.w	r2, r2, #1
 8003c22:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d104      	bne.n	8003c34 <HAL_TIM_PWM_Stop_DMA+0x154>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003c32:	e013      	b.n	8003c5c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d104      	bne.n	8003c44 <HAL_TIM_PWM_Stop_DMA+0x164>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2201      	movs	r2, #1
 8003c3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003c42:	e00b      	b.n	8003c5c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	2b08      	cmp	r3, #8
 8003c48:	d104      	bne.n	8003c54 <HAL_TIM_PWM_Stop_DMA+0x174>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	2201      	movs	r2, #1
 8003c4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003c52:	e003      	b.n	8003c5c <HAL_TIM_PWM_Stop_DMA+0x17c>
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	2201      	movs	r2, #1
 8003c58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8003c5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3710      	adds	r7, #16
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	bf00      	nop
 8003c68:	40010000 	.word	0x40010000

08003c6c <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b086      	sub	sp, #24
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d101      	bne.n	8003c80 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e097      	b.n	8003db0 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d106      	bne.n	8003c9a <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	2200      	movs	r2, #0
 8003c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7fd fc87 	bl	80015a8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2202      	movs	r2, #2
 8003c9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	687a      	ldr	r2, [r7, #4]
 8003caa:	6812      	ldr	r2, [r2, #0]
 8003cac:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003cb0:	f023 0307 	bic.w	r3, r3, #7
 8003cb4:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	3304      	adds	r3, #4
 8003cbe:	4619      	mov	r1, r3
 8003cc0:	4610      	mov	r0, r2
 8003cc2:	f000 fbc1 	bl	8004448 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	689b      	ldr	r3, [r3, #8]
 8003ccc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	699b      	ldr	r3, [r3, #24]
 8003cd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	697a      	ldr	r2, [r7, #20]
 8003ce4:	4313      	orrs	r3, r2
 8003ce6:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cee:	f023 0303 	bic.w	r3, r3, #3
 8003cf2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	689a      	ldr	r2, [r3, #8]
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	699b      	ldr	r3, [r3, #24]
 8003cfc:	021b      	lsls	r3, r3, #8
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	693a      	ldr	r2, [r7, #16]
 8003d02:	4313      	orrs	r3, r2
 8003d04:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003d0c:	f023 030c 	bic.w	r3, r3, #12
 8003d10:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003d18:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003d1c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	69db      	ldr	r3, [r3, #28]
 8003d26:	021b      	lsls	r3, r3, #8
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	691b      	ldr	r3, [r3, #16]
 8003d34:	011a      	lsls	r2, r3, #4
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	031b      	lsls	r3, r3, #12
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	693a      	ldr	r2, [r7, #16]
 8003d40:	4313      	orrs	r3, r2
 8003d42:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003d4a:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003d52:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003d54:	683b      	ldr	r3, [r7, #0]
 8003d56:	685a      	ldr	r2, [r3, #4]
 8003d58:	683b      	ldr	r3, [r7, #0]
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	4313      	orrs	r3, r2
 8003d64:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	697a      	ldr	r2, [r7, #20]
 8003d6c:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	68fa      	ldr	r2, [r7, #12]
 8003d7c:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	2201      	movs	r2, #1
 8003d82:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2201      	movs	r2, #1
 8003d8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	2201      	movs	r2, #1
 8003d92:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	2201      	movs	r2, #1
 8003d9a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2201      	movs	r2, #1
 8003daa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003dae:	2300      	movs	r3, #0
}
 8003db0:	4618      	mov	r0, r3
 8003db2:	3718      	adds	r7, #24
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}

08003db8 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db8:	b580      	push	{r7, lr}
 8003dba:	b084      	sub	sp, #16
 8003dbc:	af00      	add	r7, sp, #0
 8003dbe:	6078      	str	r0, [r7, #4]
 8003dc0:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc8:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003dd0:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003dd8:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8003de0:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d110      	bne.n	8003e0a <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003de8:	7bfb      	ldrb	r3, [r7, #15]
 8003dea:	2b01      	cmp	r3, #1
 8003dec:	d102      	bne.n	8003df4 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8003dee:	7b7b      	ldrb	r3, [r7, #13]
 8003df0:	2b01      	cmp	r3, #1
 8003df2:	d001      	beq.n	8003df8 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8003df4:	2301      	movs	r3, #1
 8003df6:	e069      	b.n	8003ecc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2202      	movs	r2, #2
 8003dfc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e08:	e031      	b.n	8003e6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d110      	bne.n	8003e32 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e10:	7bbb      	ldrb	r3, [r7, #14]
 8003e12:	2b01      	cmp	r3, #1
 8003e14:	d102      	bne.n	8003e1c <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e16:	7b3b      	ldrb	r3, [r7, #12]
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d001      	beq.n	8003e20 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e055      	b.n	8003ecc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2202      	movs	r2, #2
 8003e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003e30:	e01d      	b.n	8003e6e <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e32:	7bfb      	ldrb	r3, [r7, #15]
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	d108      	bne.n	8003e4a <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e38:	7bbb      	ldrb	r3, [r7, #14]
 8003e3a:	2b01      	cmp	r3, #1
 8003e3c:	d105      	bne.n	8003e4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8003e3e:	7b7b      	ldrb	r3, [r7, #13]
 8003e40:	2b01      	cmp	r3, #1
 8003e42:	d102      	bne.n	8003e4a <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8003e44:	7b3b      	ldrb	r3, [r7, #12]
 8003e46:	2b01      	cmp	r3, #1
 8003e48:	d001      	beq.n	8003e4e <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	e03e      	b.n	8003ecc <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2202      	movs	r2, #2
 8003e5a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2202      	movs	r2, #2
 8003e62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2202      	movs	r2, #2
 8003e6a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d003      	beq.n	8003e7c <HAL_TIM_Encoder_Start+0xc4>
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	2b04      	cmp	r3, #4
 8003e78:	d008      	beq.n	8003e8c <HAL_TIM_Encoder_Start+0xd4>
 8003e7a:	e00f      	b.n	8003e9c <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	2201      	movs	r2, #1
 8003e82:	2100      	movs	r1, #0
 8003e84:	4618      	mov	r0, r3
 8003e86:	f000 fd85 	bl	8004994 <TIM_CCxChannelCmd>
      break;
 8003e8a:	e016      	b.n	8003eba <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	2201      	movs	r2, #1
 8003e92:	2104      	movs	r1, #4
 8003e94:	4618      	mov	r0, r3
 8003e96:	f000 fd7d 	bl	8004994 <TIM_CCxChannelCmd>
      break;
 8003e9a:	e00e      	b.n	8003eba <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2100      	movs	r1, #0
 8003ea4:	4618      	mov	r0, r3
 8003ea6:	f000 fd75 	bl	8004994 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	2104      	movs	r1, #4
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 fd6e 	bl	8004994 <TIM_CCxChannelCmd>
      break;
 8003eb8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	681a      	ldr	r2, [r3, #0]
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f042 0201 	orr.w	r2, r2, #1
 8003ec8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003eca:	2300      	movs	r3, #0
}
 8003ecc:	4618      	mov	r0, r3
 8003ece:	3710      	adds	r7, #16
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}

08003ed4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ed4:	b580      	push	{r7, lr}
 8003ed6:	b082      	sub	sp, #8
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	f003 0302 	and.w	r3, r3, #2
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d122      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	68db      	ldr	r3, [r3, #12]
 8003ef0:	f003 0302 	and.w	r3, r3, #2
 8003ef4:	2b02      	cmp	r3, #2
 8003ef6:	d11b      	bne.n	8003f30 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	f06f 0202 	mvn.w	r2, #2
 8003f00:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	2201      	movs	r2, #1
 8003f06:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	f003 0303 	and.w	r3, r3, #3
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa81 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8003f1c:	e005      	b.n	8003f2a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 fa73 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f24:	6878      	ldr	r0, [r7, #4]
 8003f26:	f000 fe9b 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	691b      	ldr	r3, [r3, #16]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b04      	cmp	r3, #4
 8003f3c:	d122      	bne.n	8003f84 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68db      	ldr	r3, [r3, #12]
 8003f44:	f003 0304 	and.w	r3, r3, #4
 8003f48:	2b04      	cmp	r3, #4
 8003f4a:	d11b      	bne.n	8003f84 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f06f 0204 	mvn.w	r2, #4
 8003f54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	2202      	movs	r2, #2
 8003f5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	699b      	ldr	r3, [r3, #24]
 8003f62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d003      	beq.n	8003f72 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa57 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8003f70:	e005      	b.n	8003f7e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 fa49 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f78:	6878      	ldr	r0, [r7, #4]
 8003f7a:	f000 fe71 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	691b      	ldr	r3, [r3, #16]
 8003f8a:	f003 0308 	and.w	r3, r3, #8
 8003f8e:	2b08      	cmp	r3, #8
 8003f90:	d122      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	68db      	ldr	r3, [r3, #12]
 8003f98:	f003 0308 	and.w	r3, r3, #8
 8003f9c:	2b08      	cmp	r3, #8
 8003f9e:	d11b      	bne.n	8003fd8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f06f 0208 	mvn.w	r2, #8
 8003fa8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2204      	movs	r2, #4
 8003fae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69db      	ldr	r3, [r3, #28]
 8003fb6:	f003 0303 	and.w	r3, r3, #3
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d003      	beq.n	8003fc6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa2d 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8003fc4:	e005      	b.n	8003fd2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 fa1f 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fcc:	6878      	ldr	r0, [r7, #4]
 8003fce:	f000 fe47 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	691b      	ldr	r3, [r3, #16]
 8003fde:	f003 0310 	and.w	r3, r3, #16
 8003fe2:	2b10      	cmp	r3, #16
 8003fe4:	d122      	bne.n	800402c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68db      	ldr	r3, [r3, #12]
 8003fec:	f003 0310 	and.w	r3, r3, #16
 8003ff0:	2b10      	cmp	r3, #16
 8003ff2:	d11b      	bne.n	800402c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0210 	mvn.w	r2, #16
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2208      	movs	r2, #8
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	69db      	ldr	r3, [r3, #28]
 800400a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 fa03 	bl	800441e <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f9f5 	bl	800440a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 fe1d 	bl	8004c60 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b01      	cmp	r3, #1
 8004038:	d10e      	bne.n	8004058 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	68db      	ldr	r3, [r3, #12]
 8004040:	f003 0301 	and.w	r3, r3, #1
 8004044:	2b01      	cmp	r3, #1
 8004046:	d107      	bne.n	8004058 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f06f 0201 	mvn.w	r2, #1
 8004050:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f9cf 	bl	80043f6 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004062:	2b80      	cmp	r3, #128	; 0x80
 8004064:	d10e      	bne.n	8004084 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	68db      	ldr	r3, [r3, #12]
 800406c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004070:	2b80      	cmp	r3, #128	; 0x80
 8004072:	d107      	bne.n	8004084 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800407c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800407e:	6878      	ldr	r0, [r7, #4]
 8004080:	f000 fd78 	bl	8004b74 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800408e:	2b40      	cmp	r3, #64	; 0x40
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800409c:	2b40      	cmp	r3, #64	; 0x40
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9c1 	bl	8004432 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0320 	and.w	r3, r3, #32
 80040ba:	2b20      	cmp	r3, #32
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0320 	and.w	r3, r3, #32
 80040c8:	2b20      	cmp	r3, #32
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0220 	mvn.w	r2, #32
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fd42 	bl	8004b60 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040dc:	bf00      	nop
 80040de:	3708      	adds	r7, #8
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b086      	sub	sp, #24
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	60f8      	str	r0, [r7, #12]
 80040ec:	60b9      	str	r1, [r7, #8]
 80040ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040f0:	2300      	movs	r3, #0
 80040f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040fa:	2b01      	cmp	r3, #1
 80040fc:	d101      	bne.n	8004102 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040fe:	2302      	movs	r3, #2
 8004100:	e0ae      	b.n	8004260 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2201      	movs	r2, #1
 8004106:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2b0c      	cmp	r3, #12
 800410e:	f200 809f 	bhi.w	8004250 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004112:	a201      	add	r2, pc, #4	; (adr r2, 8004118 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004118:	0800414d 	.word	0x0800414d
 800411c:	08004251 	.word	0x08004251
 8004120:	08004251 	.word	0x08004251
 8004124:	08004251 	.word	0x08004251
 8004128:	0800418d 	.word	0x0800418d
 800412c:	08004251 	.word	0x08004251
 8004130:	08004251 	.word	0x08004251
 8004134:	08004251 	.word	0x08004251
 8004138:	080041cf 	.word	0x080041cf
 800413c:	08004251 	.word	0x08004251
 8004140:	08004251 	.word	0x08004251
 8004144:	08004251 	.word	0x08004251
 8004148:	0800420f 	.word	0x0800420f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	68b9      	ldr	r1, [r7, #8]
 8004152:	4618      	mov	r0, r3
 8004154:	f000 f9f8 	bl	8004548 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	699a      	ldr	r2, [r3, #24]
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f042 0208 	orr.w	r2, r2, #8
 8004166:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699a      	ldr	r2, [r3, #24]
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f022 0204 	bic.w	r2, r2, #4
 8004176:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	6999      	ldr	r1, [r3, #24]
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	691a      	ldr	r2, [r3, #16]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	619a      	str	r2, [r3, #24]
      break;
 800418a:	e064      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 fa3e 	bl	8004614 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6999      	ldr	r1, [r3, #24]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691b      	ldr	r3, [r3, #16]
 80041c2:	021a      	lsls	r2, r3, #8
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	430a      	orrs	r2, r1
 80041ca:	619a      	str	r2, [r3, #24]
      break;
 80041cc:	e043      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	68b9      	ldr	r1, [r7, #8]
 80041d4:	4618      	mov	r0, r3
 80041d6:	f000 fa89 	bl	80046ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	69da      	ldr	r2, [r3, #28]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	f042 0208 	orr.w	r2, r2, #8
 80041e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	69da      	ldr	r2, [r3, #28]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f022 0204 	bic.w	r2, r2, #4
 80041f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	69d9      	ldr	r1, [r3, #28]
 8004200:	68bb      	ldr	r3, [r7, #8]
 8004202:	691a      	ldr	r2, [r3, #16]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	61da      	str	r2, [r3, #28]
      break;
 800420c:	e023      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fad3 	bl	80047c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69d9      	ldr	r1, [r3, #28]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	021a      	lsls	r2, r3, #8
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	430a      	orrs	r2, r1
 800424c:	61da      	str	r2, [r3, #28]
      break;
 800424e:	e002      	b.n	8004256 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	75fb      	strb	r3, [r7, #23]
      break;
 8004254:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2200      	movs	r2, #0
 800425a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800425e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004260:	4618      	mov	r0, r3
 8004262:	3718      	adds	r7, #24
 8004264:	46bd      	mov	sp, r7
 8004266:	bd80      	pop	{r7, pc}

08004268 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b084      	sub	sp, #16
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
 8004270:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004272:	2300      	movs	r3, #0
 8004274:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800427c:	2b01      	cmp	r3, #1
 800427e:	d101      	bne.n	8004284 <HAL_TIM_ConfigClockSource+0x1c>
 8004280:	2302      	movs	r3, #2
 8004282:	e0b4      	b.n	80043ee <HAL_TIM_ConfigClockSource+0x186>
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2202      	movs	r2, #2
 8004290:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	689b      	ldr	r3, [r3, #8]
 800429a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80042a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80042aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	68ba      	ldr	r2, [r7, #8]
 80042b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042bc:	d03e      	beq.n	800433c <HAL_TIM_ConfigClockSource+0xd4>
 80042be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042c2:	f200 8087 	bhi.w	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ca:	f000 8086 	beq.w	80043da <HAL_TIM_ConfigClockSource+0x172>
 80042ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042d2:	d87f      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b70      	cmp	r3, #112	; 0x70
 80042d6:	d01a      	beq.n	800430e <HAL_TIM_ConfigClockSource+0xa6>
 80042d8:	2b70      	cmp	r3, #112	; 0x70
 80042da:	d87b      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b60      	cmp	r3, #96	; 0x60
 80042de:	d050      	beq.n	8004382 <HAL_TIM_ConfigClockSource+0x11a>
 80042e0:	2b60      	cmp	r3, #96	; 0x60
 80042e2:	d877      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b50      	cmp	r3, #80	; 0x50
 80042e6:	d03c      	beq.n	8004362 <HAL_TIM_ConfigClockSource+0xfa>
 80042e8:	2b50      	cmp	r3, #80	; 0x50
 80042ea:	d873      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b40      	cmp	r3, #64	; 0x40
 80042ee:	d058      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0x13a>
 80042f0:	2b40      	cmp	r3, #64	; 0x40
 80042f2:	d86f      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b30      	cmp	r3, #48	; 0x30
 80042f6:	d064      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x15a>
 80042f8:	2b30      	cmp	r3, #48	; 0x30
 80042fa:	d86b      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b20      	cmp	r3, #32
 80042fe:	d060      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	2b20      	cmp	r3, #32
 8004302:	d867      	bhi.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
 8004304:	2b00      	cmp	r3, #0
 8004306:	d05c      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x15a>
 8004308:	2b10      	cmp	r3, #16
 800430a:	d05a      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x15a>
 800430c:	e062      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6818      	ldr	r0, [r3, #0]
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	6899      	ldr	r1, [r3, #8]
 8004316:	683b      	ldr	r3, [r7, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	f000 fb19 	bl	8004954 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	689b      	ldr	r3, [r3, #8]
 8004328:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004330:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	68ba      	ldr	r2, [r7, #8]
 8004338:	609a      	str	r2, [r3, #8]
      break;
 800433a:	e04f      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	6818      	ldr	r0, [r3, #0]
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	6899      	ldr	r1, [r3, #8]
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f000 fb02 	bl	8004954 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689a      	ldr	r2, [r3, #8]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800435e:	609a      	str	r2, [r3, #8]
      break;
 8004360:	e03c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6818      	ldr	r0, [r3, #0]
 8004366:	683b      	ldr	r3, [r7, #0]
 8004368:	6859      	ldr	r1, [r3, #4]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	68db      	ldr	r3, [r3, #12]
 800436e:	461a      	mov	r2, r3
 8004370:	f000 fa76 	bl	8004860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	2150      	movs	r1, #80	; 0x50
 800437a:	4618      	mov	r0, r3
 800437c:	f000 facf 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 8004380:	e02c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	6859      	ldr	r1, [r3, #4]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	68db      	ldr	r3, [r3, #12]
 800438e:	461a      	mov	r2, r3
 8004390:	f000 fa95 	bl	80048be <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	2160      	movs	r1, #96	; 0x60
 800439a:	4618      	mov	r0, r3
 800439c:	f000 fabf 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043a0:	e01c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6859      	ldr	r1, [r3, #4]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
 80043ae:	461a      	mov	r2, r3
 80043b0:	f000 fa56 	bl	8004860 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2140      	movs	r1, #64	; 0x40
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 faaf 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043c0:	e00c      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681a      	ldr	r2, [r3, #0]
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	4619      	mov	r1, r3
 80043cc:	4610      	mov	r0, r2
 80043ce:	f000 faa6 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043d2:	e003      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043d4:	2301      	movs	r3, #1
 80043d6:	73fb      	strb	r3, [r7, #15]
      break;
 80043d8:	e000      	b.n	80043dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2201      	movs	r2, #1
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80043ee:	4618      	mov	r0, r3
 80043f0:	3710      	adds	r7, #16
 80043f2:	46bd      	mov	sp, r7
 80043f4:	bd80      	pop	{r7, pc}

080043f6 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b083      	sub	sp, #12
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043fe:	bf00      	nop
 8004400:	370c      	adds	r7, #12
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr

0800440a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800440a:	b480      	push	{r7}
 800440c:	b083      	sub	sp, #12
 800440e:	af00      	add	r7, sp, #0
 8004410:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004412:	bf00      	nop
 8004414:	370c      	adds	r7, #12
 8004416:	46bd      	mov	sp, r7
 8004418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441c:	4770      	bx	lr

0800441e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800441e:	b480      	push	{r7}
 8004420:	b083      	sub	sp, #12
 8004422:	af00      	add	r7, sp, #0
 8004424:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004426:	bf00      	nop
 8004428:	370c      	adds	r7, #12
 800442a:	46bd      	mov	sp, r7
 800442c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004430:	4770      	bx	lr

08004432 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004432:	b480      	push	{r7}
 8004434:	b083      	sub	sp, #12
 8004436:	af00      	add	r7, sp, #0
 8004438:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443a:	bf00      	nop
 800443c:	370c      	adds	r7, #12
 800443e:	46bd      	mov	sp, r7
 8004440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004444:	4770      	bx	lr
	...

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a34      	ldr	r2, [pc, #208]	; (800452c <TIM_Base_SetConfig+0xe4>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00f      	beq.n	8004480 <TIM_Base_SetConfig+0x38>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004466:	d00b      	beq.n	8004480 <TIM_Base_SetConfig+0x38>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a31      	ldr	r2, [pc, #196]	; (8004530 <TIM_Base_SetConfig+0xe8>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d007      	beq.n	8004480 <TIM_Base_SetConfig+0x38>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a30      	ldr	r2, [pc, #192]	; (8004534 <TIM_Base_SetConfig+0xec>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d003      	beq.n	8004480 <TIM_Base_SetConfig+0x38>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4a2f      	ldr	r2, [pc, #188]	; (8004538 <TIM_Base_SetConfig+0xf0>)
 800447c:	4293      	cmp	r3, r2
 800447e:	d108      	bne.n	8004492 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004486:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	68fa      	ldr	r2, [r7, #12]
 800448e:	4313      	orrs	r3, r2
 8004490:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	4a25      	ldr	r2, [pc, #148]	; (800452c <TIM_Base_SetConfig+0xe4>)
 8004496:	4293      	cmp	r3, r2
 8004498:	d01b      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044a0:	d017      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a22      	ldr	r2, [pc, #136]	; (8004530 <TIM_Base_SetConfig+0xe8>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d013      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	4a21      	ldr	r2, [pc, #132]	; (8004534 <TIM_Base_SetConfig+0xec>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d00f      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	4a20      	ldr	r2, [pc, #128]	; (8004538 <TIM_Base_SetConfig+0xf0>)
 80044b6:	4293      	cmp	r3, r2
 80044b8:	d00b      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	4a1f      	ldr	r2, [pc, #124]	; (800453c <TIM_Base_SetConfig+0xf4>)
 80044be:	4293      	cmp	r3, r2
 80044c0:	d007      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	4a1e      	ldr	r2, [pc, #120]	; (8004540 <TIM_Base_SetConfig+0xf8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d003      	beq.n	80044d2 <TIM_Base_SetConfig+0x8a>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	4a1d      	ldr	r2, [pc, #116]	; (8004544 <TIM_Base_SetConfig+0xfc>)
 80044ce:	4293      	cmp	r3, r2
 80044d0:	d108      	bne.n	80044e4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	68db      	ldr	r3, [r3, #12]
 80044de:	68fa      	ldr	r2, [r7, #12]
 80044e0:	4313      	orrs	r3, r2
 80044e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ea:	683b      	ldr	r3, [r7, #0]
 80044ec:	695b      	ldr	r3, [r3, #20]
 80044ee:	4313      	orrs	r3, r2
 80044f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	68fa      	ldr	r2, [r7, #12]
 80044f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	689a      	ldr	r2, [r3, #8]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <TIM_Base_SetConfig+0xe4>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d103      	bne.n	8004518 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	691a      	ldr	r2, [r3, #16]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	615a      	str	r2, [r3, #20]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004528:	4770      	bx	lr
 800452a:	bf00      	nop
 800452c:	40010000 	.word	0x40010000
 8004530:	40000400 	.word	0x40000400
 8004534:	40000800 	.word	0x40000800
 8004538:	40000c00 	.word	0x40000c00
 800453c:	40014000 	.word	0x40014000
 8004540:	40014400 	.word	0x40014400
 8004544:	40014800 	.word	0x40014800

08004548 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
 800454e:	6078      	str	r0, [r7, #4]
 8004550:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	6a1b      	ldr	r3, [r3, #32]
 8004556:	f023 0201 	bic.w	r2, r3, #1
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	685b      	ldr	r3, [r3, #4]
 8004568:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004576:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	f023 0303 	bic.w	r3, r3, #3
 800457e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004580:	683b      	ldr	r3, [r7, #0]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	4313      	orrs	r3, r2
 8004588:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	f023 0302 	bic.w	r3, r3, #2
 8004590:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	697a      	ldr	r2, [r7, #20]
 8004598:	4313      	orrs	r3, r2
 800459a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	4a1c      	ldr	r2, [pc, #112]	; (8004610 <TIM_OC1_SetConfig+0xc8>)
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d10c      	bne.n	80045be <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045a4:	697b      	ldr	r3, [r7, #20]
 80045a6:	f023 0308 	bic.w	r3, r3, #8
 80045aa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045ac:	683b      	ldr	r3, [r7, #0]
 80045ae:	68db      	ldr	r3, [r3, #12]
 80045b0:	697a      	ldr	r2, [r7, #20]
 80045b2:	4313      	orrs	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f023 0304 	bic.w	r3, r3, #4
 80045bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	4a13      	ldr	r2, [pc, #76]	; (8004610 <TIM_OC1_SetConfig+0xc8>)
 80045c2:	4293      	cmp	r3, r2
 80045c4:	d111      	bne.n	80045ea <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045d6:	683b      	ldr	r3, [r7, #0]
 80045d8:	695b      	ldr	r3, [r3, #20]
 80045da:	693a      	ldr	r2, [r7, #16]
 80045dc:	4313      	orrs	r3, r2
 80045de:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	699b      	ldr	r3, [r3, #24]
 80045e4:	693a      	ldr	r2, [r7, #16]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	693a      	ldr	r2, [r7, #16]
 80045ee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	68fa      	ldr	r2, [r7, #12]
 80045f4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	685a      	ldr	r2, [r3, #4]
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	621a      	str	r2, [r3, #32]
}
 8004604:	bf00      	nop
 8004606:	371c      	adds	r7, #28
 8004608:	46bd      	mov	sp, r7
 800460a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460e:	4770      	bx	lr
 8004610:	40010000 	.word	0x40010000

08004614 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004614:	b480      	push	{r7}
 8004616:	b087      	sub	sp, #28
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a1b      	ldr	r3, [r3, #32]
 8004622:	f023 0210 	bic.w	r2, r3, #16
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	699b      	ldr	r3, [r3, #24]
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004642:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800464a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800464c:	683b      	ldr	r3, [r7, #0]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	021b      	lsls	r3, r3, #8
 8004652:	68fa      	ldr	r2, [r7, #12]
 8004654:	4313      	orrs	r3, r2
 8004656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0320 	bic.w	r3, r3, #32
 800465e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	4a1e      	ldr	r2, [pc, #120]	; (80046e8 <TIM_OC2_SetConfig+0xd4>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d10d      	bne.n	8004690 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004674:	697b      	ldr	r3, [r7, #20]
 8004676:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800467a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	011b      	lsls	r3, r3, #4
 8004682:	697a      	ldr	r2, [r7, #20]
 8004684:	4313      	orrs	r3, r2
 8004686:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800468e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a15      	ldr	r2, [pc, #84]	; (80046e8 <TIM_OC2_SetConfig+0xd4>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d113      	bne.n	80046c0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800469e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80046a6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	695b      	ldr	r3, [r3, #20]
 80046ac:	009b      	lsls	r3, r3, #2
 80046ae:	693a      	ldr	r2, [r7, #16]
 80046b0:	4313      	orrs	r3, r2
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	699b      	ldr	r3, [r3, #24]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	693a      	ldr	r2, [r7, #16]
 80046c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	685a      	ldr	r2, [r3, #4]
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	697a      	ldr	r2, [r7, #20]
 80046d8:	621a      	str	r2, [r3, #32]
}
 80046da:	bf00      	nop
 80046dc:	371c      	adds	r7, #28
 80046de:	46bd      	mov	sp, r7
 80046e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e4:	4770      	bx	lr
 80046e6:	bf00      	nop
 80046e8:	40010000 	.word	0x40010000

080046ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046ec:	b480      	push	{r7}
 80046ee:	b087      	sub	sp, #28
 80046f0:	af00      	add	r7, sp, #0
 80046f2:	6078      	str	r0, [r7, #4]
 80046f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	6a1b      	ldr	r3, [r3, #32]
 80046fa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a1b      	ldr	r3, [r3, #32]
 8004706:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	685b      	ldr	r3, [r3, #4]
 800470c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	69db      	ldr	r3, [r3, #28]
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800471a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0303 	bic.w	r3, r3, #3
 8004722:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004724:	683b      	ldr	r3, [r7, #0]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	4313      	orrs	r3, r2
 800472c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004734:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	689b      	ldr	r3, [r3, #8]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	4a1d      	ldr	r2, [pc, #116]	; (80047bc <TIM_OC3_SetConfig+0xd0>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d10d      	bne.n	8004766 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800474a:	697b      	ldr	r3, [r7, #20]
 800474c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004750:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	68db      	ldr	r3, [r3, #12]
 8004756:	021b      	lsls	r3, r3, #8
 8004758:	697a      	ldr	r2, [r7, #20]
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004764:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a14      	ldr	r2, [pc, #80]	; (80047bc <TIM_OC3_SetConfig+0xd0>)
 800476a:	4293      	cmp	r3, r2
 800476c:	d113      	bne.n	8004796 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004774:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800477c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	011b      	lsls	r3, r3, #4
 8004784:	693a      	ldr	r2, [r7, #16]
 8004786:	4313      	orrs	r3, r2
 8004788:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	699b      	ldr	r3, [r3, #24]
 800478e:	011b      	lsls	r3, r3, #4
 8004790:	693a      	ldr	r2, [r7, #16]
 8004792:	4313      	orrs	r3, r2
 8004794:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	68fa      	ldr	r2, [r7, #12]
 80047a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685a      	ldr	r2, [r3, #4]
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	621a      	str	r2, [r3, #32]
}
 80047b0:	bf00      	nop
 80047b2:	371c      	adds	r7, #28
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr
 80047bc:	40010000 	.word	0x40010000

080047c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047c0:	b480      	push	{r7}
 80047c2:	b087      	sub	sp, #28
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]
 80047c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6a1b      	ldr	r3, [r3, #32]
 80047ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	685b      	ldr	r3, [r3, #4]
 80047e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	69db      	ldr	r3, [r3, #28]
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047f8:	683b      	ldr	r3, [r7, #0]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	021b      	lsls	r3, r3, #8
 80047fe:	68fa      	ldr	r2, [r7, #12]
 8004800:	4313      	orrs	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800480a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	689b      	ldr	r3, [r3, #8]
 8004810:	031b      	lsls	r3, r3, #12
 8004812:	693a      	ldr	r2, [r7, #16]
 8004814:	4313      	orrs	r3, r2
 8004816:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	4a10      	ldr	r2, [pc, #64]	; (800485c <TIM_OC4_SetConfig+0x9c>)
 800481c:	4293      	cmp	r3, r2
 800481e:	d109      	bne.n	8004834 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004820:	697b      	ldr	r3, [r7, #20]
 8004822:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004826:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	695b      	ldr	r3, [r3, #20]
 800482c:	019b      	lsls	r3, r3, #6
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4313      	orrs	r3, r2
 8004832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	68fa      	ldr	r2, [r7, #12]
 800483e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	693a      	ldr	r2, [r7, #16]
 800484c:	621a      	str	r2, [r3, #32]
}
 800484e:	bf00      	nop
 8004850:	371c      	adds	r7, #28
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	40010000 	.word	0x40010000

08004860 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004860:	b480      	push	{r7}
 8004862:	b087      	sub	sp, #28
 8004864:	af00      	add	r7, sp, #0
 8004866:	60f8      	str	r0, [r7, #12]
 8004868:	60b9      	str	r1, [r7, #8]
 800486a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	6a1b      	ldr	r3, [r3, #32]
 8004870:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	6a1b      	ldr	r3, [r3, #32]
 8004876:	f023 0201 	bic.w	r2, r3, #1
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800488a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	693a      	ldr	r2, [r7, #16]
 8004892:	4313      	orrs	r3, r2
 8004894:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f023 030a 	bic.w	r3, r3, #10
 800489c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	68bb      	ldr	r3, [r7, #8]
 80048a2:	4313      	orrs	r3, r2
 80048a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]
}
 80048b2:	bf00      	nop
 80048b4:	371c      	adds	r7, #28
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048be:	b480      	push	{r7}
 80048c0:	b087      	sub	sp, #28
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ca:	68fb      	ldr	r3, [r7, #12]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	f023 0210 	bic.w	r2, r3, #16
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	699b      	ldr	r3, [r3, #24]
 80048da:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	6a1b      	ldr	r3, [r3, #32]
 80048e0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e2:	697b      	ldr	r3, [r7, #20]
 80048e4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048e8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	031b      	lsls	r3, r3, #12
 80048ee:	697a      	ldr	r2, [r7, #20]
 80048f0:	4313      	orrs	r3, r2
 80048f2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f4:	693b      	ldr	r3, [r7, #16]
 80048f6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048fa:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fc:	68bb      	ldr	r3, [r7, #8]
 80048fe:	011b      	lsls	r3, r3, #4
 8004900:	693a      	ldr	r2, [r7, #16]
 8004902:	4313      	orrs	r3, r2
 8004904:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	697a      	ldr	r2, [r7, #20]
 800490a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	693a      	ldr	r2, [r7, #16]
 8004910:	621a      	str	r2, [r3, #32]
}
 8004912:	bf00      	nop
 8004914:	371c      	adds	r7, #28
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	f043 0307 	orr.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004954:	b480      	push	{r7}
 8004956:	b087      	sub	sp, #28
 8004958:	af00      	add	r7, sp, #0
 800495a:	60f8      	str	r0, [r7, #12]
 800495c:	60b9      	str	r1, [r7, #8]
 800495e:	607a      	str	r2, [r7, #4]
 8004960:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004968:	697b      	ldr	r3, [r7, #20]
 800496a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800496e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	021a      	lsls	r2, r3, #8
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	431a      	orrs	r2, r3
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	4313      	orrs	r3, r2
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	697a      	ldr	r2, [r7, #20]
 8004986:	609a      	str	r2, [r3, #8]
}
 8004988:	bf00      	nop
 800498a:	371c      	adds	r7, #28
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr

08004994 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	f003 031f 	and.w	r3, r3, #31
 80049a6:	2201      	movs	r2, #1
 80049a8:	fa02 f303 	lsl.w	r3, r2, r3
 80049ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	6a1a      	ldr	r2, [r3, #32]
 80049b2:	697b      	ldr	r3, [r7, #20]
 80049b4:	43db      	mvns	r3, r3
 80049b6:	401a      	ands	r2, r3
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	6a1a      	ldr	r2, [r3, #32]
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	f003 031f 	and.w	r3, r3, #31
 80049c6:	6879      	ldr	r1, [r7, #4]
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	431a      	orrs	r2, r3
 80049ce:	68fb      	ldr	r3, [r7, #12]
 80049d0:	621a      	str	r2, [r3, #32]
}
 80049d2:	bf00      	nop
 80049d4:	371c      	adds	r7, #28
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
	...

080049e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049e0:	b480      	push	{r7}
 80049e2:	b085      	sub	sp, #20
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d101      	bne.n	80049f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049f4:	2302      	movs	r3, #2
 80049f6:	e050      	b.n	8004a9a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2201      	movs	r2, #1
 80049fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2202      	movs	r2, #2
 8004a04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	689b      	ldr	r3, [r3, #8]
 8004a16:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a1e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68fa      	ldr	r2, [r7, #12]
 8004a30:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	4a1c      	ldr	r2, [pc, #112]	; (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a38:	4293      	cmp	r3, r2
 8004a3a:	d018      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a44:	d013      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	4a18      	ldr	r2, [pc, #96]	; (8004aac <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a4c:	4293      	cmp	r3, r2
 8004a4e:	d00e      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a16      	ldr	r2, [pc, #88]	; (8004ab0 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d009      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	4a15      	ldr	r2, [pc, #84]	; (8004ab4 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d004      	beq.n	8004a6e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	4a13      	ldr	r2, [pc, #76]	; (8004ab8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a6a:	4293      	cmp	r3, r2
 8004a6c:	d10c      	bne.n	8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6e:	68bb      	ldr	r3, [r7, #8]
 8004a70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	68ba      	ldr	r2, [r7, #8]
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	68ba      	ldr	r2, [r7, #8]
 8004a86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	2201      	movs	r2, #1
 8004a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	2200      	movs	r2, #0
 8004a94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a98:	2300      	movs	r3, #0
}
 8004a9a:	4618      	mov	r0, r3
 8004a9c:	3714      	adds	r7, #20
 8004a9e:	46bd      	mov	sp, r7
 8004aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa4:	4770      	bx	lr
 8004aa6:	bf00      	nop
 8004aa8:	40010000 	.word	0x40010000
 8004aac:	40000400 	.word	0x40000400
 8004ab0:	40000800 	.word	0x40000800
 8004ab4:	40000c00 	.word	0x40000c00
 8004ab8:	40014000 	.word	0x40014000

08004abc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
 8004ac4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ad0:	2b01      	cmp	r3, #1
 8004ad2:	d101      	bne.n	8004ad8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004ad4:	2302      	movs	r3, #2
 8004ad6:	e03d      	b.n	8004b54 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004ae6:	683b      	ldr	r3, [r7, #0]
 8004ae8:	68db      	ldr	r3, [r3, #12]
 8004aea:	4313      	orrs	r3, r2
 8004aec:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004af4:	683b      	ldr	r3, [r7, #0]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004b02:	683b      	ldr	r3, [r7, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	4313      	orrs	r3, r2
 8004b08:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	4313      	orrs	r3, r2
 8004b16:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	4313      	orrs	r3, r2
 8004b24:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004b2c:	683b      	ldr	r3, [r7, #0]
 8004b2e:	695b      	ldr	r3, [r3, #20]
 8004b30:	4313      	orrs	r3, r2
 8004b32:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	69db      	ldr	r3, [r3, #28]
 8004b3e:	4313      	orrs	r3, r2
 8004b40:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b52:	2300      	movs	r3, #0
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3714      	adds	r7, #20
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5e:	4770      	bx	lr

08004b60 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b083      	sub	sp, #12
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004b68:	bf00      	nop
 8004b6a:	370c      	adds	r7, #12
 8004b6c:	46bd      	mov	sp, r7
 8004b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b72:	4770      	bx	lr

08004b74 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004b74:	b480      	push	{r7}
 8004b76:	b083      	sub	sp, #12
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004b7c:	bf00      	nop
 8004b7e:	370c      	adds	r7, #12
 8004b80:	46bd      	mov	sp, r7
 8004b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b86:	4770      	bx	lr

08004b88 <Set_LED>:

uint8_t LED_Data[NUM_LEDS][3]; // color data green / red / blue
volatile int datasentflag;


void Set_LED(int LEDnum, int Red, int Green, int Blue) {
 8004b88:	b480      	push	{r7}
 8004b8a:	b085      	sub	sp, #20
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	db22      	blt.n	8004be2 <Set_LED+0x5a>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2b8c      	cmp	r3, #140	; 0x8c
 8004ba0:	dc1f      	bgt.n	8004be2 <Set_LED+0x5a>
        LED_Data[LEDnum][0] = Green;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	b2d8      	uxtb	r0, r3
 8004ba6:	4912      	ldr	r1, [pc, #72]	; (8004bf0 <Set_LED+0x68>)
 8004ba8:	68fa      	ldr	r2, [r7, #12]
 8004baa:	4613      	mov	r3, r2
 8004bac:	005b      	lsls	r3, r3, #1
 8004bae:	4413      	add	r3, r2
 8004bb0:	440b      	add	r3, r1
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	b2d8      	uxtb	r0, r3
 8004bba:	490d      	ldr	r1, [pc, #52]	; (8004bf0 <Set_LED+0x68>)
 8004bbc:	68fa      	ldr	r2, [r7, #12]
 8004bbe:	4613      	mov	r3, r2
 8004bc0:	005b      	lsls	r3, r3, #1
 8004bc2:	4413      	add	r3, r2
 8004bc4:	440b      	add	r3, r1
 8004bc6:	3301      	adds	r3, #1
 8004bc8:	4602      	mov	r2, r0
 8004bca:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 8004bcc:	683b      	ldr	r3, [r7, #0]
 8004bce:	b2d8      	uxtb	r0, r3
 8004bd0:	4907      	ldr	r1, [pc, #28]	; (8004bf0 <Set_LED+0x68>)
 8004bd2:	68fa      	ldr	r2, [r7, #12]
 8004bd4:	4613      	mov	r3, r2
 8004bd6:	005b      	lsls	r3, r3, #1
 8004bd8:	4413      	add	r3, r2
 8004bda:	440b      	add	r3, r1
 8004bdc:	3302      	adds	r3, #2
 8004bde:	4602      	mov	r2, r0
 8004be0:	701a      	strb	r2, [r3, #0]
    }
}
 8004be2:	bf00      	nop
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bec:	4770      	bx	lr
 8004bee:	bf00      	nop
 8004bf0:	2000025c 	.word	0x2000025c

08004bf4 <Set_LED_Hex>:

void Set_LED_Hex(int LEDnum, uint32_t color) {
 8004bf4:	b480      	push	{r7}
 8004bf6:	b085      	sub	sp, #20
 8004bf8:	af00      	add	r7, sp, #0
 8004bfa:	6078      	str	r0, [r7, #4]
 8004bfc:	6039      	str	r1, [r7, #0]
    if(LEDnum >= 0 && LEDnum < NUM_LEDS) {
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	db24      	blt.n	8004c4e <Set_LED_Hex+0x5a>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2b8c      	cmp	r3, #140	; 0x8c
 8004c08:	dc21      	bgt.n	8004c4e <Set_LED_Hex+0x5a>
        uint8_t Red = (color >> 16) & 0xFF;
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	0c1b      	lsrs	r3, r3, #16
 8004c0e:	73fb      	strb	r3, [r7, #15]
        uint8_t Green = (color >> 8) & 0xFF;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	0a1b      	lsrs	r3, r3, #8
 8004c14:	73bb      	strb	r3, [r7, #14]
        uint8_t Blue = color & 0xFF;
 8004c16:	683b      	ldr	r3, [r7, #0]
 8004c18:	737b      	strb	r3, [r7, #13]
        LED_Data[LEDnum][0] = Green;
 8004c1a:	4910      	ldr	r1, [pc, #64]	; (8004c5c <Set_LED_Hex+0x68>)
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	4613      	mov	r3, r2
 8004c20:	005b      	lsls	r3, r3, #1
 8004c22:	4413      	add	r3, r2
 8004c24:	440b      	add	r3, r1
 8004c26:	7bba      	ldrb	r2, [r7, #14]
 8004c28:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][1] = Red;
 8004c2a:	490c      	ldr	r1, [pc, #48]	; (8004c5c <Set_LED_Hex+0x68>)
 8004c2c:	687a      	ldr	r2, [r7, #4]
 8004c2e:	4613      	mov	r3, r2
 8004c30:	005b      	lsls	r3, r3, #1
 8004c32:	4413      	add	r3, r2
 8004c34:	440b      	add	r3, r1
 8004c36:	3301      	adds	r3, #1
 8004c38:	7bfa      	ldrb	r2, [r7, #15]
 8004c3a:	701a      	strb	r2, [r3, #0]
        LED_Data[LEDnum][2] = Blue;
 8004c3c:	4907      	ldr	r1, [pc, #28]	; (8004c5c <Set_LED_Hex+0x68>)
 8004c3e:	687a      	ldr	r2, [r7, #4]
 8004c40:	4613      	mov	r3, r2
 8004c42:	005b      	lsls	r3, r3, #1
 8004c44:	4413      	add	r3, r2
 8004c46:	440b      	add	r3, r1
 8004c48:	3302      	adds	r3, #2
 8004c4a:	7b7a      	ldrb	r2, [r7, #13]
 8004c4c:	701a      	strb	r2, [r3, #0]
    }
}
 8004c4e:	bf00      	nop
 8004c50:	3714      	adds	r7, #20
 8004c52:	46bd      	mov	sp, r7
 8004c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c58:	4770      	bx	lr
 8004c5a:	bf00      	nop
 8004c5c:	2000025c 	.word	0x2000025c

08004c60 <HAL_TIM_PWM_PulseFinishedCallback>:
        datasentflag = 0;
    }

}

void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]

    // Properly stop the PWM output after the transmission is complete
    HAL_TIM_PWM_Stop_DMA(htim, TIM_CHANNEL_1);
 8004c68:	2100      	movs	r1, #0
 8004c6a:	6878      	ldr	r0, [r7, #4]
 8004c6c:	f7fe ff38 	bl	8003ae0 <HAL_TIM_PWM_Stop_DMA>

    // Set the flag indicating that the data has been sent
    datasentflag = 1;
 8004c70:	4b03      	ldr	r3, [pc, #12]	; (8004c80 <HAL_TIM_PWM_PulseFinishedCallback+0x20>)
 8004c72:	2201      	movs	r2, #1
 8004c74:	601a      	str	r2, [r3, #0]
}
 8004c76:	bf00      	nop
 8004c78:	3708      	adds	r7, #8
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	20000404 	.word	0x20000404

08004c84 <__errno>:
 8004c84:	4b01      	ldr	r3, [pc, #4]	; (8004c8c <__errno+0x8>)
 8004c86:	6818      	ldr	r0, [r3, #0]
 8004c88:	4770      	bx	lr
 8004c8a:	bf00      	nop
 8004c8c:	2000001c 	.word	0x2000001c

08004c90 <__libc_init_array>:
 8004c90:	b570      	push	{r4, r5, r6, lr}
 8004c92:	4d0d      	ldr	r5, [pc, #52]	; (8004cc8 <__libc_init_array+0x38>)
 8004c94:	4c0d      	ldr	r4, [pc, #52]	; (8004ccc <__libc_init_array+0x3c>)
 8004c96:	1b64      	subs	r4, r4, r5
 8004c98:	10a4      	asrs	r4, r4, #2
 8004c9a:	2600      	movs	r6, #0
 8004c9c:	42a6      	cmp	r6, r4
 8004c9e:	d109      	bne.n	8004cb4 <__libc_init_array+0x24>
 8004ca0:	4d0b      	ldr	r5, [pc, #44]	; (8004cd0 <__libc_init_array+0x40>)
 8004ca2:	4c0c      	ldr	r4, [pc, #48]	; (8004cd4 <__libc_init_array+0x44>)
 8004ca4:	f000 fca2 	bl	80055ec <_init>
 8004ca8:	1b64      	subs	r4, r4, r5
 8004caa:	10a4      	asrs	r4, r4, #2
 8004cac:	2600      	movs	r6, #0
 8004cae:	42a6      	cmp	r6, r4
 8004cb0:	d105      	bne.n	8004cbe <__libc_init_array+0x2e>
 8004cb2:	bd70      	pop	{r4, r5, r6, pc}
 8004cb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cb8:	4798      	blx	r3
 8004cba:	3601      	adds	r6, #1
 8004cbc:	e7ee      	b.n	8004c9c <__libc_init_array+0xc>
 8004cbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cc2:	4798      	blx	r3
 8004cc4:	3601      	adds	r6, #1
 8004cc6:	e7f2      	b.n	8004cae <__libc_init_array+0x1e>
 8004cc8:	08005680 	.word	0x08005680
 8004ccc:	08005680 	.word	0x08005680
 8004cd0:	08005680 	.word	0x08005680
 8004cd4:	08005684 	.word	0x08005684

08004cd8 <memset>:
 8004cd8:	4402      	add	r2, r0
 8004cda:	4603      	mov	r3, r0
 8004cdc:	4293      	cmp	r3, r2
 8004cde:	d100      	bne.n	8004ce2 <memset+0xa>
 8004ce0:	4770      	bx	lr
 8004ce2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ce6:	e7f9      	b.n	8004cdc <memset+0x4>

08004ce8 <sniprintf>:
 8004ce8:	b40c      	push	{r2, r3}
 8004cea:	b530      	push	{r4, r5, lr}
 8004cec:	4b17      	ldr	r3, [pc, #92]	; (8004d4c <sniprintf+0x64>)
 8004cee:	1e0c      	subs	r4, r1, #0
 8004cf0:	681d      	ldr	r5, [r3, #0]
 8004cf2:	b09d      	sub	sp, #116	; 0x74
 8004cf4:	da08      	bge.n	8004d08 <sniprintf+0x20>
 8004cf6:	238b      	movs	r3, #139	; 0x8b
 8004cf8:	602b      	str	r3, [r5, #0]
 8004cfa:	f04f 30ff 	mov.w	r0, #4294967295
 8004cfe:	b01d      	add	sp, #116	; 0x74
 8004d00:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d04:	b002      	add	sp, #8
 8004d06:	4770      	bx	lr
 8004d08:	f44f 7302 	mov.w	r3, #520	; 0x208
 8004d0c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8004d10:	bf14      	ite	ne
 8004d12:	f104 33ff 	addne.w	r3, r4, #4294967295
 8004d16:	4623      	moveq	r3, r4
 8004d18:	9304      	str	r3, [sp, #16]
 8004d1a:	9307      	str	r3, [sp, #28]
 8004d1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004d20:	9002      	str	r0, [sp, #8]
 8004d22:	9006      	str	r0, [sp, #24]
 8004d24:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d28:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8004d2a:	ab21      	add	r3, sp, #132	; 0x84
 8004d2c:	a902      	add	r1, sp, #8
 8004d2e:	4628      	mov	r0, r5
 8004d30:	9301      	str	r3, [sp, #4]
 8004d32:	f000 f869 	bl	8004e08 <_svfiprintf_r>
 8004d36:	1c43      	adds	r3, r0, #1
 8004d38:	bfbc      	itt	lt
 8004d3a:	238b      	movlt	r3, #139	; 0x8b
 8004d3c:	602b      	strlt	r3, [r5, #0]
 8004d3e:	2c00      	cmp	r4, #0
 8004d40:	d0dd      	beq.n	8004cfe <sniprintf+0x16>
 8004d42:	9b02      	ldr	r3, [sp, #8]
 8004d44:	2200      	movs	r2, #0
 8004d46:	701a      	strb	r2, [r3, #0]
 8004d48:	e7d9      	b.n	8004cfe <sniprintf+0x16>
 8004d4a:	bf00      	nop
 8004d4c:	2000001c 	.word	0x2000001c

08004d50 <__ssputs_r>:
 8004d50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004d54:	688e      	ldr	r6, [r1, #8]
 8004d56:	429e      	cmp	r6, r3
 8004d58:	4682      	mov	sl, r0
 8004d5a:	460c      	mov	r4, r1
 8004d5c:	4690      	mov	r8, r2
 8004d5e:	461f      	mov	r7, r3
 8004d60:	d838      	bhi.n	8004dd4 <__ssputs_r+0x84>
 8004d62:	898a      	ldrh	r2, [r1, #12]
 8004d64:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8004d68:	d032      	beq.n	8004dd0 <__ssputs_r+0x80>
 8004d6a:	6825      	ldr	r5, [r4, #0]
 8004d6c:	6909      	ldr	r1, [r1, #16]
 8004d6e:	eba5 0901 	sub.w	r9, r5, r1
 8004d72:	6965      	ldr	r5, [r4, #20]
 8004d74:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004d78:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004d7c:	3301      	adds	r3, #1
 8004d7e:	444b      	add	r3, r9
 8004d80:	106d      	asrs	r5, r5, #1
 8004d82:	429d      	cmp	r5, r3
 8004d84:	bf38      	it	cc
 8004d86:	461d      	movcc	r5, r3
 8004d88:	0553      	lsls	r3, r2, #21
 8004d8a:	d531      	bpl.n	8004df0 <__ssputs_r+0xa0>
 8004d8c:	4629      	mov	r1, r5
 8004d8e:	f000 fb63 	bl	8005458 <_malloc_r>
 8004d92:	4606      	mov	r6, r0
 8004d94:	b950      	cbnz	r0, 8004dac <__ssputs_r+0x5c>
 8004d96:	230c      	movs	r3, #12
 8004d98:	f8ca 3000 	str.w	r3, [sl]
 8004d9c:	89a3      	ldrh	r3, [r4, #12]
 8004d9e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004da2:	81a3      	strh	r3, [r4, #12]
 8004da4:	f04f 30ff 	mov.w	r0, #4294967295
 8004da8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004dac:	6921      	ldr	r1, [r4, #16]
 8004dae:	464a      	mov	r2, r9
 8004db0:	f000 fabe 	bl	8005330 <memcpy>
 8004db4:	89a3      	ldrh	r3, [r4, #12]
 8004db6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004dba:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004dbe:	81a3      	strh	r3, [r4, #12]
 8004dc0:	6126      	str	r6, [r4, #16]
 8004dc2:	6165      	str	r5, [r4, #20]
 8004dc4:	444e      	add	r6, r9
 8004dc6:	eba5 0509 	sub.w	r5, r5, r9
 8004dca:	6026      	str	r6, [r4, #0]
 8004dcc:	60a5      	str	r5, [r4, #8]
 8004dce:	463e      	mov	r6, r7
 8004dd0:	42be      	cmp	r6, r7
 8004dd2:	d900      	bls.n	8004dd6 <__ssputs_r+0x86>
 8004dd4:	463e      	mov	r6, r7
 8004dd6:	6820      	ldr	r0, [r4, #0]
 8004dd8:	4632      	mov	r2, r6
 8004dda:	4641      	mov	r1, r8
 8004ddc:	f000 fab6 	bl	800534c <memmove>
 8004de0:	68a3      	ldr	r3, [r4, #8]
 8004de2:	1b9b      	subs	r3, r3, r6
 8004de4:	60a3      	str	r3, [r4, #8]
 8004de6:	6823      	ldr	r3, [r4, #0]
 8004de8:	4433      	add	r3, r6
 8004dea:	6023      	str	r3, [r4, #0]
 8004dec:	2000      	movs	r0, #0
 8004dee:	e7db      	b.n	8004da8 <__ssputs_r+0x58>
 8004df0:	462a      	mov	r2, r5
 8004df2:	f000 fba5 	bl	8005540 <_realloc_r>
 8004df6:	4606      	mov	r6, r0
 8004df8:	2800      	cmp	r0, #0
 8004dfa:	d1e1      	bne.n	8004dc0 <__ssputs_r+0x70>
 8004dfc:	6921      	ldr	r1, [r4, #16]
 8004dfe:	4650      	mov	r0, sl
 8004e00:	f000 fabe 	bl	8005380 <_free_r>
 8004e04:	e7c7      	b.n	8004d96 <__ssputs_r+0x46>
	...

08004e08 <_svfiprintf_r>:
 8004e08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e0c:	4698      	mov	r8, r3
 8004e0e:	898b      	ldrh	r3, [r1, #12]
 8004e10:	061b      	lsls	r3, r3, #24
 8004e12:	b09d      	sub	sp, #116	; 0x74
 8004e14:	4607      	mov	r7, r0
 8004e16:	460d      	mov	r5, r1
 8004e18:	4614      	mov	r4, r2
 8004e1a:	d50e      	bpl.n	8004e3a <_svfiprintf_r+0x32>
 8004e1c:	690b      	ldr	r3, [r1, #16]
 8004e1e:	b963      	cbnz	r3, 8004e3a <_svfiprintf_r+0x32>
 8004e20:	2140      	movs	r1, #64	; 0x40
 8004e22:	f000 fb19 	bl	8005458 <_malloc_r>
 8004e26:	6028      	str	r0, [r5, #0]
 8004e28:	6128      	str	r0, [r5, #16]
 8004e2a:	b920      	cbnz	r0, 8004e36 <_svfiprintf_r+0x2e>
 8004e2c:	230c      	movs	r3, #12
 8004e2e:	603b      	str	r3, [r7, #0]
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295
 8004e34:	e0d1      	b.n	8004fda <_svfiprintf_r+0x1d2>
 8004e36:	2340      	movs	r3, #64	; 0x40
 8004e38:	616b      	str	r3, [r5, #20]
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004e3e:	2320      	movs	r3, #32
 8004e40:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004e44:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e48:	2330      	movs	r3, #48	; 0x30
 8004e4a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004ff4 <_svfiprintf_r+0x1ec>
 8004e4e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004e52:	f04f 0901 	mov.w	r9, #1
 8004e56:	4623      	mov	r3, r4
 8004e58:	469a      	mov	sl, r3
 8004e5a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e5e:	b10a      	cbz	r2, 8004e64 <_svfiprintf_r+0x5c>
 8004e60:	2a25      	cmp	r2, #37	; 0x25
 8004e62:	d1f9      	bne.n	8004e58 <_svfiprintf_r+0x50>
 8004e64:	ebba 0b04 	subs.w	fp, sl, r4
 8004e68:	d00b      	beq.n	8004e82 <_svfiprintf_r+0x7a>
 8004e6a:	465b      	mov	r3, fp
 8004e6c:	4622      	mov	r2, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	4638      	mov	r0, r7
 8004e72:	f7ff ff6d 	bl	8004d50 <__ssputs_r>
 8004e76:	3001      	adds	r0, #1
 8004e78:	f000 80aa 	beq.w	8004fd0 <_svfiprintf_r+0x1c8>
 8004e7c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004e7e:	445a      	add	r2, fp
 8004e80:	9209      	str	r2, [sp, #36]	; 0x24
 8004e82:	f89a 3000 	ldrb.w	r3, [sl]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80a2 	beq.w	8004fd0 <_svfiprintf_r+0x1c8>
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f04f 32ff 	mov.w	r2, #4294967295
 8004e92:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e96:	f10a 0a01 	add.w	sl, sl, #1
 8004e9a:	9304      	str	r3, [sp, #16]
 8004e9c:	9307      	str	r3, [sp, #28]
 8004e9e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ea2:	931a      	str	r3, [sp, #104]	; 0x68
 8004ea4:	4654      	mov	r4, sl
 8004ea6:	2205      	movs	r2, #5
 8004ea8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eac:	4851      	ldr	r0, [pc, #324]	; (8004ff4 <_svfiprintf_r+0x1ec>)
 8004eae:	f7fb f99f 	bl	80001f0 <memchr>
 8004eb2:	9a04      	ldr	r2, [sp, #16]
 8004eb4:	b9d8      	cbnz	r0, 8004eee <_svfiprintf_r+0xe6>
 8004eb6:	06d0      	lsls	r0, r2, #27
 8004eb8:	bf44      	itt	mi
 8004eba:	2320      	movmi	r3, #32
 8004ebc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004ec0:	0711      	lsls	r1, r2, #28
 8004ec2:	bf44      	itt	mi
 8004ec4:	232b      	movmi	r3, #43	; 0x2b
 8004ec6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004eca:	f89a 3000 	ldrb.w	r3, [sl]
 8004ece:	2b2a      	cmp	r3, #42	; 0x2a
 8004ed0:	d015      	beq.n	8004efe <_svfiprintf_r+0xf6>
 8004ed2:	9a07      	ldr	r2, [sp, #28]
 8004ed4:	4654      	mov	r4, sl
 8004ed6:	2000      	movs	r0, #0
 8004ed8:	f04f 0c0a 	mov.w	ip, #10
 8004edc:	4621      	mov	r1, r4
 8004ede:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ee2:	3b30      	subs	r3, #48	; 0x30
 8004ee4:	2b09      	cmp	r3, #9
 8004ee6:	d94e      	bls.n	8004f86 <_svfiprintf_r+0x17e>
 8004ee8:	b1b0      	cbz	r0, 8004f18 <_svfiprintf_r+0x110>
 8004eea:	9207      	str	r2, [sp, #28]
 8004eec:	e014      	b.n	8004f18 <_svfiprintf_r+0x110>
 8004eee:	eba0 0308 	sub.w	r3, r0, r8
 8004ef2:	fa09 f303 	lsl.w	r3, r9, r3
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	9304      	str	r3, [sp, #16]
 8004efa:	46a2      	mov	sl, r4
 8004efc:	e7d2      	b.n	8004ea4 <_svfiprintf_r+0x9c>
 8004efe:	9b03      	ldr	r3, [sp, #12]
 8004f00:	1d19      	adds	r1, r3, #4
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	9103      	str	r1, [sp, #12]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	bfbb      	ittet	lt
 8004f0a:	425b      	neglt	r3, r3
 8004f0c:	f042 0202 	orrlt.w	r2, r2, #2
 8004f10:	9307      	strge	r3, [sp, #28]
 8004f12:	9307      	strlt	r3, [sp, #28]
 8004f14:	bfb8      	it	lt
 8004f16:	9204      	strlt	r2, [sp, #16]
 8004f18:	7823      	ldrb	r3, [r4, #0]
 8004f1a:	2b2e      	cmp	r3, #46	; 0x2e
 8004f1c:	d10c      	bne.n	8004f38 <_svfiprintf_r+0x130>
 8004f1e:	7863      	ldrb	r3, [r4, #1]
 8004f20:	2b2a      	cmp	r3, #42	; 0x2a
 8004f22:	d135      	bne.n	8004f90 <_svfiprintf_r+0x188>
 8004f24:	9b03      	ldr	r3, [sp, #12]
 8004f26:	1d1a      	adds	r2, r3, #4
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	9203      	str	r2, [sp, #12]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	bfb8      	it	lt
 8004f30:	f04f 33ff 	movlt.w	r3, #4294967295
 8004f34:	3402      	adds	r4, #2
 8004f36:	9305      	str	r3, [sp, #20]
 8004f38:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8005004 <_svfiprintf_r+0x1fc>
 8004f3c:	7821      	ldrb	r1, [r4, #0]
 8004f3e:	2203      	movs	r2, #3
 8004f40:	4650      	mov	r0, sl
 8004f42:	f7fb f955 	bl	80001f0 <memchr>
 8004f46:	b140      	cbz	r0, 8004f5a <_svfiprintf_r+0x152>
 8004f48:	2340      	movs	r3, #64	; 0x40
 8004f4a:	eba0 000a 	sub.w	r0, r0, sl
 8004f4e:	fa03 f000 	lsl.w	r0, r3, r0
 8004f52:	9b04      	ldr	r3, [sp, #16]
 8004f54:	4303      	orrs	r3, r0
 8004f56:	3401      	adds	r4, #1
 8004f58:	9304      	str	r3, [sp, #16]
 8004f5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f5e:	4826      	ldr	r0, [pc, #152]	; (8004ff8 <_svfiprintf_r+0x1f0>)
 8004f60:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004f64:	2206      	movs	r2, #6
 8004f66:	f7fb f943 	bl	80001f0 <memchr>
 8004f6a:	2800      	cmp	r0, #0
 8004f6c:	d038      	beq.n	8004fe0 <_svfiprintf_r+0x1d8>
 8004f6e:	4b23      	ldr	r3, [pc, #140]	; (8004ffc <_svfiprintf_r+0x1f4>)
 8004f70:	bb1b      	cbnz	r3, 8004fba <_svfiprintf_r+0x1b2>
 8004f72:	9b03      	ldr	r3, [sp, #12]
 8004f74:	3307      	adds	r3, #7
 8004f76:	f023 0307 	bic.w	r3, r3, #7
 8004f7a:	3308      	adds	r3, #8
 8004f7c:	9303      	str	r3, [sp, #12]
 8004f7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f80:	4433      	add	r3, r6
 8004f82:	9309      	str	r3, [sp, #36]	; 0x24
 8004f84:	e767      	b.n	8004e56 <_svfiprintf_r+0x4e>
 8004f86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f8a:	460c      	mov	r4, r1
 8004f8c:	2001      	movs	r0, #1
 8004f8e:	e7a5      	b.n	8004edc <_svfiprintf_r+0xd4>
 8004f90:	2300      	movs	r3, #0
 8004f92:	3401      	adds	r4, #1
 8004f94:	9305      	str	r3, [sp, #20]
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 0c0a 	mov.w	ip, #10
 8004f9c:	4620      	mov	r0, r4
 8004f9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fa2:	3a30      	subs	r2, #48	; 0x30
 8004fa4:	2a09      	cmp	r2, #9
 8004fa6:	d903      	bls.n	8004fb0 <_svfiprintf_r+0x1a8>
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d0c5      	beq.n	8004f38 <_svfiprintf_r+0x130>
 8004fac:	9105      	str	r1, [sp, #20]
 8004fae:	e7c3      	b.n	8004f38 <_svfiprintf_r+0x130>
 8004fb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fb4:	4604      	mov	r4, r0
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e7f0      	b.n	8004f9c <_svfiprintf_r+0x194>
 8004fba:	ab03      	add	r3, sp, #12
 8004fbc:	9300      	str	r3, [sp, #0]
 8004fbe:	462a      	mov	r2, r5
 8004fc0:	4b0f      	ldr	r3, [pc, #60]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004fc2:	a904      	add	r1, sp, #16
 8004fc4:	4638      	mov	r0, r7
 8004fc6:	f3af 8000 	nop.w
 8004fca:	1c42      	adds	r2, r0, #1
 8004fcc:	4606      	mov	r6, r0
 8004fce:	d1d6      	bne.n	8004f7e <_svfiprintf_r+0x176>
 8004fd0:	89ab      	ldrh	r3, [r5, #12]
 8004fd2:	065b      	lsls	r3, r3, #25
 8004fd4:	f53f af2c 	bmi.w	8004e30 <_svfiprintf_r+0x28>
 8004fd8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004fda:	b01d      	add	sp, #116	; 0x74
 8004fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fe0:	ab03      	add	r3, sp, #12
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4b06      	ldr	r3, [pc, #24]	; (8005000 <_svfiprintf_r+0x1f8>)
 8004fe8:	a904      	add	r1, sp, #16
 8004fea:	4638      	mov	r0, r7
 8004fec:	f000 f87a 	bl	80050e4 <_printf_i>
 8004ff0:	e7eb      	b.n	8004fca <_svfiprintf_r+0x1c2>
 8004ff2:	bf00      	nop
 8004ff4:	08005644 	.word	0x08005644
 8004ff8:	0800564e 	.word	0x0800564e
 8004ffc:	00000000 	.word	0x00000000
 8005000:	08004d51 	.word	0x08004d51
 8005004:	0800564a 	.word	0x0800564a

08005008 <_printf_common>:
 8005008:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	4699      	mov	r9, r3
 8005010:	688a      	ldr	r2, [r1, #8]
 8005012:	690b      	ldr	r3, [r1, #16]
 8005014:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005018:	4293      	cmp	r3, r2
 800501a:	bfb8      	it	lt
 800501c:	4613      	movlt	r3, r2
 800501e:	6033      	str	r3, [r6, #0]
 8005020:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005024:	4607      	mov	r7, r0
 8005026:	460c      	mov	r4, r1
 8005028:	b10a      	cbz	r2, 800502e <_printf_common+0x26>
 800502a:	3301      	adds	r3, #1
 800502c:	6033      	str	r3, [r6, #0]
 800502e:	6823      	ldr	r3, [r4, #0]
 8005030:	0699      	lsls	r1, r3, #26
 8005032:	bf42      	ittt	mi
 8005034:	6833      	ldrmi	r3, [r6, #0]
 8005036:	3302      	addmi	r3, #2
 8005038:	6033      	strmi	r3, [r6, #0]
 800503a:	6825      	ldr	r5, [r4, #0]
 800503c:	f015 0506 	ands.w	r5, r5, #6
 8005040:	d106      	bne.n	8005050 <_printf_common+0x48>
 8005042:	f104 0a19 	add.w	sl, r4, #25
 8005046:	68e3      	ldr	r3, [r4, #12]
 8005048:	6832      	ldr	r2, [r6, #0]
 800504a:	1a9b      	subs	r3, r3, r2
 800504c:	42ab      	cmp	r3, r5
 800504e:	dc26      	bgt.n	800509e <_printf_common+0x96>
 8005050:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8005054:	1e13      	subs	r3, r2, #0
 8005056:	6822      	ldr	r2, [r4, #0]
 8005058:	bf18      	it	ne
 800505a:	2301      	movne	r3, #1
 800505c:	0692      	lsls	r2, r2, #26
 800505e:	d42b      	bmi.n	80050b8 <_printf_common+0xb0>
 8005060:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005064:	4649      	mov	r1, r9
 8005066:	4638      	mov	r0, r7
 8005068:	47c0      	blx	r8
 800506a:	3001      	adds	r0, #1
 800506c:	d01e      	beq.n	80050ac <_printf_common+0xa4>
 800506e:	6823      	ldr	r3, [r4, #0]
 8005070:	68e5      	ldr	r5, [r4, #12]
 8005072:	6832      	ldr	r2, [r6, #0]
 8005074:	f003 0306 	and.w	r3, r3, #6
 8005078:	2b04      	cmp	r3, #4
 800507a:	bf08      	it	eq
 800507c:	1aad      	subeq	r5, r5, r2
 800507e:	68a3      	ldr	r3, [r4, #8]
 8005080:	6922      	ldr	r2, [r4, #16]
 8005082:	bf0c      	ite	eq
 8005084:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005088:	2500      	movne	r5, #0
 800508a:	4293      	cmp	r3, r2
 800508c:	bfc4      	itt	gt
 800508e:	1a9b      	subgt	r3, r3, r2
 8005090:	18ed      	addgt	r5, r5, r3
 8005092:	2600      	movs	r6, #0
 8005094:	341a      	adds	r4, #26
 8005096:	42b5      	cmp	r5, r6
 8005098:	d11a      	bne.n	80050d0 <_printf_common+0xc8>
 800509a:	2000      	movs	r0, #0
 800509c:	e008      	b.n	80050b0 <_printf_common+0xa8>
 800509e:	2301      	movs	r3, #1
 80050a0:	4652      	mov	r2, sl
 80050a2:	4649      	mov	r1, r9
 80050a4:	4638      	mov	r0, r7
 80050a6:	47c0      	blx	r8
 80050a8:	3001      	adds	r0, #1
 80050aa:	d103      	bne.n	80050b4 <_printf_common+0xac>
 80050ac:	f04f 30ff 	mov.w	r0, #4294967295
 80050b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050b4:	3501      	adds	r5, #1
 80050b6:	e7c6      	b.n	8005046 <_printf_common+0x3e>
 80050b8:	18e1      	adds	r1, r4, r3
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	2030      	movs	r0, #48	; 0x30
 80050be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80050c2:	4422      	add	r2, r4
 80050c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80050c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80050cc:	3302      	adds	r3, #2
 80050ce:	e7c7      	b.n	8005060 <_printf_common+0x58>
 80050d0:	2301      	movs	r3, #1
 80050d2:	4622      	mov	r2, r4
 80050d4:	4649      	mov	r1, r9
 80050d6:	4638      	mov	r0, r7
 80050d8:	47c0      	blx	r8
 80050da:	3001      	adds	r0, #1
 80050dc:	d0e6      	beq.n	80050ac <_printf_common+0xa4>
 80050de:	3601      	adds	r6, #1
 80050e0:	e7d9      	b.n	8005096 <_printf_common+0x8e>
	...

080050e4 <_printf_i>:
 80050e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050e8:	7e0f      	ldrb	r7, [r1, #24]
 80050ea:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80050ec:	2f78      	cmp	r7, #120	; 0x78
 80050ee:	4691      	mov	r9, r2
 80050f0:	4680      	mov	r8, r0
 80050f2:	460c      	mov	r4, r1
 80050f4:	469a      	mov	sl, r3
 80050f6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80050fa:	d807      	bhi.n	800510c <_printf_i+0x28>
 80050fc:	2f62      	cmp	r7, #98	; 0x62
 80050fe:	d80a      	bhi.n	8005116 <_printf_i+0x32>
 8005100:	2f00      	cmp	r7, #0
 8005102:	f000 80d8 	beq.w	80052b6 <_printf_i+0x1d2>
 8005106:	2f58      	cmp	r7, #88	; 0x58
 8005108:	f000 80a3 	beq.w	8005252 <_printf_i+0x16e>
 800510c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005110:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005114:	e03a      	b.n	800518c <_printf_i+0xa8>
 8005116:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800511a:	2b15      	cmp	r3, #21
 800511c:	d8f6      	bhi.n	800510c <_printf_i+0x28>
 800511e:	a101      	add	r1, pc, #4	; (adr r1, 8005124 <_printf_i+0x40>)
 8005120:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005124:	0800517d 	.word	0x0800517d
 8005128:	08005191 	.word	0x08005191
 800512c:	0800510d 	.word	0x0800510d
 8005130:	0800510d 	.word	0x0800510d
 8005134:	0800510d 	.word	0x0800510d
 8005138:	0800510d 	.word	0x0800510d
 800513c:	08005191 	.word	0x08005191
 8005140:	0800510d 	.word	0x0800510d
 8005144:	0800510d 	.word	0x0800510d
 8005148:	0800510d 	.word	0x0800510d
 800514c:	0800510d 	.word	0x0800510d
 8005150:	0800529d 	.word	0x0800529d
 8005154:	080051c1 	.word	0x080051c1
 8005158:	0800527f 	.word	0x0800527f
 800515c:	0800510d 	.word	0x0800510d
 8005160:	0800510d 	.word	0x0800510d
 8005164:	080052bf 	.word	0x080052bf
 8005168:	0800510d 	.word	0x0800510d
 800516c:	080051c1 	.word	0x080051c1
 8005170:	0800510d 	.word	0x0800510d
 8005174:	0800510d 	.word	0x0800510d
 8005178:	08005287 	.word	0x08005287
 800517c:	682b      	ldr	r3, [r5, #0]
 800517e:	1d1a      	adds	r2, r3, #4
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	602a      	str	r2, [r5, #0]
 8005184:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005188:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800518c:	2301      	movs	r3, #1
 800518e:	e0a3      	b.n	80052d8 <_printf_i+0x1f4>
 8005190:	6820      	ldr	r0, [r4, #0]
 8005192:	6829      	ldr	r1, [r5, #0]
 8005194:	0606      	lsls	r6, r0, #24
 8005196:	f101 0304 	add.w	r3, r1, #4
 800519a:	d50a      	bpl.n	80051b2 <_printf_i+0xce>
 800519c:	680e      	ldr	r6, [r1, #0]
 800519e:	602b      	str	r3, [r5, #0]
 80051a0:	2e00      	cmp	r6, #0
 80051a2:	da03      	bge.n	80051ac <_printf_i+0xc8>
 80051a4:	232d      	movs	r3, #45	; 0x2d
 80051a6:	4276      	negs	r6, r6
 80051a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80051ac:	485e      	ldr	r0, [pc, #376]	; (8005328 <_printf_i+0x244>)
 80051ae:	230a      	movs	r3, #10
 80051b0:	e019      	b.n	80051e6 <_printf_i+0x102>
 80051b2:	680e      	ldr	r6, [r1, #0]
 80051b4:	602b      	str	r3, [r5, #0]
 80051b6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80051ba:	bf18      	it	ne
 80051bc:	b236      	sxthne	r6, r6
 80051be:	e7ef      	b.n	80051a0 <_printf_i+0xbc>
 80051c0:	682b      	ldr	r3, [r5, #0]
 80051c2:	6820      	ldr	r0, [r4, #0]
 80051c4:	1d19      	adds	r1, r3, #4
 80051c6:	6029      	str	r1, [r5, #0]
 80051c8:	0601      	lsls	r1, r0, #24
 80051ca:	d501      	bpl.n	80051d0 <_printf_i+0xec>
 80051cc:	681e      	ldr	r6, [r3, #0]
 80051ce:	e002      	b.n	80051d6 <_printf_i+0xf2>
 80051d0:	0646      	lsls	r6, r0, #25
 80051d2:	d5fb      	bpl.n	80051cc <_printf_i+0xe8>
 80051d4:	881e      	ldrh	r6, [r3, #0]
 80051d6:	4854      	ldr	r0, [pc, #336]	; (8005328 <_printf_i+0x244>)
 80051d8:	2f6f      	cmp	r7, #111	; 0x6f
 80051da:	bf0c      	ite	eq
 80051dc:	2308      	moveq	r3, #8
 80051de:	230a      	movne	r3, #10
 80051e0:	2100      	movs	r1, #0
 80051e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80051e6:	6865      	ldr	r5, [r4, #4]
 80051e8:	60a5      	str	r5, [r4, #8]
 80051ea:	2d00      	cmp	r5, #0
 80051ec:	bfa2      	ittt	ge
 80051ee:	6821      	ldrge	r1, [r4, #0]
 80051f0:	f021 0104 	bicge.w	r1, r1, #4
 80051f4:	6021      	strge	r1, [r4, #0]
 80051f6:	b90e      	cbnz	r6, 80051fc <_printf_i+0x118>
 80051f8:	2d00      	cmp	r5, #0
 80051fa:	d04d      	beq.n	8005298 <_printf_i+0x1b4>
 80051fc:	4615      	mov	r5, r2
 80051fe:	fbb6 f1f3 	udiv	r1, r6, r3
 8005202:	fb03 6711 	mls	r7, r3, r1, r6
 8005206:	5dc7      	ldrb	r7, [r0, r7]
 8005208:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800520c:	4637      	mov	r7, r6
 800520e:	42bb      	cmp	r3, r7
 8005210:	460e      	mov	r6, r1
 8005212:	d9f4      	bls.n	80051fe <_printf_i+0x11a>
 8005214:	2b08      	cmp	r3, #8
 8005216:	d10b      	bne.n	8005230 <_printf_i+0x14c>
 8005218:	6823      	ldr	r3, [r4, #0]
 800521a:	07de      	lsls	r6, r3, #31
 800521c:	d508      	bpl.n	8005230 <_printf_i+0x14c>
 800521e:	6923      	ldr	r3, [r4, #16]
 8005220:	6861      	ldr	r1, [r4, #4]
 8005222:	4299      	cmp	r1, r3
 8005224:	bfde      	ittt	le
 8005226:	2330      	movle	r3, #48	; 0x30
 8005228:	f805 3c01 	strble.w	r3, [r5, #-1]
 800522c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005230:	1b52      	subs	r2, r2, r5
 8005232:	6122      	str	r2, [r4, #16]
 8005234:	f8cd a000 	str.w	sl, [sp]
 8005238:	464b      	mov	r3, r9
 800523a:	aa03      	add	r2, sp, #12
 800523c:	4621      	mov	r1, r4
 800523e:	4640      	mov	r0, r8
 8005240:	f7ff fee2 	bl	8005008 <_printf_common>
 8005244:	3001      	adds	r0, #1
 8005246:	d14c      	bne.n	80052e2 <_printf_i+0x1fe>
 8005248:	f04f 30ff 	mov.w	r0, #4294967295
 800524c:	b004      	add	sp, #16
 800524e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005252:	4835      	ldr	r0, [pc, #212]	; (8005328 <_printf_i+0x244>)
 8005254:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8005258:	6829      	ldr	r1, [r5, #0]
 800525a:	6823      	ldr	r3, [r4, #0]
 800525c:	f851 6b04 	ldr.w	r6, [r1], #4
 8005260:	6029      	str	r1, [r5, #0]
 8005262:	061d      	lsls	r5, r3, #24
 8005264:	d514      	bpl.n	8005290 <_printf_i+0x1ac>
 8005266:	07df      	lsls	r7, r3, #31
 8005268:	bf44      	itt	mi
 800526a:	f043 0320 	orrmi.w	r3, r3, #32
 800526e:	6023      	strmi	r3, [r4, #0]
 8005270:	b91e      	cbnz	r6, 800527a <_printf_i+0x196>
 8005272:	6823      	ldr	r3, [r4, #0]
 8005274:	f023 0320 	bic.w	r3, r3, #32
 8005278:	6023      	str	r3, [r4, #0]
 800527a:	2310      	movs	r3, #16
 800527c:	e7b0      	b.n	80051e0 <_printf_i+0xfc>
 800527e:	6823      	ldr	r3, [r4, #0]
 8005280:	f043 0320 	orr.w	r3, r3, #32
 8005284:	6023      	str	r3, [r4, #0]
 8005286:	2378      	movs	r3, #120	; 0x78
 8005288:	4828      	ldr	r0, [pc, #160]	; (800532c <_printf_i+0x248>)
 800528a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800528e:	e7e3      	b.n	8005258 <_printf_i+0x174>
 8005290:	0659      	lsls	r1, r3, #25
 8005292:	bf48      	it	mi
 8005294:	b2b6      	uxthmi	r6, r6
 8005296:	e7e6      	b.n	8005266 <_printf_i+0x182>
 8005298:	4615      	mov	r5, r2
 800529a:	e7bb      	b.n	8005214 <_printf_i+0x130>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	6826      	ldr	r6, [r4, #0]
 80052a0:	6961      	ldr	r1, [r4, #20]
 80052a2:	1d18      	adds	r0, r3, #4
 80052a4:	6028      	str	r0, [r5, #0]
 80052a6:	0635      	lsls	r5, r6, #24
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	d501      	bpl.n	80052b0 <_printf_i+0x1cc>
 80052ac:	6019      	str	r1, [r3, #0]
 80052ae:	e002      	b.n	80052b6 <_printf_i+0x1d2>
 80052b0:	0670      	lsls	r0, r6, #25
 80052b2:	d5fb      	bpl.n	80052ac <_printf_i+0x1c8>
 80052b4:	8019      	strh	r1, [r3, #0]
 80052b6:	2300      	movs	r3, #0
 80052b8:	6123      	str	r3, [r4, #16]
 80052ba:	4615      	mov	r5, r2
 80052bc:	e7ba      	b.n	8005234 <_printf_i+0x150>
 80052be:	682b      	ldr	r3, [r5, #0]
 80052c0:	1d1a      	adds	r2, r3, #4
 80052c2:	602a      	str	r2, [r5, #0]
 80052c4:	681d      	ldr	r5, [r3, #0]
 80052c6:	6862      	ldr	r2, [r4, #4]
 80052c8:	2100      	movs	r1, #0
 80052ca:	4628      	mov	r0, r5
 80052cc:	f7fa ff90 	bl	80001f0 <memchr>
 80052d0:	b108      	cbz	r0, 80052d6 <_printf_i+0x1f2>
 80052d2:	1b40      	subs	r0, r0, r5
 80052d4:	6060      	str	r0, [r4, #4]
 80052d6:	6863      	ldr	r3, [r4, #4]
 80052d8:	6123      	str	r3, [r4, #16]
 80052da:	2300      	movs	r3, #0
 80052dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80052e0:	e7a8      	b.n	8005234 <_printf_i+0x150>
 80052e2:	6923      	ldr	r3, [r4, #16]
 80052e4:	462a      	mov	r2, r5
 80052e6:	4649      	mov	r1, r9
 80052e8:	4640      	mov	r0, r8
 80052ea:	47d0      	blx	sl
 80052ec:	3001      	adds	r0, #1
 80052ee:	d0ab      	beq.n	8005248 <_printf_i+0x164>
 80052f0:	6823      	ldr	r3, [r4, #0]
 80052f2:	079b      	lsls	r3, r3, #30
 80052f4:	d413      	bmi.n	800531e <_printf_i+0x23a>
 80052f6:	68e0      	ldr	r0, [r4, #12]
 80052f8:	9b03      	ldr	r3, [sp, #12]
 80052fa:	4298      	cmp	r0, r3
 80052fc:	bfb8      	it	lt
 80052fe:	4618      	movlt	r0, r3
 8005300:	e7a4      	b.n	800524c <_printf_i+0x168>
 8005302:	2301      	movs	r3, #1
 8005304:	4632      	mov	r2, r6
 8005306:	4649      	mov	r1, r9
 8005308:	4640      	mov	r0, r8
 800530a:	47d0      	blx	sl
 800530c:	3001      	adds	r0, #1
 800530e:	d09b      	beq.n	8005248 <_printf_i+0x164>
 8005310:	3501      	adds	r5, #1
 8005312:	68e3      	ldr	r3, [r4, #12]
 8005314:	9903      	ldr	r1, [sp, #12]
 8005316:	1a5b      	subs	r3, r3, r1
 8005318:	42ab      	cmp	r3, r5
 800531a:	dcf2      	bgt.n	8005302 <_printf_i+0x21e>
 800531c:	e7eb      	b.n	80052f6 <_printf_i+0x212>
 800531e:	2500      	movs	r5, #0
 8005320:	f104 0619 	add.w	r6, r4, #25
 8005324:	e7f5      	b.n	8005312 <_printf_i+0x22e>
 8005326:	bf00      	nop
 8005328:	08005655 	.word	0x08005655
 800532c:	08005666 	.word	0x08005666

08005330 <memcpy>:
 8005330:	440a      	add	r2, r1
 8005332:	4291      	cmp	r1, r2
 8005334:	f100 33ff 	add.w	r3, r0, #4294967295
 8005338:	d100      	bne.n	800533c <memcpy+0xc>
 800533a:	4770      	bx	lr
 800533c:	b510      	push	{r4, lr}
 800533e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005342:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005346:	4291      	cmp	r1, r2
 8005348:	d1f9      	bne.n	800533e <memcpy+0xe>
 800534a:	bd10      	pop	{r4, pc}

0800534c <memmove>:
 800534c:	4288      	cmp	r0, r1
 800534e:	b510      	push	{r4, lr}
 8005350:	eb01 0402 	add.w	r4, r1, r2
 8005354:	d902      	bls.n	800535c <memmove+0x10>
 8005356:	4284      	cmp	r4, r0
 8005358:	4623      	mov	r3, r4
 800535a:	d807      	bhi.n	800536c <memmove+0x20>
 800535c:	1e43      	subs	r3, r0, #1
 800535e:	42a1      	cmp	r1, r4
 8005360:	d008      	beq.n	8005374 <memmove+0x28>
 8005362:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005366:	f803 2f01 	strb.w	r2, [r3, #1]!
 800536a:	e7f8      	b.n	800535e <memmove+0x12>
 800536c:	4402      	add	r2, r0
 800536e:	4601      	mov	r1, r0
 8005370:	428a      	cmp	r2, r1
 8005372:	d100      	bne.n	8005376 <memmove+0x2a>
 8005374:	bd10      	pop	{r4, pc}
 8005376:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800537a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800537e:	e7f7      	b.n	8005370 <memmove+0x24>

08005380 <_free_r>:
 8005380:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005382:	2900      	cmp	r1, #0
 8005384:	d044      	beq.n	8005410 <_free_r+0x90>
 8005386:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800538a:	9001      	str	r0, [sp, #4]
 800538c:	2b00      	cmp	r3, #0
 800538e:	f1a1 0404 	sub.w	r4, r1, #4
 8005392:	bfb8      	it	lt
 8005394:	18e4      	addlt	r4, r4, r3
 8005396:	f000 f913 	bl	80055c0 <__malloc_lock>
 800539a:	4a1e      	ldr	r2, [pc, #120]	; (8005414 <_free_r+0x94>)
 800539c:	9801      	ldr	r0, [sp, #4]
 800539e:	6813      	ldr	r3, [r2, #0]
 80053a0:	b933      	cbnz	r3, 80053b0 <_free_r+0x30>
 80053a2:	6063      	str	r3, [r4, #4]
 80053a4:	6014      	str	r4, [r2, #0]
 80053a6:	b003      	add	sp, #12
 80053a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80053ac:	f000 b90e 	b.w	80055cc <__malloc_unlock>
 80053b0:	42a3      	cmp	r3, r4
 80053b2:	d908      	bls.n	80053c6 <_free_r+0x46>
 80053b4:	6825      	ldr	r5, [r4, #0]
 80053b6:	1961      	adds	r1, r4, r5
 80053b8:	428b      	cmp	r3, r1
 80053ba:	bf01      	itttt	eq
 80053bc:	6819      	ldreq	r1, [r3, #0]
 80053be:	685b      	ldreq	r3, [r3, #4]
 80053c0:	1949      	addeq	r1, r1, r5
 80053c2:	6021      	streq	r1, [r4, #0]
 80053c4:	e7ed      	b.n	80053a2 <_free_r+0x22>
 80053c6:	461a      	mov	r2, r3
 80053c8:	685b      	ldr	r3, [r3, #4]
 80053ca:	b10b      	cbz	r3, 80053d0 <_free_r+0x50>
 80053cc:	42a3      	cmp	r3, r4
 80053ce:	d9fa      	bls.n	80053c6 <_free_r+0x46>
 80053d0:	6811      	ldr	r1, [r2, #0]
 80053d2:	1855      	adds	r5, r2, r1
 80053d4:	42a5      	cmp	r5, r4
 80053d6:	d10b      	bne.n	80053f0 <_free_r+0x70>
 80053d8:	6824      	ldr	r4, [r4, #0]
 80053da:	4421      	add	r1, r4
 80053dc:	1854      	adds	r4, r2, r1
 80053de:	42a3      	cmp	r3, r4
 80053e0:	6011      	str	r1, [r2, #0]
 80053e2:	d1e0      	bne.n	80053a6 <_free_r+0x26>
 80053e4:	681c      	ldr	r4, [r3, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	6053      	str	r3, [r2, #4]
 80053ea:	4421      	add	r1, r4
 80053ec:	6011      	str	r1, [r2, #0]
 80053ee:	e7da      	b.n	80053a6 <_free_r+0x26>
 80053f0:	d902      	bls.n	80053f8 <_free_r+0x78>
 80053f2:	230c      	movs	r3, #12
 80053f4:	6003      	str	r3, [r0, #0]
 80053f6:	e7d6      	b.n	80053a6 <_free_r+0x26>
 80053f8:	6825      	ldr	r5, [r4, #0]
 80053fa:	1961      	adds	r1, r4, r5
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf04      	itt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	6063      	str	r3, [r4, #4]
 8005406:	bf04      	itt	eq
 8005408:	1949      	addeq	r1, r1, r5
 800540a:	6021      	streq	r1, [r4, #0]
 800540c:	6054      	str	r4, [r2, #4]
 800540e:	e7ca      	b.n	80053a6 <_free_r+0x26>
 8005410:	b003      	add	sp, #12
 8005412:	bd30      	pop	{r4, r5, pc}
 8005414:	20000408 	.word	0x20000408

08005418 <sbrk_aligned>:
 8005418:	b570      	push	{r4, r5, r6, lr}
 800541a:	4e0e      	ldr	r6, [pc, #56]	; (8005454 <sbrk_aligned+0x3c>)
 800541c:	460c      	mov	r4, r1
 800541e:	6831      	ldr	r1, [r6, #0]
 8005420:	4605      	mov	r5, r0
 8005422:	b911      	cbnz	r1, 800542a <sbrk_aligned+0x12>
 8005424:	f000 f8bc 	bl	80055a0 <_sbrk_r>
 8005428:	6030      	str	r0, [r6, #0]
 800542a:	4621      	mov	r1, r4
 800542c:	4628      	mov	r0, r5
 800542e:	f000 f8b7 	bl	80055a0 <_sbrk_r>
 8005432:	1c43      	adds	r3, r0, #1
 8005434:	d00a      	beq.n	800544c <sbrk_aligned+0x34>
 8005436:	1cc4      	adds	r4, r0, #3
 8005438:	f024 0403 	bic.w	r4, r4, #3
 800543c:	42a0      	cmp	r0, r4
 800543e:	d007      	beq.n	8005450 <sbrk_aligned+0x38>
 8005440:	1a21      	subs	r1, r4, r0
 8005442:	4628      	mov	r0, r5
 8005444:	f000 f8ac 	bl	80055a0 <_sbrk_r>
 8005448:	3001      	adds	r0, #1
 800544a:	d101      	bne.n	8005450 <sbrk_aligned+0x38>
 800544c:	f04f 34ff 	mov.w	r4, #4294967295
 8005450:	4620      	mov	r0, r4
 8005452:	bd70      	pop	{r4, r5, r6, pc}
 8005454:	2000040c 	.word	0x2000040c

08005458 <_malloc_r>:
 8005458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800545c:	1ccd      	adds	r5, r1, #3
 800545e:	f025 0503 	bic.w	r5, r5, #3
 8005462:	3508      	adds	r5, #8
 8005464:	2d0c      	cmp	r5, #12
 8005466:	bf38      	it	cc
 8005468:	250c      	movcc	r5, #12
 800546a:	2d00      	cmp	r5, #0
 800546c:	4607      	mov	r7, r0
 800546e:	db01      	blt.n	8005474 <_malloc_r+0x1c>
 8005470:	42a9      	cmp	r1, r5
 8005472:	d905      	bls.n	8005480 <_malloc_r+0x28>
 8005474:	230c      	movs	r3, #12
 8005476:	603b      	str	r3, [r7, #0]
 8005478:	2600      	movs	r6, #0
 800547a:	4630      	mov	r0, r6
 800547c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005480:	4e2e      	ldr	r6, [pc, #184]	; (800553c <_malloc_r+0xe4>)
 8005482:	f000 f89d 	bl	80055c0 <__malloc_lock>
 8005486:	6833      	ldr	r3, [r6, #0]
 8005488:	461c      	mov	r4, r3
 800548a:	bb34      	cbnz	r4, 80054da <_malloc_r+0x82>
 800548c:	4629      	mov	r1, r5
 800548e:	4638      	mov	r0, r7
 8005490:	f7ff ffc2 	bl	8005418 <sbrk_aligned>
 8005494:	1c43      	adds	r3, r0, #1
 8005496:	4604      	mov	r4, r0
 8005498:	d14d      	bne.n	8005536 <_malloc_r+0xde>
 800549a:	6834      	ldr	r4, [r6, #0]
 800549c:	4626      	mov	r6, r4
 800549e:	2e00      	cmp	r6, #0
 80054a0:	d140      	bne.n	8005524 <_malloc_r+0xcc>
 80054a2:	6823      	ldr	r3, [r4, #0]
 80054a4:	4631      	mov	r1, r6
 80054a6:	4638      	mov	r0, r7
 80054a8:	eb04 0803 	add.w	r8, r4, r3
 80054ac:	f000 f878 	bl	80055a0 <_sbrk_r>
 80054b0:	4580      	cmp	r8, r0
 80054b2:	d13a      	bne.n	800552a <_malloc_r+0xd2>
 80054b4:	6821      	ldr	r1, [r4, #0]
 80054b6:	3503      	adds	r5, #3
 80054b8:	1a6d      	subs	r5, r5, r1
 80054ba:	f025 0503 	bic.w	r5, r5, #3
 80054be:	3508      	adds	r5, #8
 80054c0:	2d0c      	cmp	r5, #12
 80054c2:	bf38      	it	cc
 80054c4:	250c      	movcc	r5, #12
 80054c6:	4629      	mov	r1, r5
 80054c8:	4638      	mov	r0, r7
 80054ca:	f7ff ffa5 	bl	8005418 <sbrk_aligned>
 80054ce:	3001      	adds	r0, #1
 80054d0:	d02b      	beq.n	800552a <_malloc_r+0xd2>
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	442b      	add	r3, r5
 80054d6:	6023      	str	r3, [r4, #0]
 80054d8:	e00e      	b.n	80054f8 <_malloc_r+0xa0>
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	1b52      	subs	r2, r2, r5
 80054de:	d41e      	bmi.n	800551e <_malloc_r+0xc6>
 80054e0:	2a0b      	cmp	r2, #11
 80054e2:	d916      	bls.n	8005512 <_malloc_r+0xba>
 80054e4:	1961      	adds	r1, r4, r5
 80054e6:	42a3      	cmp	r3, r4
 80054e8:	6025      	str	r5, [r4, #0]
 80054ea:	bf18      	it	ne
 80054ec:	6059      	strne	r1, [r3, #4]
 80054ee:	6863      	ldr	r3, [r4, #4]
 80054f0:	bf08      	it	eq
 80054f2:	6031      	streq	r1, [r6, #0]
 80054f4:	5162      	str	r2, [r4, r5]
 80054f6:	604b      	str	r3, [r1, #4]
 80054f8:	4638      	mov	r0, r7
 80054fa:	f104 060b 	add.w	r6, r4, #11
 80054fe:	f000 f865 	bl	80055cc <__malloc_unlock>
 8005502:	f026 0607 	bic.w	r6, r6, #7
 8005506:	1d23      	adds	r3, r4, #4
 8005508:	1af2      	subs	r2, r6, r3
 800550a:	d0b6      	beq.n	800547a <_malloc_r+0x22>
 800550c:	1b9b      	subs	r3, r3, r6
 800550e:	50a3      	str	r3, [r4, r2]
 8005510:	e7b3      	b.n	800547a <_malloc_r+0x22>
 8005512:	6862      	ldr	r2, [r4, #4]
 8005514:	42a3      	cmp	r3, r4
 8005516:	bf0c      	ite	eq
 8005518:	6032      	streq	r2, [r6, #0]
 800551a:	605a      	strne	r2, [r3, #4]
 800551c:	e7ec      	b.n	80054f8 <_malloc_r+0xa0>
 800551e:	4623      	mov	r3, r4
 8005520:	6864      	ldr	r4, [r4, #4]
 8005522:	e7b2      	b.n	800548a <_malloc_r+0x32>
 8005524:	4634      	mov	r4, r6
 8005526:	6876      	ldr	r6, [r6, #4]
 8005528:	e7b9      	b.n	800549e <_malloc_r+0x46>
 800552a:	230c      	movs	r3, #12
 800552c:	603b      	str	r3, [r7, #0]
 800552e:	4638      	mov	r0, r7
 8005530:	f000 f84c 	bl	80055cc <__malloc_unlock>
 8005534:	e7a1      	b.n	800547a <_malloc_r+0x22>
 8005536:	6025      	str	r5, [r4, #0]
 8005538:	e7de      	b.n	80054f8 <_malloc_r+0xa0>
 800553a:	bf00      	nop
 800553c:	20000408 	.word	0x20000408

08005540 <_realloc_r>:
 8005540:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005544:	4680      	mov	r8, r0
 8005546:	4614      	mov	r4, r2
 8005548:	460e      	mov	r6, r1
 800554a:	b921      	cbnz	r1, 8005556 <_realloc_r+0x16>
 800554c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005550:	4611      	mov	r1, r2
 8005552:	f7ff bf81 	b.w	8005458 <_malloc_r>
 8005556:	b92a      	cbnz	r2, 8005564 <_realloc_r+0x24>
 8005558:	f7ff ff12 	bl	8005380 <_free_r>
 800555c:	4625      	mov	r5, r4
 800555e:	4628      	mov	r0, r5
 8005560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005564:	f000 f838 	bl	80055d8 <_malloc_usable_size_r>
 8005568:	4284      	cmp	r4, r0
 800556a:	4607      	mov	r7, r0
 800556c:	d802      	bhi.n	8005574 <_realloc_r+0x34>
 800556e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005572:	d812      	bhi.n	800559a <_realloc_r+0x5a>
 8005574:	4621      	mov	r1, r4
 8005576:	4640      	mov	r0, r8
 8005578:	f7ff ff6e 	bl	8005458 <_malloc_r>
 800557c:	4605      	mov	r5, r0
 800557e:	2800      	cmp	r0, #0
 8005580:	d0ed      	beq.n	800555e <_realloc_r+0x1e>
 8005582:	42bc      	cmp	r4, r7
 8005584:	4622      	mov	r2, r4
 8005586:	4631      	mov	r1, r6
 8005588:	bf28      	it	cs
 800558a:	463a      	movcs	r2, r7
 800558c:	f7ff fed0 	bl	8005330 <memcpy>
 8005590:	4631      	mov	r1, r6
 8005592:	4640      	mov	r0, r8
 8005594:	f7ff fef4 	bl	8005380 <_free_r>
 8005598:	e7e1      	b.n	800555e <_realloc_r+0x1e>
 800559a:	4635      	mov	r5, r6
 800559c:	e7df      	b.n	800555e <_realloc_r+0x1e>
	...

080055a0 <_sbrk_r>:
 80055a0:	b538      	push	{r3, r4, r5, lr}
 80055a2:	4d06      	ldr	r5, [pc, #24]	; (80055bc <_sbrk_r+0x1c>)
 80055a4:	2300      	movs	r3, #0
 80055a6:	4604      	mov	r4, r0
 80055a8:	4608      	mov	r0, r1
 80055aa:	602b      	str	r3, [r5, #0]
 80055ac:	f7fc f8c4 	bl	8001738 <_sbrk>
 80055b0:	1c43      	adds	r3, r0, #1
 80055b2:	d102      	bne.n	80055ba <_sbrk_r+0x1a>
 80055b4:	682b      	ldr	r3, [r5, #0]
 80055b6:	b103      	cbz	r3, 80055ba <_sbrk_r+0x1a>
 80055b8:	6023      	str	r3, [r4, #0]
 80055ba:	bd38      	pop	{r3, r4, r5, pc}
 80055bc:	20000410 	.word	0x20000410

080055c0 <__malloc_lock>:
 80055c0:	4801      	ldr	r0, [pc, #4]	; (80055c8 <__malloc_lock+0x8>)
 80055c2:	f000 b811 	b.w	80055e8 <__retarget_lock_acquire_recursive>
 80055c6:	bf00      	nop
 80055c8:	20000414 	.word	0x20000414

080055cc <__malloc_unlock>:
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <__malloc_unlock+0x8>)
 80055ce:	f000 b80c 	b.w	80055ea <__retarget_lock_release_recursive>
 80055d2:	bf00      	nop
 80055d4:	20000414 	.word	0x20000414

080055d8 <_malloc_usable_size_r>:
 80055d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055dc:	1f18      	subs	r0, r3, #4
 80055de:	2b00      	cmp	r3, #0
 80055e0:	bfbc      	itt	lt
 80055e2:	580b      	ldrlt	r3, [r1, r0]
 80055e4:	18c0      	addlt	r0, r0, r3
 80055e6:	4770      	bx	lr

080055e8 <__retarget_lock_acquire_recursive>:
 80055e8:	4770      	bx	lr

080055ea <__retarget_lock_release_recursive>:
 80055ea:	4770      	bx	lr

080055ec <_init>:
 80055ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ee:	bf00      	nop
 80055f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055f2:	bc08      	pop	{r3}
 80055f4:	469e      	mov	lr, r3
 80055f6:	4770      	bx	lr

080055f8 <_fini>:
 80055f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055fa:	bf00      	nop
 80055fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055fe:	bc08      	pop	{r3}
 8005600:	469e      	mov	lr, r3
 8005602:	4770      	bx	lr
